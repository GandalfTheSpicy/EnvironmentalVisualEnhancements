Shader "Sphere/Terrain" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_DetailVertTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_Albedo ("Albedo Index", Range(0,5)) = 1.2
		_CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
	}


	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 25 to 34
//   d3d11 - ALU: 21 to 33, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbnejkobfienlflhlnfekjfpkfafbillmabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, vec2(tmpvar_56)).w;
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * _Albedo);
  light_2 = tmpvar_60;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, vec2(tmpvar_56)).w;
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * _Albedo);
  light_2 = tmpvar_60;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 421
#line 446
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 429
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 433
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 421
#line 446
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 437
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 441
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 450
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 454
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 458
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 462
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 466
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 470
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 474
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 478
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.w, c9.x
mov r1.xyz, v2
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 24 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecediapopkioojboekpkcodldfhijppeeonoabaaaaaapiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefchmadaaaaeaaaabaa
npaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
giaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaacaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaabaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (light_2 * _Albedo);
  light_2 = tmpvar_58;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (light_2 * _Albedo);
  light_2 = tmpvar_58;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 418
#line 431
#line 418
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 422
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 426
    o.color = v.color;
    o.normal = v.normal;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 418
#line 431
#line 431
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 435
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 439
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 442
lowp vec4 frag( in v2f IN ) {
    #line 444
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 448
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 452
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 456
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 460
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 464
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 468
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 472
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    color.w = 1.0;
    #line 476
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddkkcfibbnbjalfnbjmkbdechcjifglglabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  highp float tmpvar_61;
  tmpvar_61 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_57.w) * tmpvar_60.w);
  atten_3 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_62)), 0.0, 1.0);
  light_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (light_2 * _Albedo);
  light_2 = tmpvar_64;
  color_18.xyz = ((color_18 * _Color).xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  highp float tmpvar_61;
  tmpvar_61 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_57.w) * tmpvar_60.w);
  atten_3 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_62)), 0.0, 1.0);
  light_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (light_2 * _Albedo);
  light_2 = tmpvar_64;
  color_18.xyz = ((color_18 * _Color).xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 430
#line 455
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 438
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 430
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 467
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 471
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 475
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 479
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 483
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 487
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbnejkobfienlflhlnfekjfpkfafbillmabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_57;
  tmpvar_57 = (texture2D (_LightTextureB0, vec2(tmpvar_56)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * _Albedo);
  light_2 = tmpvar_60;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_57;
  tmpvar_57 = (texture2D (_LightTextureB0, vec2(tmpvar_56)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * _Albedo);
  light_2 = tmpvar_60;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 422
#line 447
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 430
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 434
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 422
#line 447
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 438
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 442
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 451
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 455
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 459
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 463
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 467
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 471
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 475
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 479
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 28 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhjipbhblkaekfkmmkahbafmhfflocoababaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaaaaaaaaaaacaaaaaa
dcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_2 * _Albedo);
  light_2 = tmpvar_59;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_2 * _Albedo);
  light_2 = tmpvar_59;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 421
#line 446
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 429
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 433
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 421
#line 446
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 437
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 441
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 450
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 454
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 458
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 462
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 466
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 470
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 474
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 478
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_22;
  if ((tmpvar_21.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiljiffimpneejaodciihkilfjlcljhiabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_65;
  if ((tmpvar_64.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * _Albedo);
  light_2 = tmpvar_69;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_65;
  if ((tmpvar_64.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * _Albedo);
  light_2 = tmpvar_69;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 437
#line 463
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 445
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 450
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 437
#line 463
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 454
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 458
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 463
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 467
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 471
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 475
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 479
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 483
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 487
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 491
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 495
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiljiffimpneejaodciihkilfjlcljhiabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump float shadow_62;
  lowp float tmpvar_63;
  tmpvar_63 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (_LightShadowData.x + (shadow_62 * (1.0 - _LightShadowData.x)));
  shadow_62 = tmpvar_64;
  tmpvar_61 = shadow_62;
  highp float tmpvar_65;
  tmpvar_65 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  atten_3 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_2 * _Albedo);
  light_2 = tmpvar_68;
  color_18.xyz = ((color_18 * _Color).xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 438
#line 464
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 446
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 451
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 438
#line 464
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 455
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 459
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 464
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 468
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 472
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 476
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 480
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 484
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 492
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 496
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o5.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c11.y
mov o0, r0
mul r1.y, r1, c9.x
mad o4.xy, r1.z, c10.zwzw, r1
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mov o4.zw, r0
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 29 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbpldilioogkeboomelohjemheclncdjabaaaaaakiafaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcbeaeaaaaeaaaabaaafabaaaafjaaaaae
egiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
abaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaa
acaaaaaaegbobaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaa
akiacaaaaaaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaa
kgaobaaaaaaaaaaaaaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaabaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  mediump float lightShadowDataX_57;
  highp float dist_58;
  lowp float tmpvar_59;
  tmpvar_59 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_58 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = _LightShadowData.x;
  lightShadowDataX_57 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = max (float((dist_58 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_57);
  tmpvar_56 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_62)), 0.0, 1.0);
  light_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (light_2 * _Albedo);
  light_2 = tmpvar_64;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56.x), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_2 * _Albedo);
  light_2 = tmpvar_59;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 427
#line 452
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 435
    o.color = v.color;
    o.normal = v.normal;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 439
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 427
#line 452
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 443
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 447
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 456
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 460
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 464
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 468
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 472
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 476
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 480
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 484
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_4;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 33 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o6.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c15.y
mov o0, r0
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
add r1.xyz, -r1, c12
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mov o5.zw, r0
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 11 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 37 instructions, 3 temp regs, 0 temp arrays:
// ALU 32 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbaeaopojimeogpjbddfpghkemabekmjabaaaaaaamahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgaafaaaaeaaaabaafiabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaa
acaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaa
egaabaaaabaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaa
pgapbaaaabaaaaaaegaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaa
aeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  mediump float lightShadowDataX_57;
  highp float dist_58;
  lowp float tmpvar_59;
  tmpvar_59 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_58 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = _LightShadowData.x;
  lightShadowDataX_57 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = max (float((dist_58 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_57);
  tmpvar_56 = tmpvar_61;
  lowp float tmpvar_62;
  tmpvar_62 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_56);
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_62), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_2 * _Albedo);
  light_2 = tmpvar_65;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  tmpvar_56 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_2 * _Albedo);
  light_2 = tmpvar_59;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 430
#line 456
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 438
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 443
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 430
#line 456
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 447
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 451
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 460
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 464
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 468
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 472
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 476
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 480
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 484
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 488
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_20;
  tmpvar_20 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_21;
  tmpvar_21 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_22;
  if ((tmpvar_21 < tmpvar_20)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  tmpvar_65 = (tmpvar_59.w * tmpvar_64);
  atten_3 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_2 * _Albedo);
  light_2 = tmpvar_68;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  tmpvar_65 = (tmpvar_59.w * tmpvar_64);
  atten_3 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_2 * _Albedo);
  light_2 = tmpvar_68;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 435
#line 461
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 443
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 448
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 435
#line 461
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 452
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 456
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 461
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 465
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 469
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 473
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 477
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 481
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 485
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 489
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 493
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_21;
  tmpvar_21 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_22;
  tmpvar_22 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_23;
  if ((tmpvar_22 < tmpvar_21)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * tmpvar_23)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_65);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * _Albedo);
  light_2 = tmpvar_69;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_65);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * _Albedo);
  light_2 = tmpvar_69;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 436
#line 462
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 444
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 449
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 436
#line 462
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 453
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 457
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 462
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 466
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 470
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 474
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 478
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 482
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 486
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 490
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 494
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_21;
  vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_21.x = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_21.y = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_21.z = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_21.w = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_21, tmpvar_22.zzzz);
  vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 11 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedagfmeiefoamligifhjimnanpaflifkdnabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaafaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_66;
  P_66 = (tmpvar_65.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_64.x = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_65.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_64.y = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_65.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_64.z = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_65.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_64.w = tmpvar_73;
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_64, tmpvar_65.zzzz);
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_63 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_2 * _Albedo);
  light_2 = tmpvar_85;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_66;
  P_66 = (tmpvar_65.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_64.x = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_65.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_64.y = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_65.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_64.z = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_65.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_64.w = tmpvar_73;
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_64, tmpvar_65.zzzz);
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_63 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_2 * _Albedo);
  light_2 = tmpvar_85;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 445
#line 471
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 445
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 483
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 487
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 491
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 495
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 499
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 503
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 shadows_17;
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_17.x = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[0].xyz)).x;
  shadows_17.y = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[1].xyz)).x;
  shadows_17.z = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[2].xyz)).x;
  shadows_17.w = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_19;
  tmpvar_19 = (_LightShadowData.xxxx + (shadows_17 * (1.0 - _LightShadowData.xxxx)));
  shadows_17 = tmpvar_19;
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_19, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 11 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedagfmeiefoamligifhjimnanpaflifkdnabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaafaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_64;
  coord_64 = (tmpvar_63 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_65;
  tmpvar_65 = shadow2DEXT (_ShadowMapTexture, coord_64);
  shadows_62.x = tmpvar_65;
  highp vec3 coord_66;
  coord_66 = (tmpvar_63 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_67;
  tmpvar_67 = shadow2DEXT (_ShadowMapTexture, coord_66);
  shadows_62.y = tmpvar_67;
  highp vec3 coord_68;
  coord_68 = (tmpvar_63 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_69;
  tmpvar_69 = shadow2DEXT (_ShadowMapTexture, coord_68);
  shadows_62.z = tmpvar_69;
  highp vec3 coord_70;
  coord_70 = (tmpvar_63 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_71;
  tmpvar_71 = shadow2DEXT (_ShadowMapTexture, coord_70);
  shadows_62.w = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (_LightShadowData.xxxx + (shadows_62 * (1.0 - _LightShadowData.xxxx)));
  shadows_62 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  atten_3 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_2 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_2 * _Albedo);
  light_2 = tmpvar_77;
  color_18.xyz = ((color_18 * _Color).xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 445
#line 471
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 445
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 483
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 487
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 491
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 495
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 499
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 503
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_20;
  shadowVals_20.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_21;
  tmpvar_21 = lessThan (shadowVals_20, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_22;
  tmpvar_22 = _LightShadowData.xxxx;
  float tmpvar_23;
  if (tmpvar_21.x) {
    tmpvar_23 = tmpvar_22.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  if (tmpvar_21.y) {
    tmpvar_24 = tmpvar_22.y;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_21.z) {
    tmpvar_25 = tmpvar_22.z;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_21.w) {
    tmpvar_26 = tmpvar_22.w;
  } else {
    tmpvar_26 = 1.0;
  };
  vec4 tmpvar_27;
  tmpvar_27.x = tmpvar_23;
  tmpvar_27.y = tmpvar_24;
  tmpvar_27.z = tmpvar_25;
  tmpvar_27.w = tmpvar_26;
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec4 shadowVals_62;
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_62.x = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_62.y = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_62.z = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_62.w = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_62, vec4(tmpvar_63));
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_61 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (tmpvar_59.w * tmpvar_60);
  atten_3 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * _Albedo);
  light_2 = tmpvar_87;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec4 shadowVals_62;
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_62.x = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_62.y = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_62.z = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_62.w = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_62, vec4(tmpvar_63));
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_61 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (tmpvar_59.w * tmpvar_60);
  atten_3 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * _Albedo);
  light_2 = tmpvar_87;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 441
#line 467
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 449
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 454
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 441
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 479
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 483
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 487
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 491
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 495
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 499
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_21;
  shadowVals_21.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_21, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_61);
  atten_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_61);
  atten_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 442
#line 468
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 450
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 455
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 442
#line 468
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 459
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 463
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 468
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 472
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 476
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 480
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 484
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 488
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 492
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 496
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 500
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbnejkobfienlflhlnfekjfpkfafbillmabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, vec2(tmpvar_56)).w;
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * _Albedo);
  light_2 = tmpvar_60;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, vec2(tmpvar_56)).w;
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * _Albedo);
  light_2 = tmpvar_60;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 421
#line 446
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 429
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 433
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 421
#line 446
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 437
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 441
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 450
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 454
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 458
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 462
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 466
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 470
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 474
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 478
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.w, c9.x
mov r1.xyz, v2
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 24 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecediapopkioojboekpkcodldfhijppeeonoabaaaaaapiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefchmadaaaaeaaaabaa
npaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
giaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaacaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaabaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (light_2 * _Albedo);
  light_2 = tmpvar_58;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (light_2 * _Albedo);
  light_2 = tmpvar_58;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 418
#line 431
#line 418
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 422
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 426
    o.color = v.color;
    o.normal = v.normal;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 418
#line 431
#line 431
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 435
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 439
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 442
lowp vec4 frag( in v2f IN ) {
    #line 444
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 448
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 452
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 456
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 460
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 464
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 468
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    #line 472
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    color.w = 1.0;
    #line 476
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddkkcfibbnbjalfnbjmkbdechcjifglglabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  highp float tmpvar_61;
  tmpvar_61 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_57.w) * tmpvar_60.w);
  atten_3 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_62)), 0.0, 1.0);
  light_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (light_2 * _Albedo);
  light_2 = tmpvar_64;
  color_18.xyz = ((color_18 * _Color).xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  highp float tmpvar_61;
  tmpvar_61 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_57.w) * tmpvar_60.w);
  atten_3 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_62)), 0.0, 1.0);
  light_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (light_2 * _Albedo);
  light_2 = tmpvar_64;
  color_18.xyz = ((color_18 * _Color).xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 430
#line 455
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 438
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 442
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 430
#line 455
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 446
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 450
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 455
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 459
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 463
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 467
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 471
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 475
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 479
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 483
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 487
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbnejkobfienlflhlnfekjfpkfafbillmabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_57;
  tmpvar_57 = (texture2D (_LightTextureB0, vec2(tmpvar_56)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * _Albedo);
  light_2 = tmpvar_60;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_57;
  tmpvar_57 = (texture2D (_LightTextureB0, vec2(tmpvar_56)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_2 * _Albedo);
  light_2 = tmpvar_60;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 422
#line 447
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 430
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 434
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 422
#line 447
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 438
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 442
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 451
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 455
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 459
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 463
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 467
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 471
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 475
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 479
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 28 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhjipbhblkaekfkmmkahbafmhfflocoababaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaaaaaaaaaaacaaaaaa
dcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_2 * _Albedo);
  light_2 = tmpvar_59;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_2 * _Albedo);
  light_2 = tmpvar_59;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 421
#line 446
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 429
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 433
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 421
#line 446
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 437
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 441
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 450
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 454
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 458
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 462
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 466
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 470
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 474
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 478
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_22;
  if ((tmpvar_21.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiljiffimpneejaodciihkilfjlcljhiabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_65;
  if ((tmpvar_64.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * _Albedo);
  light_2 = tmpvar_69;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_65;
  if ((tmpvar_64.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * _Albedo);
  light_2 = tmpvar_69;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 437
#line 463
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 445
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 450
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 437
#line 463
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 454
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 458
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 463
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 467
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 471
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 475
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 479
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 483
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 487
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 491
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 495
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiljiffimpneejaodciihkilfjlcljhiabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump float shadow_62;
  lowp float tmpvar_63;
  tmpvar_63 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (_LightShadowData.x + (shadow_62 * (1.0 - _LightShadowData.x)));
  shadow_62 = tmpvar_64;
  tmpvar_61 = shadow_62;
  highp float tmpvar_65;
  tmpvar_65 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  atten_3 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_2 * _Albedo);
  light_2 = tmpvar_68;
  color_18.xyz = ((color_18 * _Color).xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 438
#line 464
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 446
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 451
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 438
#line 464
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 455
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 459
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 464
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 468
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 472
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 476
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 480
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 484
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 492
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 496
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o5.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c11.y
mov o0, r0
mul r1.y, r1, c9.x
mad o4.xy, r1.z, c10.zwzw, r1
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mov o4.zw, r0
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 29 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbpldilioogkeboomelohjemheclncdjabaaaaaakiafaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcbeaeaaaaeaaaabaaafabaaaafjaaaaae
egiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
abaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaa
acaaaaaaegbobaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaa
akiacaaaaaaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaa
kgaobaaaaaaaaaaaaaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaabaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  mediump float lightShadowDataX_57;
  highp float dist_58;
  lowp float tmpvar_59;
  tmpvar_59 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_58 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = _LightShadowData.x;
  lightShadowDataX_57 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = max (float((dist_58 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_57);
  tmpvar_56 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_62)), 0.0, 1.0);
  light_2 = tmpvar_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (light_2 * _Albedo);
  light_2 = tmpvar_64;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56.x), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_2 * _Albedo);
  light_2 = tmpvar_59;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 427
#line 452
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 435
    o.color = v.color;
    o.normal = v.normal;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 439
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 427
#line 452
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 443
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 447
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 456
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 460
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 464
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 468
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 472
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 476
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 480
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 484
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_4;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 33 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o6.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c15.y
mov o0, r0
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
add r1.xyz, -r1, c12
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mov o5.zw, r0
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 11 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 37 instructions, 3 temp regs, 0 temp arrays:
// ALU 32 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbaeaopojimeogpjbddfpghkemabekmjabaaaaaaamahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgaafaaaaeaaaabaafiabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaa
acaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaa
egaabaaaabaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaa
pgapbaaaabaaaaaaegaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaa
aeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  mediump float lightShadowDataX_57;
  highp float dist_58;
  lowp float tmpvar_59;
  tmpvar_59 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_58 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = _LightShadowData.x;
  lightShadowDataX_57 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = max (float((dist_58 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_57);
  tmpvar_56 = tmpvar_61;
  lowp float tmpvar_62;
  tmpvar_62 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_56);
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_62), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_2 * _Albedo);
  light_2 = tmpvar_65;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = ((main_15 * tmpvar_51) * xlv_TEXCOORD1);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  lowp float tmpvar_56;
  tmpvar_56 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_2 * _Albedo);
  light_2 = tmpvar_59;
  color_17.xyz = ((color_17 * _Color).xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 430
#line 456
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 438
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 443
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 430
#line 456
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 447
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 451
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 460
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 464
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 468
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 472
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 476
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 480
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 484
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 488
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_20;
  tmpvar_20 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_21;
  tmpvar_21 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_22;
  if ((tmpvar_21 < tmpvar_20)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  tmpvar_65 = (tmpvar_59.w * tmpvar_64);
  atten_3 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_2 * _Albedo);
  light_2 = tmpvar_68;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  tmpvar_65 = (tmpvar_59.w * tmpvar_64);
  atten_3 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_2 * _Albedo);
  light_2 = tmpvar_68;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 435
#line 461
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 443
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 448
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 435
#line 461
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 452
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 456
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 461
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 465
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 469
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 473
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 477
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 481
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 485
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 489
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 493
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_21;
  tmpvar_21 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_22;
  tmpvar_22 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_23;
  if ((tmpvar_22 < tmpvar_21)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * tmpvar_23)), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_65);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * _Albedo);
  light_2 = tmpvar_69;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_65);
  atten_3 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_2 * _Albedo);
  light_2 = tmpvar_69;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 436
#line 462
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 444
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 449
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 436
#line 462
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 453
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 457
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 462
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 466
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 470
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 474
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 478
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 482
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 486
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 490
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 494
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_21;
  vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_21.x = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_21.y = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_21.z = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_21.w = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_21, tmpvar_22.zzzz);
  vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 11 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedagfmeiefoamligifhjimnanpaflifkdnabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaafaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_66;
  P_66 = (tmpvar_65.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_64.x = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_65.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_64.y = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_65.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_64.z = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_65.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_64.w = tmpvar_73;
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_64, tmpvar_65.zzzz);
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_63 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_2 * _Albedo);
  light_2 = tmpvar_85;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_66;
  P_66 = (tmpvar_65.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_64.x = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_65.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_64.y = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_65.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_64.z = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_65.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_64.w = tmpvar_73;
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_64, tmpvar_65.zzzz);
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_63 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_3 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_2 * _Albedo);
  light_2 = tmpvar_85;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 445
#line 471
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 445
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 483
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 487
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 491
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 495
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 499
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 503
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 shadows_17;
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_17.x = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[0].xyz)).x;
  shadows_17.y = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[1].xyz)).x;
  shadows_17.z = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[2].xyz)).x;
  shadows_17.w = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_19;
  tmpvar_19 = (_LightShadowData.xxxx + (shadows_17 * (1.0 - _LightShadowData.xxxx)));
  shadows_17 = tmpvar_19;
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_19, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 11 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedagfmeiefoamligifhjimnanpaflifkdnabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaafaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_64;
  coord_64 = (tmpvar_63 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_65;
  tmpvar_65 = shadow2DEXT (_ShadowMapTexture, coord_64);
  shadows_62.x = tmpvar_65;
  highp vec3 coord_66;
  coord_66 = (tmpvar_63 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_67;
  tmpvar_67 = shadow2DEXT (_ShadowMapTexture, coord_66);
  shadows_62.y = tmpvar_67;
  highp vec3 coord_68;
  coord_68 = (tmpvar_63 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_69;
  tmpvar_69 = shadow2DEXT (_ShadowMapTexture, coord_68);
  shadows_62.z = tmpvar_69;
  highp vec3 coord_70;
  coord_70 = (tmpvar_63 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_71;
  tmpvar_71 = shadow2DEXT (_ShadowMapTexture, coord_70);
  shadows_62.w = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (_LightShadowData.xxxx + (shadows_62 * (1.0 - _LightShadowData.xxxx)));
  shadows_62 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  atten_3 = tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_76;
  tmpvar_76 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_75)), 0.0, 1.0);
  light_2 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (light_2 * _Albedo);
  light_2 = tmpvar_77;
  color_18.xyz = ((color_18 * _Color).xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 445
#line 471
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 445
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 483
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 487
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 491
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 495
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 499
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 503
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_20;
  shadowVals_20.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_21;
  tmpvar_21 = lessThan (shadowVals_20, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_22;
  tmpvar_22 = _LightShadowData.xxxx;
  float tmpvar_23;
  if (tmpvar_21.x) {
    tmpvar_23 = tmpvar_22.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  if (tmpvar_21.y) {
    tmpvar_24 = tmpvar_22.y;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_21.z) {
    tmpvar_25 = tmpvar_22.z;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_21.w) {
    tmpvar_26 = tmpvar_22.w;
  } else {
    tmpvar_26 = 1.0;
  };
  vec4 tmpvar_27;
  tmpvar_27.x = tmpvar_23;
  tmpvar_27.y = tmpvar_24;
  tmpvar_27.z = tmpvar_25;
  tmpvar_27.w = tmpvar_26;
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec4 shadowVals_62;
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_62.x = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_62.y = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_62.z = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_62.w = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_62, vec4(tmpvar_63));
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_61 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (tmpvar_59.w * tmpvar_60);
  atten_3 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * _Albedo);
  light_2 = tmpvar_87;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec4 shadowVals_62;
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_62.x = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_62.y = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_62.z = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_62.w = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_62, vec4(tmpvar_63));
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_61 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (tmpvar_59.w * tmpvar_60);
  atten_3 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * _Albedo);
  light_2 = tmpvar_87;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 441
#line 467
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 449
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 454
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 441
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 479
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 483
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 487
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 491
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 495
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 499
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_21;
  shadowVals_21.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_21, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  color_2.xyz = (tmpvar_17.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 10 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_61);
  atten_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (color_18 * _Color);
  color_18 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_61);
  atten_3 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_18.xyz = (tmpvar_54.xyz * light_2);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 442
#line 468
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 450
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 455
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 442
#line 468
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 459
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 463
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 468
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 472
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 476
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 480
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 484
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 488
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 492
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 496
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    #line 500
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbnejkobfienlflhlnfekjfpkfafbillmabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, vec2(tmpvar_85)).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * _Albedo);
  light_2 = tmpvar_89;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, vec2(tmpvar_85)).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * _Albedo);
  light_2 = tmpvar_89;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 433
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 470
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 478
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 482
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 486
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 490
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 494
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 498
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 502
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_23) * 4.0), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.w, c9.x
mov r1.xyz, v2
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 24 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecediapopkioojboekpkcodldfhijppeeonoabaaaaaapiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefchmadaaaaeaaaabaa
npaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
giaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaacaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaabaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * _Albedo);
  light_2 = tmpvar_87;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * _Albedo);
  light_2 = tmpvar_87;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 422
#line 435
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 430
    o.color = v.color;
    o.normal = v.normal;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 422
#line 435
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 439
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 443
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    #line 448
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 452
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 456
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 460
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 464
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 468
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 472
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 476
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 480
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 484
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 488
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 492
    light *= _Albedo;
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 496
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddkkcfibbnbjalfnbjmkbdechcjifglglabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  highp float tmpvar_90;
  tmpvar_90 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w);
  atten_3 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (light_2 * _Albedo);
  light_2 = tmpvar_93;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  highp float tmpvar_90;
  tmpvar_90 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w);
  atten_3 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (light_2 * _Albedo);
  light_2 = tmpvar_93;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 459
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 442
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 446
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 459
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 450
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 454
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 459
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 463
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 467
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 471
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 475
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 479
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 483
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 487
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 491
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 495
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 499
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 503
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 507
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 511
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbnejkobfienlflhlnfekjfpkfafbillmabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTextureB0, vec2(tmpvar_85)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * _Albedo);
  light_2 = tmpvar_89;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTextureB0, vec2(tmpvar_85)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * _Albedo);
  light_2 = tmpvar_89;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 451
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 434
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 438
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 451
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 442
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 446
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 455
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 459
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 463
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 467
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 471
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 475
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 479
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 483
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 487
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 491
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 495
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 499
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 503
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 28 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhjipbhblkaekfkmmkahbafmhfflocoababaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaaaaaaaaaaacaaaaaa
dcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 433
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 470
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 478
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 482
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 486
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 490
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 494
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 498
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 502
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_27;
  if ((tmpvar_26.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * tmpvar_27);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiljiffimpneejaodciihkilfjlcljhiabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 467
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 449
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 454
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 479
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 483
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 487
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 495
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 499
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 507
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 511
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 515
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 519
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiljiffimpneejaodciihkilfjlcljhiabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp float tmpvar_92;
  tmpvar_92 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (_LightShadowData.x + (shadow_91 * (1.0 - _LightShadowData.x)));
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 468
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 450
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 455
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 468
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 459
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 463
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 468
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 472
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 476
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 480
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 484
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 488
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 496
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 500
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 508
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 512
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 516
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 520
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24.x), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24.x), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o5.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c11.y
mov o0, r0
mul r1.y, r1, c9.x
mad o4.xy, r1.z, c10.zwzw, r1
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mov o4.zw, r0
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 29 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbpldilioogkeboomelohjemheclncdjabaaaaaakiafaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcbeaeaaaaeaaaabaaafabaaaafjaaaaae
egiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
abaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaa
acaaaaaaegbobaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaa
akiacaaaaaaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaa
kgaobaaaaaaaaaaaaaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaabaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  mediump float lightShadowDataX_86;
  highp float dist_87;
  lowp float tmpvar_88;
  tmpvar_88 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = _LightShadowData.x;
  lightShadowDataX_86 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = max (float((dist_87 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_86);
  tmpvar_85 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (light_2 * _Albedo);
  light_2 = tmpvar_93;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85.x), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85.x), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 431
#line 456
#line 431
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 435
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 439
    o.color = v.color;
    o.normal = v.normal;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 443
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 431
#line 456
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 447
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 451
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 460
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 464
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 468
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 472
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 476
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 480
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 484
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 488
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 492
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 496
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 500
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 504
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 508
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_4;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 33 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o6.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c15.y
mov o0, r0
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
add r1.xyz, -r1, c12
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mov o5.zw, r0
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 37 instructions, 3 temp regs, 0 temp arrays:
// ALU 32 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbaeaopojimeogpjbddfpghkemabekmjabaaaaaaamahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgaafaaaaeaaaabaafiabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaa
acaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaa
egaabaaaabaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaa
pgapbaaaabaaaaaaegaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaa
aeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  mediump float lightShadowDataX_86;
  highp float dist_87;
  lowp float tmpvar_88;
  tmpvar_88 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = _LightShadowData.x;
  lightShadowDataX_86 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = max (float((dist_87 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_86);
  tmpvar_85 = tmpvar_90;
  lowp float tmpvar_91;
  tmpvar_91 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_85);
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_91), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (light_2 * _Albedo);
  light_2 = tmpvar_94;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_91), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 460
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 442
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 447
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 460
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 451
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 455
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 464
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 468
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 472
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 476
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 480
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 484
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 488
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 492
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 496
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 500
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 504
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 508
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 512
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_26;
  tmpvar_26 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_27;
  if ((tmpvar_26 < tmpvar_25)) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (tmpvar_24.w * tmpvar_27);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * _Albedo);
  light_2 = tmpvar_96;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * _Albedo);
  light_2 = tmpvar_96;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 465
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 447
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 452
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 465
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 456
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 460
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 477
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 481
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 489
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 493
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 497
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 501
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 505
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 509
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 513
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 517
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_26;
  tmpvar_26 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_27;
  tmpvar_27 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_28;
  if ((tmpvar_27 < tmpvar_26)) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  tmpvar_29 = ((tmpvar_24.w * tmpvar_25.w) * tmpvar_28);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_29), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_29), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 466
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 448
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 453
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 466
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 461
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 466
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 470
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 474
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 478
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 482
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 486
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 490
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 494
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 498
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 502
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 506
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 510
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 514
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 518
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_26;
  vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_26.x = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_26.y = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_26.z = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_26.w = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_26, tmpvar_27.zzzz);
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  float tmpvar_35;
  tmpvar_35 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_35), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_35), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedagfmeiefoamligifhjimnanpaflifkdnabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaafaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (light_2 * _Albedo);
  light_2 = tmpvar_113;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (light_2 * _Albedo);
  light_2 = tmpvar_113;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 457
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 462
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 470
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 487
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 491
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 495
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 507
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 511
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 515
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 519
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 523
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 527
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 shadows_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_24.x = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[0].xyz)).x;
  shadows_24.y = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[1].xyz)).x;
  shadows_24.z = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[2].xyz)).x;
  shadows_24.w = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_26;
  tmpvar_26 = (_LightShadowData.xxxx + (shadows_24 * (1.0 - _LightShadowData.xxxx)));
  shadows_24 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_26, vec4(0.25, 0.25, 0.25, 0.25)));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedagfmeiefoamligifhjimnanpaflifkdnabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaafaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_93;
  coord_93 = (tmpvar_92 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_94;
  tmpvar_94 = shadow2DEXT (_ShadowMapTexture, coord_93);
  shadows_91.x = tmpvar_94;
  highp vec3 coord_95;
  coord_95 = (tmpvar_92 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_96;
  tmpvar_96 = shadow2DEXT (_ShadowMapTexture, coord_95);
  shadows_91.y = tmpvar_96;
  highp vec3 coord_97;
  coord_97 = (tmpvar_92 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_98;
  tmpvar_98 = shadow2DEXT (_ShadowMapTexture, coord_97);
  shadows_91.z = tmpvar_98;
  highp vec3 coord_99;
  coord_99 = (tmpvar_92 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_100;
  tmpvar_100 = shadow2DEXT (_ShadowMapTexture, coord_99);
  shadows_91.w = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (_LightShadowData.xxxx + (shadows_91 * (1.0 - _LightShadowData.xxxx)));
  shadows_91 = tmpvar_101;
  mediump float tmpvar_102;
  tmpvar_102 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_2 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (light_2 * _Albedo);
  light_2 = tmpvar_106;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 457
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 462
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 470
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 487
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 491
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 495
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 507
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 511
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 515
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 519
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 523
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 527
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_25;
  shadowVals_25.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_25, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (tmpvar_24.w * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_33), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_3 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (light_2 * _Albedo);
  light_2 = tmpvar_115;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_3 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (light_2 * _Albedo);
  light_2 = tmpvar_115;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 471
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 483
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 487
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 491
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 495
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 499
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 503
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 507
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 511
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 515
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 519
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 523
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_26;
  shadowVals_26.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_26, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  float tmpvar_34;
  tmpvar_34 = ((tmpvar_24.w * tmpvar_25.w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_34), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_34), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * _Albedo);
  light_2 = tmpvar_116;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * _Albedo);
  light_2 = tmpvar_116;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 472
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 454
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 459
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 472
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 467
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 472
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 476
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 480
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 484
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 488
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 492
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 496
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 500
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 504
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 508
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 512
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 516
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 520
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 524
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbnejkobfienlflhlnfekjfpkfafbillmabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, vec2(tmpvar_85)).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * _Albedo);
  light_2 = tmpvar_89;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, vec2(tmpvar_85)).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * _Albedo);
  light_2 = tmpvar_89;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 433
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 470
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 478
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 482
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 486
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 490
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 494
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 498
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 502
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_23) * 4.0), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 25 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.w, c9.x
mov r1.xyz, v2
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c8
dp3 r0.x, r0, r0
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 24 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecediapopkioojboekpkcodldfhijppeeonoabaaaaaapiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefchmadaaaaeaaaabaa
npaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
giaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaa
dgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaacaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaabaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaag
hccabaaaaeaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * _Albedo);
  light_2 = tmpvar_87;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (((_LightColor0.w * NdotL_3) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_2 * _Albedo);
  light_2 = tmpvar_87;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 422
#line 435
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 430
    o.color = v.color;
    o.normal = v.normal;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 422
#line 435
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 439
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 443
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    #line 448
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 452
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 456
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 460
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 464
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 468
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 472
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 476
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    #line 480
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    #line 484
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 488
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 492
    light *= _Albedo;
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    #line 496
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddkkcfibbnbjalfnbjmkbdechcjifglglabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  highp float tmpvar_90;
  tmpvar_90 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w);
  atten_3 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (light_2 * _Albedo);
  light_2 = tmpvar_93;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  highp float tmpvar_90;
  tmpvar_90 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w);
  atten_3 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (light_2 * _Albedo);
  light_2 = tmpvar_93;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 459
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 442
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 446
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 459
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 450
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 454
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 459
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 463
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 467
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 471
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 475
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 479
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 483
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 487
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 491
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 495
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 499
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 503
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 507
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 511
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbnejkobfienlflhlnfekjfpkfafbillmabaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTextureB0, vec2(tmpvar_85)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * _Albedo);
  light_2 = tmpvar_89;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTextureB0, vec2(tmpvar_85)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_2 * _Albedo);
  light_2 = tmpvar_89;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_86), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 451
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 434
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 438
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 451
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 442
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 446
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 455
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 459
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 463
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 467
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 471
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 475
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 479
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 483
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 487
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 491
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 495
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 499
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 503
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 28 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c13.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 32 instructions, 2 temp regs, 0 temp arrays:
// ALU 29 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhjipbhblkaekfkmmkahbafmhfflocoababaaaaaafmagaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcmiaeaaaaeaaaabaadcabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaa
dgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaa
egbobaaaabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaaaaaaaaaaacaaaaaa
dcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 433
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 462
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 466
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 470
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 478
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 482
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 486
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 490
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 494
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 498
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 502
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_26;
  tmpvar_26 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_27;
  if ((tmpvar_26.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * tmpvar_27);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiljiffimpneejaodciihkilfjlcljhiabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 467
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 449
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 454
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 467
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 458
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 462
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 467
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 471
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 475
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 479
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 483
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 487
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 495
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 499
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 507
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 511
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 515
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 519
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiljiffimpneejaodciihkilfjlcljhiabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp float tmpvar_92;
  tmpvar_92 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (_LightShadowData.x + (shadow_91 * (1.0 - _LightShadowData.x)));
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 468
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 450
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 455
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 468
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 459
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 463
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 468
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 472
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 476
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 480
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 484
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 488
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 496
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 500
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 504
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 508
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 512
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 516
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 520
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24.x), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24.x), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c11.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o5.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c11.y
mov o0, r0
mul r1.y, r1, c9.x
mad o4.xy, r1.z, c10.zwzw, r1
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mov o4.zw, r0
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o6.xyz, -r0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 29 instructions, 2 temp regs, 0 temp arrays:
// ALU 24 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbpldilioogkeboomelohjemheclncdjabaaaaaakiafaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcbeaeaaaaeaaaabaaafabaaaafjaaaaae
egiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
abaaaaaadgaaaaafoccabaaaabaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaa
acaaaaaaegbobaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaa
akiacaaaaaaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaaadaaaaaa
kgaobaaaaaaaaaaaaaaaaaahdccabaaaadaaaaaakgakbaaaabaaaaaamgaabaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaabaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  mediump float lightShadowDataX_86;
  highp float dist_87;
  lowp float tmpvar_88;
  tmpvar_88 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = _LightShadowData.x;
  lightShadowDataX_86 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = max (float((dist_87 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_86);
  tmpvar_85 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_2 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (light_2 * _Albedo);
  light_2 = tmpvar_93;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp vec4 tmpvar_85;
  tmpvar_85 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85.x), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85.x), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 431
#line 456
#line 431
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 435
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 439
    o.color = v.color;
    o.normal = v.normal;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 443
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 431
#line 456
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 447
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 451
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 460
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 464
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 468
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 472
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 476
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 480
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 484
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 488
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 492
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 496
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 500
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 504
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 508
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_4;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  float tmpvar_24;
  tmpvar_24 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_24), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_24), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 33 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c15.x
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o6.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c15.y
mov o0, r0
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
add r1.xyz, -r1, c12
dp3 r0.x, r1, r1
rsq r0.x, r0.x
mov o5.zw, r0
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 37 instructions, 3 temp regs, 0 temp arrays:
// ALU 32 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbbaeaopojimeogpjbddfpghkemabekmjabaaaaaaamahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgaafaaaaeaaaabaafiabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaabaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaa
acaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaa
egaabaaaabaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaa
pgapbaaaabaaaaaaegaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaafmccabaaa
aeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaaeaaaaaakgakbaaaabaaaaaa
mgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  mediump float lightShadowDataX_86;
  highp float dist_87;
  lowp float tmpvar_88;
  tmpvar_88 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = _LightShadowData.x;
  lightShadowDataX_86 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = max (float((dist_87 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_86);
  tmpvar_85 = tmpvar_90;
  lowp float tmpvar_91;
  tmpvar_91 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_85);
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_91), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_2 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (light_2 * _Albedo);
  light_2 = tmpvar_94;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_91), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec4 o_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_8;
  tmpvar_8.x = tmpvar_7.x;
  tmpvar_8.y = (tmpvar_7.y * _ProjectionParams.x);
  o_6.xy = (tmpvar_8 + tmpvar_7.w);
  o_6.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_6;
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump vec4 citylightoverlaydetailZ_9;
  mediump vec4 citylightoverlaydetailY_10;
  mediump vec4 citylightoverlaydetailX_11;
  mediump vec4 citydarkoverlaydetailZ_12;
  mediump vec4 citydarkoverlaydetailY_13;
  mediump vec4 citydarkoverlaydetailX_14;
  mediump vec4 cityoverlay_15;
  mediump float vertLerp_16;
  mediump vec2 detailvertnrmxy_17;
  mediump vec2 detailvertnrmzx_18;
  mediump vec2 detailvertnrmzy_19;
  mediump vec2 detailnrmxy_20;
  mediump vec2 detailnrmzx_21;
  mediump vec2 detailnrmzy_22;
  mediump vec4 main_23;
  highp vec2 uv_24;
  mediump vec4 color_25;
  highp float r_26;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_26));
  uv_24.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_30;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_31;
    y_over_x_31 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_32;
    highp float x_33;
    x_33 = (y_over_x_31 * inversesqrt(((y_over_x_31 * y_over_x_31) + 1.0)));
    s_32 = (sign(x_33) * (1.5708 - (sqrt((1.0 - abs(x_33))) * (1.5708 + (abs(x_33) * (-0.214602 + (abs(x_33) * (0.0865667 + (abs(x_33) * -0.0310296)))))))));
    r_30 = s_32;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_30 = (s_32 + 3.14159);
      } else {
        r_30 = (r_30 - 3.14159);
      };
    };
  } else {
    r_30 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_34;
  tmpvar_34 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2DGradEXT (_MainTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  main_23 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_22 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_21 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_20 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_19 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_18 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_17 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_16 = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmzy_19);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmzy_22);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_16));
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailVertTex, detailvertnrmzx_18);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailTex, detailnrmzx_21);
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (tmpvar_49, tmpvar_50, vec4(vertLerp_16));
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailVertTex, detailvertnrmxy_17);
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailTex, detailnrmxy_20);
  mediump vec4 tmpvar_54;
  tmpvar_54 = mix (tmpvar_52, tmpvar_53, vec4(vertLerp_16));
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DGradEXT (_CityOverlayTex, uv_24, tmpvar_37.xy, tmpvar_37.zw);
  cityoverlay_15 = tmpvar_55;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_56 = texture2D (_CityDarkOverlayDetailTex, P_57);
  citydarkoverlaydetailX_14 = tmpvar_56;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailY_13 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailZ_12 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityLightOverlayDetailTex, P_63);
  citylightoverlaydetailX_11 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailY_10 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailZ_9 = tmpvar_66;
  highp vec3 tmpvar_68;
  tmpvar_68 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_69;
  tmpvar_69 = mix (tmpvar_54, tmpvar_48, tmpvar_68.xxxx);
  detail_8 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (detail_8, tmpvar_51, tmpvar_68.yyyy);
  detail_8 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_73;
  tmpvar_73 = ((main_23 * tmpvar_72) * xlv_TEXCOORD1);
  color_25 = tmpvar_73;
  highp float tmpvar_74;
  tmpvar_74 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_15.w = (cityoverlay_15.w * tmpvar_74);
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_12, citydarkoverlaydetailX_14, tmpvar_68.xxxx);
  detail_8 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_8, citydarkoverlaydetailY_13, tmpvar_68.yyyy);
  detail_8 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_15 * detail_8);
  citydarkoverlay_6.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_9, citylightoverlaydetailX_11, tmpvar_68.xxxx);
  detail_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_8, citylightoverlaydetailY_10, tmpvar_68.yyyy);
  detail_8 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_15 * detail_8);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_25, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_25.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (dot (xlv_TEXCOORD5, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_84;
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * NdotL_3) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_2 * _Albedo);
  light_2 = tmpvar_88;
  color_25.xyz = (tmpvar_81.xyz * light_2);
  citydarkoverlay_6.w = (tmpvar_77.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_3 - 0.01)) / 0.99) * 4.0) * tmpvar_85), 0.0, 1.0), 0.0, 1.0)));
  color_25.xyz = mix (color_25, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_25.w = 1.0;
  tmpvar_1 = color_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 460
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 442
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 447
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 460
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 451
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 455
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 464
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 468
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 472
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 476
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 480
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 484
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 488
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 492
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 496
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 500
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 504
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 508
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 512
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_26;
  tmpvar_26 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_27;
  if ((tmpvar_26 < tmpvar_25)) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = (tmpvar_24.w * tmpvar_27);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_28), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_28), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * _Albedo);
  light_2 = tmpvar_96;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_3 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_2 * _Albedo);
  light_2 = tmpvar_96;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 465
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 447
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 452
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 465
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 456
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 460
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 465
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 469
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 473
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 477
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 481
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 485
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 489
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 493
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 497
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 501
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 505
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 509
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 513
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 517
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_26;
  tmpvar_26 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_27;
  tmpvar_27 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_28;
  if ((tmpvar_27 < tmpvar_26)) {
    tmpvar_28 = _LightShadowData.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  tmpvar_29 = ((tmpvar_24.w * tmpvar_25.w) * tmpvar_28);
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_29), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_29), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_3 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_2 * _Albedo);
  light_2 = tmpvar_97;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 466
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 448
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 453
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 466
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 457
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 461
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 466
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 470
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 474
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 478
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 482
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 486
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 490
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 494
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 498
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 502
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 506
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 510
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 514
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 518
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_26;
  vec3 tmpvar_27;
  tmpvar_27 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_26.x = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_26.y = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_26.z = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_26.w = texture2D (_ShadowMapTexture, (tmpvar_27.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_26, tmpvar_27.zzzz);
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  float tmpvar_35;
  tmpvar_35 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_24.w) * tmpvar_25.w) * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_35), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_35), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedagfmeiefoamligifhjimnanpaflifkdnabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaafaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (light_2 * _Albedo);
  light_2 = tmpvar_113;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_2 = tmpvar_112;
  highp vec3 tmpvar_113;
  tmpvar_113 = (light_2 * _Albedo);
  light_2 = tmpvar_113;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 457
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 462
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 470
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 487
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 491
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 495
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 507
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 511
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 515
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 519
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 523
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 527
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4.w = tmpvar_22.w;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 shadows_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_24.x = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[0].xyz)).x;
  shadows_24.y = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[1].xyz)).x;
  shadows_24.z = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[2].xyz)).x;
  shadows_24.w = shadow2D (_ShadowMapTexture, (tmpvar_25 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_26;
  tmpvar_26 = (_LightShadowData.xxxx + (shadows_24 * (1.0 - _LightShadowData.xxxx)));
  shadows_24 = tmpvar_26;
  float tmpvar_27;
  tmpvar_27 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_26, vec4(0.25, 0.25, 0.25, 0.25)));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c17.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
add r1.xyz, -r0, c16
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.x, r0.x
dp3 r0.y, v3, v3
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v3
mov o2, v1
mov o3.xyz, v2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 224 // 144 used size, 12 vars
Matrix 80 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedagfmeiefoamligifhjimnanpaflifkdnabaaaaaaciahaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefchmafaaaaeaaaabaafpabaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
amaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaaabaaaaaa
agbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaafaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaacaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
aiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaacaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaaeaaaaaaegiocaaaacaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_93;
  coord_93 = (tmpvar_92 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_94;
  tmpvar_94 = shadow2DEXT (_ShadowMapTexture, coord_93);
  shadows_91.x = tmpvar_94;
  highp vec3 coord_95;
  coord_95 = (tmpvar_92 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_96;
  tmpvar_96 = shadow2DEXT (_ShadowMapTexture, coord_95);
  shadows_91.y = tmpvar_96;
  highp vec3 coord_97;
  coord_97 = (tmpvar_92 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_98;
  tmpvar_98 = shadow2DEXT (_ShadowMapTexture, coord_97);
  shadows_91.z = tmpvar_98;
  highp vec3 coord_99;
  coord_99 = (tmpvar_92 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_100;
  tmpvar_100 = shadow2DEXT (_ShadowMapTexture, coord_99);
  shadows_91.w = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (_LightShadowData.xxxx + (shadows_91 * (1.0 - _LightShadowData.xxxx)));
  shadows_91 = tmpvar_101;
  mediump float tmpvar_102;
  tmpvar_102 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_3 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_2 = tmpvar_105;
  highp vec3 tmpvar_106;
  tmpvar_106 = (light_2 * _Albedo);
  light_2 = tmpvar_106;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 457
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 462
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 437
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 475
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 466
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 470
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 479
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 483
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 487
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 491
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 495
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 503
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 507
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 511
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 515
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 519
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 523
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 527
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_25;
  shadowVals_25.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_25, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (tmpvar_24.w * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_33), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_3 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (light_2 * _Albedo);
  light_2 = tmpvar_115;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_3 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_2 = tmpvar_114;
  highp vec3 tmpvar_115;
  tmpvar_115 = (light_2 * _Albedo);
  light_2 = tmpvar_115;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 471
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 453
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 458
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 471
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 462
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 466
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 471
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 475
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 479
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 483
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 487
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 491
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 495
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 499
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 503
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 507
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 511
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 515
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 519
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 523
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec3 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = gl_Normal;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD6 = -(normalize(TANGENT));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_18.xyz;
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  cityoverlay_2.w = (tmpvar_18.w * clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0));
  vec4 tmpvar_20;
  tmpvar_20 = (cityoverlay_2 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (cityoverlay_2 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix (((texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_4 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0);
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_25;
  tmpvar_25 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_26;
  shadowVals_26.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_26.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_26, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  float tmpvar_34;
  tmpvar_34 = ((tmpvar_24.w * tmpvar_25.w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)));
  color_4.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_23) * 4.0) * tmpvar_34), 0.0, 1.0))), 0.0, 1.0) * _Albedo));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_23 - 0.01)) / 0.99) * 4.0) * tmpvar_34), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r1.xyz, v2
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o6.xyz, r0.w, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c12
dp3 r1.x, r1, r1
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
rsq r0.w, r1.x
dp3 r1.x, v3, v3
rcp o1.x, r0.w
rsq r0.w, r1.x
mul r1.xyz, r0.w, v3
mov o2, v1
mov o3.xyz, v2
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 160 // 80 used size, 11 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 33 instructions, 2 temp regs, 0 temp arrays:
// ALU 30 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojekdmflnnflpgalalimefklajhndahmabaaaaaaleagaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcaiafaaaaeaaaabaaecabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadgaaaaafoccabaaa
abaaaaaaagbjbaaaacaaaaaadgaaaaafpccabaaaacaaaaaaegbobaaaabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * _Albedo);
  light_2 = tmpvar_116;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_1;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD6 = -(normalize(tmpvar_2.xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  lowp float atten_3;
  mediump float NdotL_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = clamp (floor((xlv_TEXCOORD1.w + 0.99)), 0.0, 1.0);
  cityoverlay_16.w = (cityoverlay_16.w * tmpvar_75);
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_26, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_26 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = clamp (dot (xlv_TEXCOORD5, lightDirection_5), 0.0, 1.0);
  NdotL_4 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_3 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * NdotL_4) * 4.0) * atten_3), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_2 = tmpvar_115;
  highp vec3 tmpvar_116;
  tmpvar_116 = (light_2 * _Albedo);
  light_2 = tmpvar_116;
  color_26.xyz = (tmpvar_82.xyz * light_2);
  citydarkoverlay_7.w = (tmpvar_78.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * atten_3), 0.0, 1.0), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 472
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    o.sphereNormal = (-normalize(v.tangent));
    #line 454
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 459
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 434
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 472
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 463
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 467
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 472
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 476
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 480
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 484
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 488
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 492
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 496
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 500
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    cityoverlay.w *= xll_saturate_f(floor((IN.color.w + 0.99)));
    #line 504
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    #line 508
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 512
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 516
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    light *= _Albedo;
    color.xyz *= light;
    #line 520
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 524
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 102 to 149, TEX: 9 to 24
//   d3d11 - ALU: 75 to 118, TEX: 6 to 18, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 104 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dp4 r0.w, c1, c1
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r2.xyz, r1, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, c1
dp3_sat r0.y, v4, r1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r1.xyz, r0, r0.w, c0
mul r0.xyz, r2, v1
mul_pp r1.xyz, r1, c8.x
mul_pp r0.xyz, r0, c3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 0
// 88 instructions, 6 temp regs, 0 temp arrays:
// ALU 73 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjcngklclilepmmimhllpalicaokmfalnabaaaaaahmanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceeamaaaaeaaaaaaabbadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
abaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c13.z
mad_sat r3.w, r0, c13, c13.y
mul r2.xy, v4, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r0.w, v4.z
abs r2.xy, v4
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c11.y, c11.z
mad r2.w, r2, r2.z, c11
mad r2.w, r2, r2.z, c12.x
mad r2.w, r2, r2.z, c12.y
mad r2.z, r2.w, r2, c12
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v4.zxzw, c5.x
mul r3.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v4.xyxy
add_pp r1.xyz, -r0, c9.y
add r2.z, -r2.y, c12.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c10.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c10.w
cmp r0.x, v4.z, r1.w, r2
cmp r0.x, v4, r0, -r0
mad r3.x, r0, c13, c13.y
mad r0.x, r0.w, c9.z, c9.w
mad r0.x, r0.w, r0, c10
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c9
mad r0.x, r0.w, r0, c10.y
abs r0.w, v4.y
add r2.w, -r0, c9.y
mad r1.w, r0, c9.z, c9
mad r1.w, r1, r0, c10.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v4.z, c9, c9.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c10, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c10.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v4.y, c9.x, c9.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c10.z, r1.w
mad r0.z, r0.x, c10.w, r0
mad r0.x, r0.w, c10.w, r0.y
mul r0.y, r0.z, c11.x
dsx r0.w, r0.y
mul r3.y, r0.x, c11.x
dsx r0.xz, v4.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c13.x
mul r0.x, r1.w, c13
dsy r0.y, r0
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
dp3_sat r0.w, v3, r2
mul_pp r1.x, r0.w, c2.w
mul r0.xyz, r0, v1
mul_pp_sat r1.w, r1.x, c14.x
mov r0.w, c7.x
add r1.xyz, c2, r0.w
mad_sat r1.xyz, r1, r1.w, c0
mul_pp r1.xyz, r1, c8.x
mul_pp r0.xyz, r0, c3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 96 // 84 used size, 9 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_DetailScale]
Float 68 [_DetailVertScale]
Float 72 [_DetailDist]
Float 76 [_MinLight]
Float 80 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 85 instructions, 6 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddboepdolmalmglmknocpdkiaffnkgpjkabaaaaaaoaamaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaakeaaaaaa
afaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaagaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmaalaaaa
eaaaaaaapaacaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaa
abaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaaeaaaaaa
akbabaiaibaaaaaaaeaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaaeaaaaaafgbgbaiaebaaaaaaaeaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
aeaaaaaaakbabaaaaeaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaaeaaaaaa
akbabaaaaeaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
aeaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
aeaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaaeaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaaeaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
aeaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaaeaaaaaaagiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaaeaaaaaaagifcaaaaaaaaaaaaeaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
aeaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaaeaaaaaafgifcaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaaeaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaaeaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaapgipcaaaaaaaaaaa
aeaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
agiacaaaaaaaaaaaafaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 109 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dp4 r0.w, c1, c1
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r2.xyz, r1, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, c1
dp3_sat r0.y, v4, r0
rcp r0.w, v3.w
mad r1.xy, v3, r0.w, c13.y
texld r0.w, r1, s3
dp3 r0.x, v3, v3
cmp r0.z, -v3, c9.x, c9.y
mul r1.xyz, r2, v1
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 0
SetTexture 4 [_LightTextureB0] 2D 1
// 95 instructions, 6 temp regs, 0 temp arrays:
// ALU 78 float, 0 int, 5 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednodnikkgbjdfijpgaceingccggciflgjabaaaaaahaaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdianaaaaeaaaaaaaeoadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaak
bcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
aaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaia
ibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaa
fgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaafaaaaaa
apaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaafaaaaaa
apaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidn
aaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlo
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaa
fgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadp
elaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaa
agambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaa
aaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaa
kgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaa
acaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaa
aceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
ogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaa
pgbpbaaaadaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaadaaaaaaaagabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
abeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaa
dkaabaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaah
bcaabaaaabaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 105 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
dp3 r0.x, v3, v3
mul r1.xyz, r1, v1
dp3_sat r0.y, v4, r2
texld r0.w, v3, s4
texld r0.x, r0.x, s3
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTextureB0] 2D 1
SetTexture 4 [_LightTexture0] CUBE 0
// 90 instructions, 6 temp regs, 0 temp arrays:
// ALU 74 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgcaonhljjljjeigneofhhoighhbkpekbabaaaaaanianaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckaamaaaaeaaaaaaaciadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaak
bcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
aaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaia
ibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaa
fgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaafaaaaaa
apaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaafaaaaaa
apaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidn
aaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlo
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaa
fgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadp
elaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaa
agambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaa
aaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaa
kgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaa
acaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaa
aceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
ogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbcbaaaadaaaaaaeghobaaaaeaaaaaaaagabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaaaaaaaaaa
ajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 103 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_sat r1.x, v4, r2
mul r0.xyz, r0, v1
texld r0.w, v3, s3
mul_pp r1.x, r1, c2.w
mul_pp r1.x, r1, r0.w
mul_pp_sat r1.w, r1.x, c14.x
mov r0.w, c7.x
add r1.xyz, c2, r0.w
mad_sat r1.xyz, r1, r1.w, c0
mul_pp r1.xyz, r1, c8.x
mul_pp r0.xyz, r0, c3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 0
// 87 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjcfodfabfgnpfffibnlmcmnmhnjliekhabaaaaaagaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcciamaaaaeaaaaaaaakadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
abaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaadaaaaaaeghobaaaadaaaaaa
aagabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 114 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c6.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c7
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
abs r1.w, v6.y
add r1.y, -r0.w, c10
mad r1.x, r0.w, c10.z, c10.w
mad r1.x, r0.w, r1, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c11.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c11.z, r1.x
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c11.z, r2
mad r1.y, r0.w, c11.w, r1
mad r0.w, r1, c11, r1.x
mul r1.x, r1.y, c12
mul r1.w, r0, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.x, r0.w, c14
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c14
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
mul r1.xyz, r1, v1
dp3_sat r0.y, v5, r2
texldp r0.x, v4, s5
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
cmp r1.w, r0.z, c10.y, r0
rcp r0.x, v3.w
mad r2.xy, v3, r0.x, c14.y
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c9.x
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 100 instructions, 6 temp regs, 0 temp arrays:
// ALU 81 float, 0 int, 5 uint
// TEX 9 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedklebfbmeadgmgledcjddldlfeljindflabaaaaaagaapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcbaaoaaaaeaaaaaaaieadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
agaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahhcaabaaaabaaaaaa
egbcbaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaacaaaaaackaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 113 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c6.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c7
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r0.z, r1.w, c14.x, c14.y
abs r1.w, v6.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v6
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0, c14
rsq r1.w, r1.w
rcp r0.x, r1.w
dp4 r1.w, c1, c1
rsq r1.w, r1.w
dsy r0.y, r0
mul r0.x, r0, c14
texldd r0.xyz, r0.zwzw, s0, r2, r0
mul_pp r1.xyz, r0, r1
mul r2.xyz, r1.w, c1
mov r0.x, c2
add r0.w, c10.y, -r0.x
texldp r0.x, v4, s5
mad r1.w, r0.x, r0, c2.x
dp3 r0.x, v3, v3
mul r1.xyz, r1, v1
dp3_sat r0.y, v5, r2
rcp r0.z, v3.w
mad r2.xy, v3, r0.z, c14.y
texld r0.w, r2, s3
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c9.x
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 100 instructions, 6 temp regs, 0 temp arrays:
// ALU 82 float, 0 int, 5 uint
// TEX 8 (0 load, 1 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedagdaladppdbkhboobkpppjnenfampggfabaaaaaahaapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccaaoaaaaeaaaaaaaiiadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
agaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahhcaabaaaabaaaaaa
egbcbaaaaeaaaaaapgbpbaaaaeaaaaaaehaaaaalbcaabaaaabaaaaaaegaabaaa
abaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaackaabaaaabaaaaaaaaaaaaaj
ccaabaaaabaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
acaaaaaabiaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 103 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_sat r0.y, v4, r2
mul r1.xyz, r1, v1
texldp r0.x, v3, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] 2D 0
// 88 instructions, 6 temp regs, 0 temp arrays:
// ALU 73 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbabbnikbekhihjkpbfimfockledcafcbabaaaaaahmanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceeamaaaaeaaaaaaabbadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
abaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 104 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v6.zyzw, c5.x
mul r1.xy, v6.zyzw, c4.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c5.x
mul r0.xy, v6, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c5.x
mul r0.xy, v6.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v6.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
mul r1.xyz, r1, v1
dp3_sat r0.y, v5, r2
texldp r0.x, v4, s3
texld r0.w, v3, s4
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 212 used size, 11 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] 2D 0
// 90 instructions, 6 temp regs, 0 temp arrays:
// ALU 74 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpgpkeoadpfjmnkimiimihaoooneelhooabaaaaaapmanaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapalaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckmamaaaaeaaaaaaacladaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaaddcbabaaa
adaaaaaagcbaaaadlcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaaagaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaagaaaaaa
akbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
agaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
agaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
agaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
agaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaagaaaaaafgifcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
ajaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaeaaaaaapgbpbaaaaeaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaadaaaaaa
aagabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaa
acaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaanaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 113 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c15.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c13.y, c13.z
mad r3.w, r3, r2, c13
mad r3.w, r3, r2, c14.x
mad r3.w, r3, r2, c14.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c15.w, c15.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c14.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c15, c15.y
abs r1.w, v6.y
add r1.z, -r0.w, c11.y
mad r1.y, r0.w, c11.z, c11.w
mad r1.y, r0.w, r1, c12.x
add r2.y, -r1.w, c11
mad r2.x, r1.w, c11.z, c11.w
mad r2.x, r2, r1.w, c12
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c12.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c11.x, c11.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c12, r1.y
mad r1.z, r0.w, c12.w, r1
mad r1.w, r2.x, r1, c12.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c11.x, c11.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c12.z, r2.x
mad r0.w, r1, c12, r1.y
mul r1.z, r1, c13.x
dsx r1.w, r1.z
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
mul r1.y, r0.w, c13.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r1.z, r0.w, c15.x
mul r2.x, r2, c15
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r1.xyz, r1, r0
dp3 r0.w, v4, v4
rsq r1.w, r0.w
texld r0, v4, s3
dp4 r0.y, r0, c16
rcp r1.w, r1.w
mul r0.x, r1.w, c2.w
mad r0.y, -r0.x, c17.x, r0
dp4 r0.x, c1, c1
rsq r0.x, r0.x
mul r2.xyz, r0.x, c1
mov r0.z, c3.x
cmp r0.z, r0.y, c11.y, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul r1.xyz, r1, v1
mul r0.z, r0.x, r0
dp3_sat r0.y, v5, r2
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c17.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c10.x
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
// 97 instructions, 6 temp regs, 0 temp arrays:
// ALU 80 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkhppcahmgimnjppmbiedhhoboiojbcdlabaaaaaaoeaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjeanaaaaeaaaaaaagfadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaaabaaaaaaegbcbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaabaaaaaaegaobaaa
abaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaaaaaaaaaaadhaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaa
abaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaa
abaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
dkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaa
aaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 114 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c15.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c13.y, c13.z
mad r3.w, r3, r2, c13
mad r3.w, r3, r2, c14.x
mad r3.w, r3, r2, c14.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c15.w, c15.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c14.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c15, c15.y
abs r1.w, v6.y
add r1.z, -r0.w, c11.y
mad r1.y, r0.w, c11.z, c11.w
mad r1.y, r0.w, r1, c12.x
add r2.y, -r1.w, c11
mad r2.x, r1.w, c11.z, c11.w
mad r2.x, r2, r1.w, c12
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c12.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c11.x, c11.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c12, r1.y
mad r1.z, r0.w, c12.w, r1
mad r1.w, r2.x, r1, c12.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c11.x, c11.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c12.z, r2.x
mad r0.w, r1, c12, r1.y
mul r1.z, r1, c13.x
dsx r1.w, r1.z
mul r1.y, r0.w, c13.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
rcp r0.w, r0.w
mul r1.z, r0.w, c15.x
mul r2.x, r2, c15
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r1.xyz, r1, r0
texld r0, v4, s3
dp4 r0.z, r0, c16
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r0.y, r1.w
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mul r1.xyz, r1, v1
mad r0.w, -r0.y, c17.x, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_sat r0.y, v5, r0
mov r1.w, c3.x
cmp r1.w, r0, c11.y, r1
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c17.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c10.x
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
// 99 instructions, 6 temp regs, 0 temp arrays:
// ALU 81 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjmemhhmcfnkholkokpbmbpkocaodjpknabaaaaaaeaapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpaanaaaaeaaaaaaahmadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fidaaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaomfbhidpefaaaaajpcaabaaaabaaaaaaegbcbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaabaaaaaaegaobaaaabaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaaaaaaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaahbcaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
agaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegbcbaaaadaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c19, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c18.z
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c16.y, c16.z
mad r3.w, r3, r2, c16
mad r3.w, r3, r2, c17.x
mad r3.w, r3, r2, c17.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c18.w, c18.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c17.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c17.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c15.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c11
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c14.y
mul_sat r2.x, r2, c15.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c18, c18.y
abs r1.w, v6.y
add r1.z, -r0.w, c14.y
mad r1.y, r0.w, c14.z, c14.w
mad r1.y, r0.w, r1, c15.x
add r2.y, -r1.w, c14
mad r2.x, r1.w, c14.z, c14.w
mad r2.x, r2, r1.w, c15
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c15.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c14.x, c14.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c15, r1.y
mad r1.z, r0.w, c15.w, r1
mad r1.w, r2.x, r1, c15.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c14.x, c14.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c15.z, r2.x
mad r0.w, r1, c15, r1.y
mul r1.z, r1, c16.x
dsx r1.w, r1.z
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
mul r1.y, r0.w, c16.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r1.z, r0.w, c18.x
mul r2.x, r2, c18
texldd r1.xyz, r1, s0, r1.zwzw, r2
rcp r0.w, v4.w
mul_pp r2.xyz, r1, r0
mad r0.xy, v4, r0.w, c6
mad r1.xy, v4, r0.w, c5
texld r0.x, r0, s5
texld r1.x, r1, s5
mov r1.z, r1.x
mad r1.xy, v4, r0.w, c3
mov r1.w, r0.x
mad r0.xy, v4, r0.w, c4
texld r1.x, r1, s5
texld r0.x, r0, s5
mov r1.y, r0.x
mad r0, -v4.z, r0.w, r1
mov r1.y, c2.x
cmp r0, r0, c14.y, r1.y
dp4_pp r0.y, r0, c19.x
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_sat r0.z, v5, r1
rcp r0.x, v3.w
mad r1.xy, v3, r0.x, c18.y
texld r0.w, r1, s3
cmp r1.x, -v3.z, c14, c14.y
mul_pp r0.w, r1.x, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r0.z, c7.w
mul_pp r0.y, r0.x, r0
mul r1.xyz, r2, v1
mul_pp_sat r0.w, r0.y, c19.y
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c13.x
mul_pp r1.xyz, r1, c8
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c14.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 224 // 212 used size, 11 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 111 instructions, 6 temp regs, 0 temp arrays:
// ALU 86 float, 0 int, 5 uint
// TEX 12 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcpdiaoakbhfpaelmoomnebfnbnnllhdgabaaaaaalmbaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcgmapaaaaeaaaaaaanladaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaaaoaaaaah
hcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaaabaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaaaaaaaaai
dcaabaaaadaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaa
dgaaaaafccaabaaaacaaaaaaakaabaaaadaaaaaaaaaaaaaidcaabaaaadaaaaaa
egaabaaaabaaaaaaegiacaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaadgaaaaafecaabaaa
acaaaaaaakaabaaaadaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
egiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaa
eghobaaaafaaaaaaaagabaaaaaaaaaaadgaaaaaficaabaaaacaaaaaaakaabaaa
adaaaaaadbaaaaahpcaabaaaabaaaaaaegaobaaaacaaaaaakgakbaaaabaaaaaa
dhaaaaanpcaabaaaabaaaaaaegaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaaaaaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadbaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaabaaaaaahccaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaa
fgafbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
ajaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaanaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c19, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c18.z
mad_sat r2.w, r0, c18, c18.y
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
dsy r4.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v6, c10.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c16.y, c16.z
mad r3.w, r3, r3.z, c16
mad r3.w, r3, r3.z, c17.x
mul r0.xy, v6, c9.x
mad r3.w, r3, r3.z, c17.y
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r1.x, r3.w, r3.z, c17.z
mul r1.y, r1.x, r1.w
abs r2.w, v6.y
add r1.x, r3, -r0.w
add r1.z, -r1.y, c17.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c15.w
add r3.y, -r2.w, c14
mad r3.x, r2.w, c14.z, c14.w
mad r3.x, r3, r2.w, c15
rsq r3.y, r3.y
add_pp r1.xyz, -r0, c14.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c11.x
mul_sat r2.x, r2.y, c15.z
mad_pp r2.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
add r1.z, -r0.w, c14.y
mad r1.y, r0.w, c14.z, c14.w
mad r1.y, r0.w, r1, c15.x
rsq r1.z, r1.z
rcp r1.w, v4.w
mad r1.x, r0, c18, c18.y
mad r0.xyz, v4, r1.w, c6
mad r0.w, r0, r1.y, c15.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c14.x, c14.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c15, r1.y
mad r1.z, r0.w, c15.w, r1
mul r1.z, r1, c16.x
mad r2.w, r3.x, r2, c15.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v6.y, c14.x, c14.y
mul r3.y, r2.w, r3.x
mad r1.y, -r3, c15.z, r3.x
mad r0.w, r2, c15, r1.y
dsx r3.xz, v6.xyyw
mul r4.zw, r3.xyxz, r3.xyxz
mul r1.y, r0.w, c16.x
add r0.w, r4.z, r4
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r3.w, r1.z
dsy r3.y, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r0.w, c18.x
texld r0.x, r0, s5
mov_pp r0.w, r0.x
mad r0.xyz, v4, r1.w, c5
texld r0.x, r0, s5
mul r3.x, r1.z, c18
texldd r1.xyz, r1, s0, r3.zwzw, r3
mul_pp r2.xyz, r1, r2
mad r1.xyz, v4, r1.w, c4
texld r1.x, r1, s5
mov_pp r0.y, r1.x
mad r1.xyz, v4, r1.w, c3
mov_pp r0.z, r0.x
texld r0.x, r1, s5
mov r1.w, c2.x
add r1.y, c14, -r1.w
mad r0, r0, r1.y, c2.x
dp4_pp r0.y, r0, c19.x
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_sat r0.z, v5, r1
rcp r0.x, v3.w
mad r1.xy, v3, r0.x, c18.y
texld r0.w, r1, s3
cmp r1.x, -v3.z, c14, c14.y
mul_pp r0.w, r1.x, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r0.z, c7.w
mul_pp r0.y, r0.x, r0
mul r1.xyz, r2, v1
mul_pp_sat r0.w, r0.y, c19.y
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c13.x
mul_pp r1.xyz, r1, c8
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c14.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 224 // 212 used size, 11 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 108 instructions, 6 temp regs, 0 temp arrays:
// ALU 87 float, 0 int, 5 uint
// TEX 8 (0 load, 4 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkeodnkeeaooigchndbkhgfjmocepdiphabaaaaaajmbaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcemapaaaaeaaaaaaandadaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaaaaaaaaaj
icaabaaaaaaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadp
aoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaehaaaaal
bcaabaaaacaaaaaaegaabaaaacaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaa
ckaabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaaehaaaaalccaabaaaacaaaaaaegaabaaaadaaaaaaaghabaaa
afaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaaeaaaaaaehaaaaalicaabaaaacaaaaaa
egaabaaaabaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaackaabaaaabaaaaaa
ehaaaaalecaabaaaacaaaaaaegaabaaaadaaaaaaaghabaaaafaaaaaaaagabaaa
aaaaaaaackaabaaaadaaaaaadcaaaaakpcaabaaaabaaaaaaegaobaaaacaaaaaa
pgapbaaaaaaaaaaaagiacaaaacaaaaaabiaaaaaabbaaaaakicaabaaaaaaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadbaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaabaaaaaahccaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaa
fgafbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
ajaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaanaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 121 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.z, v2, -r2
add r2.w, r2.z, c15.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
mul r3.xy, v6, c6.x
abs r0.w, v6.z
abs r2.xy, v6
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r2.z, r1.w, r2
mul r1.w, r2.z, r2.z
mad_sat r2.w, r2, c15, c15.y
texld r3.xyz, r3, s2
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r2.w, r1, r0
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
add r3.yzw, r3.xxyz, -r1.xxyz
mad r1.xyz, r2.w, r3.yzww, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mad r3.x, r1.w, c13.y, c13.z
mad r3.x, r3, r1.w, c13.w
mad r3.x, r3, r1.w, c14
mad r3.w, r3.x, r1, c14.y
mad r1.w, r3, r1, c14.z
mul r2.z, r1.w, r2
mul r1.xy, v6.zxzw, c7.x
mul r3.xy, v6.zxzw, c6.x
add r1.w, r2.x, -r0
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r2.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
add r2.w, -r2.z, c14
cmp r1.w, -r1, r2.z, r2
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
dsy r3.zw, v6.xyxy
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r2.xyz, r2.x, r1, r0
abs r1.z, v6.y
mad r3.x, r1.w, c15, c15.y
add r1.y, -r0.w, c11
mad r1.x, r0.w, c11.z, c11.w
mad r1.x, r0.w, r1, c12
add r2.w, -r1.z, c11.y
mad r1.w, r1.z, c11.z, c11
mad r1.w, r1, r1.z, c12.x
rsq r1.y, r1.y
rsq r2.w, r2.w
mad r0.w, r0, r1.x, c12.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c11.x, c11.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c12.z, r1.x
mad r1.z, r1.w, r1, c12.y
rcp r2.w, r2.w
mul r1.w, r1.z, r2
cmp r1.z, v6.y, c11.x, c11.y
mul r2.w, r1.z, r1
mad r1.x, -r2.w, c12.z, r1.w
mad r1.y, r0.w, c12.w, r1
mad r0.w, r1.z, c12, r1.x
mul r1.x, r1.y, c13
mul r3.y, r0.w, c13.x
dsx r1.w, r1.x
dsy r1.y, r1.x
dsx r1.xz, v6.xyyw
mul r1.xz, r1, r1
add r0.w, r1.x, r1.z
mul r3.zw, r3, r3
add r1.x, r3.z, r3.w
rsq r0.w, r0.w
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.z, r0.w, c15.x
add r0.xyz, v4, c16.xyyw
texld r0, r0, s3
dp4 r0.w, r0, c17
mul r1.x, r1, c15
texldd r1.xyz, r3, s0, r1.zwzw, r1
mul_pp r1.xyz, r1, r2
add r2.xyz, v4, c16.yxyw
mul r1.xyz, r1, v1
add r0.xyz, v4, c16.yyxw
texld r3, r2, s3
texld r2, r0, s3
dp4 r0.y, r2, c17
dp3 r0.x, v4, v4
rsq r0.x, r0.x
rcp r1.w, r0.x
add r2.xyz, v4, c16.x
texld r2, r2, s3
dp4 r0.x, r2, c17
mul r1.w, r1, c2
dp4 r0.z, r3, c17
mad r0, -r1.w, c16.z, r0
mov r2.x, c3
cmp r0, r0, c11.y, r2.x
dp4_pp r0.z, r0, c16.w
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r2.xyz, r1.w, c1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0
dp3_sat r0.y, v5, r2
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c18.x
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c10.x
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
// 108 instructions, 6 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 4 uint
// TEX 11 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfcdijhdhlcifdlgdgmaaimjgcenfidndabaaaaaajmbaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcemapaaaaeaaaaaaandadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaomfbhidpaaaaaaakhcaabaaaabaaaaaaegbcbaaaaeaaaaaa
aceaaaaaaaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egacbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaa
abaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
aaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaalm
aaaaaadmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaabaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaa
egbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaa
bbaaaaakecaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaa
aaaaaadmaaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaa
acaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaabaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaah
pcaabaaaabaaaaaaegaobaaaabaaaaaapgapbaaaaaaaaaaadhaaaaanpcaabaaa
abaaaaaaegaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaaaaaaaaaaegaobaaaabaaaaaa
aceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahbcaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaa
abaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.z, v2, -r2
add r2.w, r2.z, c15.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
mul r3.xy, v6, c6.x
abs r0.w, v6.z
abs r2.xy, v6
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r2.z, r1.w, r2
mul r1.w, r2.z, r2.z
mad_sat r2.w, r2, c15, c15.y
texld r3.xyz, r3, s2
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r2.w, r1, r0
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
add r3.yzw, r3.xxyz, -r1.xxyz
mad r1.xyz, r2.w, r3.yzww, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mad r3.x, r1.w, c13.y, c13.z
mad r3.x, r3, r1.w, c13.w
mad r3.x, r3, r1.w, c14
mad r3.w, r3.x, r1, c14.y
mad r1.w, r3, r1, c14.z
mul r2.z, r1.w, r2
mul r1.xy, v6.zxzw, c7.x
mul r3.xy, v6.zxzw, c6.x
add r1.w, r2.x, -r0
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r2.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
add r2.w, -r2.z, c14
cmp r1.w, -r1, r2.z, r2
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
dsy r3.zw, v6.xyxy
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r2.xyz, r2.x, r1, r0
abs r1.z, v6.y
mad r3.x, r1.w, c15, c15.y
add r1.y, -r0.w, c11
mad r1.x, r0.w, c11.z, c11.w
mad r1.x, r0.w, r1, c12
add r2.w, -r1.z, c11.y
mad r1.w, r1.z, c11.z, c11
mad r1.w, r1, r1.z, c12.x
rsq r1.y, r1.y
rsq r2.w, r2.w
mad r0.w, r0, r1.x, c12.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c11.x, c11.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c12.z, r1.x
mad r1.z, r1.w, r1, c12.y
rcp r2.w, r2.w
mul r1.w, r1.z, r2
cmp r1.z, v6.y, c11.x, c11.y
mul r2.w, r1.z, r1
mad r1.x, -r2.w, c12.z, r1.w
mad r1.y, r0.w, c12.w, r1
mad r0.w, r1.z, c12, r1.x
mul r1.x, r1.y, c13
mul r3.y, r0.w, c13.x
dsx r1.w, r1.x
dsy r1.y, r1.x
dsx r1.xz, v6.xyyw
mul r1.xz, r1, r1
add r0.w, r1.x, r1.z
mul r3.zw, r3, r3
add r1.x, r3.z, r3.w
rsq r0.w, r0.w
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.z, r0.w, c15.x
add r0.xyz, v4, c16.xyyw
texld r0, r0, s3
dp4 r0.w, r0, c17
mul r1.x, r1, c15
texldd r1.xyz, r3, s0, r1.zwzw, r1
mul_pp r1.xyz, r1, r2
add r2.xyz, v4, c16.yxyw
mul r1.xyz, r1, v1
add r0.xyz, v4, c16.yyxw
texld r3, r2, s3
texld r2, r0, s3
dp4 r0.y, r2, c17
dp3 r0.x, v4, v4
rsq r0.x, r0.x
rcp r1.w, r0.x
add r2.xyz, v4, c16.x
texld r2, r2, s3
dp4 r0.x, r2, c17
mul r1.w, r1, c2
dp4 r0.z, r3, c17
mad r0, -r1.w, c16.z, r0
dp4 r1.w, c1, c1
mov r2.x, c3
cmp r2, r0, c11.y, r2.x
rsq r1.w, r1.w
mul r0.xyz, r1.w, c1
dp3_sat r0.y, v5, r0
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
dp4_pp r1.w, r2, c16.w
mul r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c18.x
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c10.x
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
// 110 instructions, 6 temp regs, 0 temp arrays:
// ALU 89 float, 0 int, 4 uint
// TEX 12 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedikjehfamkfcdcpmhihgdpmilgjlbniimabaaaaaapibaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckiapaaaaeaaaaaaaokadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fidaaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaomfbhidpaaaaaaakhcaabaaaabaaaaaaegbcbaaaaeaaaaaaaceaaaaa
aaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaabaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaak
hcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaalmaaaaaadm
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaafaaaaaa
aagabaaaaaaaaaaabbaaaaakccaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaa
aeaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegacbaaaacaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaak
ecaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadm
aaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaa
eghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaabaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahpcaabaaa
abaaaaaaegaobaaaabaaaaaapgapbaaaaaaaaaaadhaaaaanpcaabaaaabaaaaaa
egaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpbbaaaaakicaabaaaaaaaaaaaegaobaaaabaaaaaaaceaaaaa
aaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahbcaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaa
adaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaaaaaaaaaa
ajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 104 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dp4 r0.w, c1, c1
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r2.xyz, r1, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, c1
dp3_sat r0.y, v4, r1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r1.xyz, r0, r0.w, c0
mul r0.xyz, r2, v1
mul_pp r1.xyz, r1, c8.x
mul_pp r0.xyz, r0, c3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 0
// 88 instructions, 6 temp regs, 0 temp arrays:
// ALU 73 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjcngklclilepmmimhllpalicaokmfalnabaaaaaahmanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceeamaaaaeaaaaaaabbadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
abaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c13.z
mad_sat r3.w, r0, c13, c13.y
mul r2.xy, v4, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r0.w, v4.z
abs r2.xy, v4
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c11.y, c11.z
mad r2.w, r2, r2.z, c11
mad r2.w, r2, r2.z, c12.x
mad r2.w, r2, r2.z, c12.y
mad r2.z, r2.w, r2, c12
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v4.zxzw, c5.x
mul r3.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v4.xyxy
add_pp r1.xyz, -r0, c9.y
add r2.z, -r2.y, c12.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c10.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c10.w
cmp r0.x, v4.z, r1.w, r2
cmp r0.x, v4, r0, -r0
mad r3.x, r0, c13, c13.y
mad r0.x, r0.w, c9.z, c9.w
mad r0.x, r0.w, r0, c10
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c9
mad r0.x, r0.w, r0, c10.y
abs r0.w, v4.y
add r2.w, -r0, c9.y
mad r1.w, r0, c9.z, c9
mad r1.w, r1, r0, c10.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v4.z, c9, c9.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c10, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c10.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v4.y, c9.x, c9.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c10.z, r1.w
mad r0.z, r0.x, c10.w, r0
mad r0.x, r0.w, c10.w, r0.y
mul r0.y, r0.z, c11.x
dsx r0.w, r0.y
mul r3.y, r0.x, c11.x
dsx r0.xz, v4.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c13.x
mul r0.x, r1.w, c13
dsy r0.y, r0
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
dp3_sat r0.w, v3, r2
mul_pp r1.x, r0.w, c2.w
mul r0.xyz, r0, v1
mul_pp_sat r1.w, r1.x, c14.x
mov r0.w, c7.x
add r1.xyz, c2, r0.w
mad_sat r1.xyz, r1, r1.w, c0
mul_pp r1.xyz, r1, c8.x
mul_pp r0.xyz, r0, c3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 96 // 84 used size, 9 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_DetailScale]
Float 68 [_DetailVertScale]
Float 72 [_DetailDist]
Float 76 [_MinLight]
Float 80 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 85 instructions, 6 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddboepdolmalmglmknocpdkiaffnkgpjkabaaaaaaoaamaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaakeaaaaaa
afaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaagaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmaalaaaa
eaaaaaaapaacaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaa
abaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaaeaaaaaa
akbabaiaibaaaaaaaeaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaaeaaaaaafgbgbaiaebaaaaaaaeaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
aeaaaaaaakbabaaaaeaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaaeaaaaaa
akbabaaaaeaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
aeaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
aeaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaaeaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaaeaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
aeaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaaeaaaaaaagiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaaeaaaaaaagifcaaaaaaaaaaaaeaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
aeaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaaeaaaaaafgifcaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaaeaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaaeaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaapgipcaaaaaaaaaaa
aeaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
agiacaaaaaaaaaaaafaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 109 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dp4 r0.w, c1, c1
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r2.xyz, r1, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, c1
dp3_sat r0.y, v4, r0
rcp r0.w, v3.w
mad r1.xy, v3, r0.w, c13.y
texld r0.w, r1, s3
dp3 r0.x, v3, v3
cmp r0.z, -v3, c9.x, c9.y
mul r1.xyz, r2, v1
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 0
SetTexture 4 [_LightTextureB0] 2D 1
// 95 instructions, 6 temp regs, 0 temp arrays:
// ALU 78 float, 0 int, 5 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednodnikkgbjdfijpgaceingccggciflgjabaaaaaahaaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdianaaaaeaaaaaaaeoadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadpcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaak
bcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
aaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaia
ibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaa
fgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaafaaaaaa
apaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaafaaaaaa
apaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidn
aaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlo
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaa
fgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadp
elaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaa
agambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaa
aaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaa
kgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaa
acaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaa
aceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
ogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaa
pgbpbaaaadaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaaaceaaaaa
aaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaadaaaaaaaagabaaaaaaaaaaadbaaaaahicaabaaaaaaaaaaa
abeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaa
dkaabaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaah
bcaabaaaabaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 105 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
dp3 r0.x, v3, v3
mul r1.xyz, r1, v1
dp3_sat r0.y, v4, r2
texld r0.w, v3, s4
texld r0.x, r0.x, s3
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTextureB0] 2D 1
SetTexture 4 [_LightTexture0] CUBE 0
// 90 instructions, 6 temp regs, 0 temp arrays:
// ALU 74 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgcaonhljjljjeigneofhhoighhbkpekbabaaaaaanianaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckaamaaaaeaaaaaaaciadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaa
aaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaak
bcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
aaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaia
ibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaa
fgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaafaaaaaa
apaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaafaaaaaa
apaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidn
aaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaa
fgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlo
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaa
fgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadp
elaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaa
agambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaa
aaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaa
kgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaa
acaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaa
aceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaan
pcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
ogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaaabaaaaaa
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaaj
pcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbcbaaaadaaaaaaeghobaaaaeaaaaaaaagabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaaaaaaaaaa
ajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 103 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_sat r1.x, v4, r2
mul r0.xyz, r0, v1
texld r0.w, v3, s3
mul_pp r1.x, r1, c2.w
mul_pp r1.x, r1, r0.w
mul_pp_sat r1.w, r1.x, c14.x
mov r0.w, c7.x
add r1.xyz, c2, r0.w
mad_sat r1.xyz, r1, r1.w, c0
mul_pp r1.xyz, r1, c8.x
mul_pp r0.xyz, r0, c3
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 0
// 87 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjcfodfabfgnpfffibnlmcmnmhnjliekhabaaaaaagaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcciamaaaaeaaaaaaaakadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
abaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaadaaaaaaeghobaaaadaaaaaa
aagabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 114 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c6.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c7
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
abs r1.w, v6.y
add r1.y, -r0.w, c10
mad r1.x, r0.w, c10.z, c10.w
mad r1.x, r0.w, r1, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c11.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c10.x, c10.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c11.z, r1.x
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c11.z, r2
mad r1.y, r0.w, c11.w, r1
mad r0.w, r1, c11, r1.x
mul r1.x, r1.y, c12
mul r1.w, r0, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.x, r0.w, c14
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c14
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
mul r1.xyz, r1, v1
dp3_sat r0.y, v5, r2
texldp r0.x, v4, s5
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
cmp r1.w, r0.z, c10.y, r0
rcp r0.x, v3.w
mad r2.xy, v3, r0.x, c14.y
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c9.x
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 100 instructions, 6 temp regs, 0 temp arrays:
// ALU 81 float, 0 int, 5 uint
// TEX 9 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedklebfbmeadgmgledcjddldlfeljindflabaaaaaagaapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcbaaoaaaaeaaaaaaaieadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
agaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahhcaabaaaabaaaaaa
egbcbaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaacaaaaaackaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaaakaabaaa
abaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 113 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c6.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c7
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r0.z, r1.w, c14.x, c14.y
abs r1.w, v6.y
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.y, r0.y
rsq r2.y, r2.y
mad r0.x, r0.w, r0, c11.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.y, -r2, c11.z, r2.x
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r2.y, r0
mul r0.w, r0.x, c12.x
mul r2.zw, r2, r2
add r0.x, r2.z, r2.w
dsy r3.xy, v6
mul r2.zw, r3.xyxy, r3.xyxy
add r1.w, r2.z, r2
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.x, r0, c14
rsq r1.w, r1.w
rcp r0.x, r1.w
dp4 r1.w, c1, c1
rsq r1.w, r1.w
dsy r0.y, r0
mul r0.x, r0, c14
texldd r0.xyz, r0.zwzw, s0, r2, r0
mul_pp r1.xyz, r0, r1
mul r2.xyz, r1.w, c1
mov r0.x, c2
add r0.w, c10.y, -r0.x
texldp r0.x, v4, s5
mad r1.w, r0.x, r0, c2.x
dp3 r0.x, v3, v3
mul r1.xyz, r1, v1
dp3_sat r0.y, v5, r2
rcp r0.z, v3.w
mad r2.xy, v3, r0.z, c14.y
texld r0.w, r2, s3
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.x
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c9.x
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 100 instructions, 6 temp regs, 0 temp arrays:
// ALU 82 float, 0 int, 5 uint
// TEX 8 (0 load, 1 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedagdaladppdbkhboobkpppjnenfampggfabaaaaaahaapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccaaoaaaaeaaaaaaaiiadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadbaaaaahicaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
agaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahhcaabaaaabaaaaaa
egbcbaaaaeaaaaaapgbpbaaaaeaaaaaaehaaaaalbcaabaaaabaaaaaaegaabaaa
abaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaackaabaaaabaaaaaaaaaaaaaj
ccaabaaaabaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaa
acaaaaaabiaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 103 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v5.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_sat r0.y, v4, r2
mul r1.xyz, r1, v1
texldp r0.x, v3, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] 2D 0
// 88 instructions, 6 temp regs, 0 temp arrays:
// ALU 73 float, 0 int, 4 uint
// TEX 7 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbabbnikbekhihjkpbfimfockledcafcbabaaaaaahmanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefceeamaaaaeaaaaaaabbadaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadlcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaafaaaaaafgbgbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
afaaaaaaakbabaaaafaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaafaaaaaa
akbabaaaafaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
afaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
abaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaafaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
afaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaafaaaaaafgifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaafaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 104 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v6.zyzw, c5.x
mul r1.xy, v6.zyzw, c4.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c5.x
mul r0.xy, v6, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c5.x
mul r0.xy, v6.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v6.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
dsx r2.y, r1.x
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
mul r1.xyz, r1, v1
dp3_sat r0.y, v5, r2
texldp r0.x, v4, s3
texld r0.w, v3, s4
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.x
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 212 used size, 11 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] 2D 0
// 90 instructions, 6 temp regs, 0 temp arrays:
// ALU 74 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpgpkeoadpfjmnkimiimihaoooneelhooabaaaaaapmanaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapalaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckmamaaaaeaaaaaaacladaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaaddcbabaaa
adaaaaaagcbaaaadlcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaaagaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaagaaaaaa
akbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
agaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
agaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
agaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
agaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaagaaaaaafgifcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
ajaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaaeaaaaaapgbpbaaaaeaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaadaaaaaa
aagabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaa
acaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaanaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 113 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c15.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c13.y, c13.z
mad r3.w, r3, r2, c13
mad r3.w, r3, r2, c14.x
mad r3.w, r3, r2, c14.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c15.w, c15.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c14.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c15, c15.y
abs r1.w, v6.y
add r1.z, -r0.w, c11.y
mad r1.y, r0.w, c11.z, c11.w
mad r1.y, r0.w, r1, c12.x
add r2.y, -r1.w, c11
mad r2.x, r1.w, c11.z, c11.w
mad r2.x, r2, r1.w, c12
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c12.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c11.x, c11.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c12, r1.y
mad r1.z, r0.w, c12.w, r1
mad r1.w, r2.x, r1, c12.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c11.x, c11.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c12.z, r2.x
mad r0.w, r1, c12, r1.y
mul r1.z, r1, c13.x
dsx r1.w, r1.z
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
mul r1.y, r0.w, c13.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r1.z, r0.w, c15.x
mul r2.x, r2, c15
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r1.xyz, r1, r0
dp3 r0.w, v4, v4
rsq r1.w, r0.w
texld r0, v4, s3
dp4 r0.y, r0, c16
rcp r1.w, r1.w
mul r0.x, r1.w, c2.w
mad r0.y, -r0.x, c17.x, r0
dp4 r0.x, c1, c1
rsq r0.x, r0.x
mul r2.xyz, r0.x, c1
mov r0.z, c3.x
cmp r0.z, r0.y, c11.y, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul r1.xyz, r1, v1
mul r0.z, r0.x, r0
dp3_sat r0.y, v5, r2
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c17.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c10.x
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
// 97 instructions, 6 temp regs, 0 temp arrays:
// ALU 80 float, 0 int, 4 uint
// TEX 8 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkhppcahmgimnjppmbiedhhoboiojbcdlabaaaaaaoeaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjeanaaaaeaaaaaaagfadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaomfbhidpefaaaaajpcaabaaaabaaaaaaegbcbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaabaaaaaaegaobaaa
abaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaaaaaaaaaaadhaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaa
abaaaaaaagaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaa
abaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaa
abaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
dkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaa
aaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 114 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.97000003, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c15.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c13.y, c13.z
mad r3.w, r3, r2, c13
mad r3.w, r3, r2, c14.x
mad r3.w, r3, r2, c14.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c15.w, c15.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c14.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c15, c15.y
abs r1.w, v6.y
add r1.z, -r0.w, c11.y
mad r1.y, r0.w, c11.z, c11.w
mad r1.y, r0.w, r1, c12.x
add r2.y, -r1.w, c11
mad r2.x, r1.w, c11.z, c11.w
mad r2.x, r2, r1.w, c12
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c12.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c11.x, c11.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c12, r1.y
mad r1.z, r0.w, c12.w, r1
mad r1.w, r2.x, r1, c12.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c11.x, c11.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c12.z, r2.x
mad r0.w, r1, c12, r1.y
mul r1.z, r1, c13.x
dsx r1.w, r1.z
mul r1.y, r0.w, c13.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
rcp r0.w, r0.w
mul r1.z, r0.w, c15.x
mul r2.x, r2, c15
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r1.xyz, r1, r0
texld r0, v4, s3
dp4 r0.z, r0, c16
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r0.y, r1.w
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mul r1.xyz, r1, v1
mad r0.w, -r0.y, c17.x, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_sat r0.y, v5, r0
mov r1.w, c3.x
cmp r1.w, r0, c11.y, r1
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c17.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c10.x
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
// 99 instructions, 6 temp regs, 0 temp arrays:
// ALU 81 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjmemhhmcfnkholkokpbmbpkocaodjpknabaaaaaaeaapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpaanaaaaeaaaaaaahmadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fidaaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaomfbhidpefaaaaajpcaabaaaabaaaaaaegbcbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaabaaaaaaegaobaaaabaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaaaaaaaaaaadhaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaahbcaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
agaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegbcbaaaadaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaa
egacbaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aaaaaaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c19, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c18.z
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c16.y, c16.z
mad r3.w, r3, r2, c16
mad r3.w, r3, r2, c17.x
mad r3.w, r3, r2, c17.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c18.w, c18.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c17.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c17.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c15.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c11
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c14.y
mul_sat r2.x, r2, c15.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c18, c18.y
abs r1.w, v6.y
add r1.z, -r0.w, c14.y
mad r1.y, r0.w, c14.z, c14.w
mad r1.y, r0.w, r1, c15.x
add r2.y, -r1.w, c14
mad r2.x, r1.w, c14.z, c14.w
mad r2.x, r2, r1.w, c15
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c15.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c14.x, c14.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c15, r1.y
mad r1.z, r0.w, c15.w, r1
mad r1.w, r2.x, r1, c15.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c14.x, c14.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c15.z, r2.x
mad r0.w, r1, c15, r1.y
mul r1.z, r1, c16.x
dsx r1.w, r1.z
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
mul r1.y, r0.w, c16.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r1.z, r0.w, c18.x
mul r2.x, r2, c18
texldd r1.xyz, r1, s0, r1.zwzw, r2
rcp r0.w, v4.w
mul_pp r2.xyz, r1, r0
mad r0.xy, v4, r0.w, c6
mad r1.xy, v4, r0.w, c5
texld r0.x, r0, s5
texld r1.x, r1, s5
mov r1.z, r1.x
mad r1.xy, v4, r0.w, c3
mov r1.w, r0.x
mad r0.xy, v4, r0.w, c4
texld r1.x, r1, s5
texld r0.x, r0, s5
mov r1.y, r0.x
mad r0, -v4.z, r0.w, r1
mov r1.y, c2.x
cmp r0, r0, c14.y, r1.y
dp4_pp r0.y, r0, c19.x
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_sat r0.z, v5, r1
rcp r0.x, v3.w
mad r1.xy, v3, r0.x, c18.y
texld r0.w, r1, s3
cmp r1.x, -v3.z, c14, c14.y
mul_pp r0.w, r1.x, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r0.z, c7.w
mul_pp r0.y, r0.x, r0
mul r1.xyz, r2, v1
mul_pp_sat r0.w, r0.y, c19.y
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c13.x
mul_pp r1.xyz, r1, c8
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c14.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 224 // 212 used size, 11 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 111 instructions, 6 temp regs, 0 temp arrays:
// ALU 86 float, 0 int, 5 uint
// TEX 12 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcpdiaoakbhfpaelmoomnebfnbnnllhdgabaaaaaalmbaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcgmapaaaaeaaaaaaanladaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaaaoaaaaah
hcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaaabaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaaaaaaaaai
dcaabaaaadaaaaaaegaabaaaabaaaaaaegiacaaaaaaaaaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaa
dgaaaaafccaabaaaacaaaaaaakaabaaaadaaaaaaaaaaaaaidcaabaaaadaaaaaa
egaabaaaabaaaaaaegiacaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaadgaaaaafecaabaaa
acaaaaaaakaabaaaadaaaaaaaaaaaaaidcaabaaaabaaaaaaegaabaaaabaaaaaa
egiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaa
eghobaaaafaaaaaaaagabaaaaaaaaaaadgaaaaaficaabaaaacaaaaaaakaabaaa
adaaaaaadbaaaaahpcaabaaaabaaaaaaegaobaaaacaaaaaakgakbaaaabaaaaaa
dhaaaaanpcaabaaaabaaaaaaegaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaaaaaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadbaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaabaaaaaahccaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaa
fgafbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
ajaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaanaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c19, 0.25000000, 4.00000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c18.z
mad_sat r2.w, r0, c18, c18.y
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
dsy r4.xy, v6
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r2.xyz, r2.w, r1, r0
mul r1.xy, v6, c10.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
min r0.x, r3, r0.w
rcp r0.y, r1.w
mul r1.w, r0.x, r0.y
mul r3.z, r1.w, r1.w
mad r3.w, r3.z, c16.y, c16.z
mad r3.w, r3, r3.z, c16
mad r3.w, r3, r3.z, c17.x
mul r0.xy, v6, c9.x
mad r3.w, r3, r3.z, c17.y
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r2.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r1.x, r3.w, r3.z, c17.z
mul r1.y, r1.x, r1.w
abs r2.w, v6.y
add r1.x, r3, -r0.w
add r1.z, -r1.y, c17.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c15.w
add r3.y, -r2.w, c14
mad r3.x, r2.w, c14.z, c14.w
mad r3.x, r3, r2.w, c15
rsq r3.y, r3.y
add_pp r1.xyz, -r0, c14.y
cmp r1.w, v6.z, r1, r2.x
mul r2.y, v0.x, c11.x
mul_sat r2.x, r2.y, c15.z
mad_pp r2.xyz, r2.x, r1, r0
cmp r0.x, v6, r1.w, -r1.w
add r1.z, -r0.w, c14.y
mad r1.y, r0.w, c14.z, c14.w
mad r1.y, r0.w, r1, c15.x
rsq r1.z, r1.z
rcp r1.w, v4.w
mad r1.x, r0, c18, c18.y
mad r0.xyz, v4, r1.w, c6
mad r0.w, r0, r1.y, c15.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c14.x, c14.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c15, r1.y
mad r1.z, r0.w, c15.w, r1
mul r1.z, r1, c16.x
mad r2.w, r3.x, r2, c15.y
rcp r3.y, r3.y
mul r3.x, r2.w, r3.y
cmp r2.w, v6.y, c14.x, c14.y
mul r3.y, r2.w, r3.x
mad r1.y, -r3, c15.z, r3.x
mad r0.w, r2, c15, r1.y
dsx r3.xz, v6.xyyw
mul r4.zw, r3.xyxz, r3.xyxz
mul r1.y, r0.w, c16.x
add r0.w, r4.z, r4
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r3.w, r1.z
dsy r3.y, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r3.z, r0.w, c18.x
texld r0.x, r0, s5
mov_pp r0.w, r0.x
mad r0.xyz, v4, r1.w, c5
texld r0.x, r0, s5
mul r3.x, r1.z, c18
texldd r1.xyz, r1, s0, r3.zwzw, r3
mul_pp r2.xyz, r1, r2
mad r1.xyz, v4, r1.w, c4
texld r1.x, r1, s5
mov_pp r0.y, r1.x
mad r1.xyz, v4, r1.w, c3
mov_pp r0.z, r0.x
texld r0.x, r1, s5
mov r1.w, c2.x
add r1.y, c14, -r1.w
mad r0, r0, r1.y, c2.x
dp4_pp r0.y, r0, c19.x
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_sat r0.z, v5, r1
rcp r0.x, v3.w
mad r1.xy, v3, r0.x, c18.y
texld r0.w, r1, s3
cmp r1.x, -v3.z, c14, c14.y
mul_pp r0.w, r1.x, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r0.z, c7.w
mul_pp r0.y, r0.x, r0
mul r1.xyz, r2, v1
mul_pp_sat r0.w, r0.y, c19.y
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c13.x
mul_pp r1.xyz, r1, c8
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c14.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 224 // 212 used size, 11 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
// 108 instructions, 6 temp regs, 0 temp arrays:
// ALU 87 float, 0 int, 5 uint
// TEX 8 (0 load, 4 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedkeodnkeeaooigchndbkhgfjmocepdiphabaaaaaajmbaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcemapaaaaeaaaaaaandadaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaaaaaaaaaj
icaabaaaaaaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadp
aoaaaaahhcaabaaaabaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaehaaaaal
bcaabaaaacaaaaaaegaabaaaacaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaa
ckaabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaaehaaaaalccaabaaaacaaaaaaegaabaaaadaaaaaaaghabaaa
afaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaaeaaaaaaehaaaaalicaabaaaacaaaaaa
egaabaaaabaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaackaabaaaabaaaaaa
ehaaaaalecaabaaaacaaaaaaegaabaaaadaaaaaaaghabaaaafaaaaaaaagabaaa
aaaaaaaackaabaaaadaaaaaadcaaaaakpcaabaaaabaaaaaaegaobaaaacaaaaaa
pgapbaaaaaaaaaaaagiacaaaacaaaaaabiaaaaaabbaaaaakicaabaaaaaaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaah
dcaabaaaabaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaa
abaaaaaaegaabaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadbaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaabaaaaaahccaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaa
fgafbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
ajaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaanaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 121 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.z, v2, -r2
add r2.w, r2.z, c15.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
mul r3.xy, v6, c6.x
abs r0.w, v6.z
abs r2.xy, v6
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r2.z, r1.w, r2
mul r1.w, r2.z, r2.z
mad_sat r2.w, r2, c15, c15.y
texld r3.xyz, r3, s2
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r2.w, r1, r0
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
add r3.yzw, r3.xxyz, -r1.xxyz
mad r1.xyz, r2.w, r3.yzww, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mad r3.x, r1.w, c13.y, c13.z
mad r3.x, r3, r1.w, c13.w
mad r3.x, r3, r1.w, c14
mad r3.w, r3.x, r1, c14.y
mad r1.w, r3, r1, c14.z
mul r2.z, r1.w, r2
mul r1.xy, v6.zxzw, c7.x
mul r3.xy, v6.zxzw, c6.x
add r1.w, r2.x, -r0
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r2.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
add r2.w, -r2.z, c14
cmp r1.w, -r1, r2.z, r2
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
dsy r3.zw, v6.xyxy
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r2.xyz, r2.x, r1, r0
abs r1.z, v6.y
mad r3.x, r1.w, c15, c15.y
add r1.y, -r0.w, c11
mad r1.x, r0.w, c11.z, c11.w
mad r1.x, r0.w, r1, c12
add r2.w, -r1.z, c11.y
mad r1.w, r1.z, c11.z, c11
mad r1.w, r1, r1.z, c12.x
rsq r1.y, r1.y
rsq r2.w, r2.w
mad r0.w, r0, r1.x, c12.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c11.x, c11.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c12.z, r1.x
mad r1.z, r1.w, r1, c12.y
rcp r2.w, r2.w
mul r1.w, r1.z, r2
cmp r1.z, v6.y, c11.x, c11.y
mul r2.w, r1.z, r1
mad r1.x, -r2.w, c12.z, r1.w
mad r1.y, r0.w, c12.w, r1
mad r0.w, r1.z, c12, r1.x
mul r1.x, r1.y, c13
mul r3.y, r0.w, c13.x
dsx r1.w, r1.x
dsy r1.y, r1.x
dsx r1.xz, v6.xyyw
mul r1.xz, r1, r1
add r0.w, r1.x, r1.z
mul r3.zw, r3, r3
add r1.x, r3.z, r3.w
rsq r0.w, r0.w
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.z, r0.w, c15.x
add r0.xyz, v4, c16.xyyw
texld r0, r0, s3
dp4 r0.w, r0, c17
mul r1.x, r1, c15
texldd r1.xyz, r3, s0, r1.zwzw, r1
mul_pp r1.xyz, r1, r2
add r2.xyz, v4, c16.yxyw
mul r1.xyz, r1, v1
add r0.xyz, v4, c16.yyxw
texld r3, r2, s3
texld r2, r0, s3
dp4 r0.y, r2, c17
dp3 r0.x, v4, v4
rsq r0.x, r0.x
rcp r1.w, r0.x
add r2.xyz, v4, c16.x
texld r2, r2, s3
dp4 r0.x, r2, c17
mul r1.w, r1, c2
dp4 r0.z, r3, c17
mad r0, -r1.w, c16.z, r0
mov r2.x, c3
cmp r0, r0, c11.y, r2.x
dp4_pp r0.z, r0, c16.w
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r2.xyz, r1.w, c1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0
dp3_sat r0.y, v5, r2
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c18.x
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c10.x
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
// 108 instructions, 6 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 4 uint
// TEX 11 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfcdijhdhlcifdlgdgmaaimjgcenfidndabaaaaaajmbaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcemapaaaaeaaaaaaandadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaia
ebaaaaaaagaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaomfbhidpaaaaaaakhcaabaaaabaaaaaaegbcbaaaaeaaaaaa
aceaaaaaaaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egacbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaa
abaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
aaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaalm
aaaaaadmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaabaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaa
egbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaa
bbaaaaakecaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaa
aaaaaadmaaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaa
acaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaabaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaah
pcaabaaaabaaaaaaegaobaaaabaaaaaapgapbaaaaaaaaaaadhaaaaanpcaabaaa
abaaaaaaegaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaaaaaaaaaaegaobaaaabaaaaaa
aceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahbcaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaa
abaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
adaaaaaaaeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaa
aaaaaaaaajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.z, v2, -r2
add r2.w, r2.z, c15.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
mul r3.xy, v6, c6.x
abs r0.w, v6.z
abs r2.xy, v6
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r2.z, r1.w, r2
mul r1.w, r2.z, r2.z
mad_sat r2.w, r2, c15, c15.y
texld r3.xyz, r3, s2
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r2.w, r1, r0
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
add r3.yzw, r3.xxyz, -r1.xxyz
mad r1.xyz, r2.w, r3.yzww, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mad r3.x, r1.w, c13.y, c13.z
mad r3.x, r3, r1.w, c13.w
mad r3.x, r3, r1.w, c14
mad r3.w, r3.x, r1, c14.y
mad r1.w, r3, r1, c14.z
mul r2.z, r1.w, r2
mul r1.xy, v6.zxzw, c7.x
mul r3.xy, v6.zxzw, c6.x
add r1.w, r2.x, -r0
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r2.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
add r2.w, -r2.z, c14
cmp r1.w, -r1, r2.z, r2
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
dsy r3.zw, v6.xyxy
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r2.xyz, r2.x, r1, r0
abs r1.z, v6.y
mad r3.x, r1.w, c15, c15.y
add r1.y, -r0.w, c11
mad r1.x, r0.w, c11.z, c11.w
mad r1.x, r0.w, r1, c12
add r2.w, -r1.z, c11.y
mad r1.w, r1.z, c11.z, c11
mad r1.w, r1, r1.z, c12.x
rsq r1.y, r1.y
rsq r2.w, r2.w
mad r0.w, r0, r1.x, c12.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c11.x, c11.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c12.z, r1.x
mad r1.z, r1.w, r1, c12.y
rcp r2.w, r2.w
mul r1.w, r1.z, r2
cmp r1.z, v6.y, c11.x, c11.y
mul r2.w, r1.z, r1
mad r1.x, -r2.w, c12.z, r1.w
mad r1.y, r0.w, c12.w, r1
mad r0.w, r1.z, c12, r1.x
mul r1.x, r1.y, c13
mul r3.y, r0.w, c13.x
dsx r1.w, r1.x
dsy r1.y, r1.x
dsx r1.xz, v6.xyyw
mul r1.xz, r1, r1
add r0.w, r1.x, r1.z
mul r3.zw, r3, r3
add r1.x, r3.z, r3.w
rsq r0.w, r0.w
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.z, r0.w, c15.x
add r0.xyz, v4, c16.xyyw
texld r0, r0, s3
dp4 r0.w, r0, c17
mul r1.x, r1, c15
texldd r1.xyz, r3, s0, r1.zwzw, r1
mul_pp r1.xyz, r1, r2
add r2.xyz, v4, c16.yxyw
mul r1.xyz, r1, v1
add r0.xyz, v4, c16.yyxw
texld r3, r2, s3
texld r2, r0, s3
dp4 r0.y, r2, c17
dp3 r0.x, v4, v4
rsq r0.x, r0.x
rcp r1.w, r0.x
add r2.xyz, v4, c16.x
texld r2, r2, s3
dp4 r0.x, r2, c17
mul r1.w, r1, c2
dp4 r0.z, r3, c17
mad r0, -r1.w, c16.z, r0
dp4 r1.w, c1, c1
mov r2.x, c3
cmp r2, r0, c11.y, r2.x
rsq r1.w, r1.w
mul r0.xyz, r1.w, c1
dp3_sat r0.y, v5, r0
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
dp4_pp r1.w, r2, c16.w
mul r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c18.x
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c10.x
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 148 used size, 10 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
// 110 instructions, 6 temp regs, 0 temp arrays:
// ALU 89 float, 0 int, 4 uint
// TEX 12 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedikjehfamkfcdcpmhihgdpmilgjlbniimabaaaaaapibaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckiapaaaaeaaaaaaaokadaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fidaaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaa
akbabaiaibaaaaaaagaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaagaaaaaafgbgbaiaebaaaaaa
agaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
jcaabaaaaaaaaaaaagbebaaaagaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaa
aaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
jcaabaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaadagojjlmaaaaaaaa
aaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
iedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaa
keanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaa
acaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaa
dcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
gcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaa
aaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaak
gcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaabaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaacaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaafaaaaaa
ogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaaj
hcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaa
dcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaomfbhidpaaaaaaakhcaabaaaabaaaaaaegbcbaaaaeaaaaaaaceaaaaa
aaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaabaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaak
hcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaalmaaaaaadm
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaafaaaaaa
aagabaaaaaaaaaaabbaaaaakccaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaa
aeaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegacbaaaacaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaak
ecaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbaaaaaaakhcaabaaaacaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadm
aaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaa
eghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaabaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahpcaabaaa
abaaaaaaegaobaaaabaaaaaapgapbaaaaaaaaaaadhaaaaanpcaabaaaabaaaaaa
egaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpbbaaaaakicaabaaaaaaaaaaaegaobaaaabaaaaaaaceaaaaa
aaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahbcaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaa
eghobaaaadaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaa
adaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabbaaaaajbcaabaaaabaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaaabaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaa
diaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaagiacaaaaaaaaaaa
ajaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 131 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4 r2.w, c1, c1
texld r4, r0, s4
rsq r0.z, r2.w
mul r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
mov r0.z, c7.x
add_pp r2.w, r5.x, c14
dp3 r0.x, v3, v3
texld r0.x, r0.x, s6
mul_pp r0.w, r2, c2
mul_pp r0.w, r0, r0.x
mul_pp r0.y, r5.x, c2.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r2.xyz, r2, c3
mul_pp_sat r0.y, r0, c16.x
add r3.xyz, c2, r0.z
mad_sat r3.xyz, r3, r0.y, c0
mul_pp r0.xyz, r3, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_LightTexture0] 2D 0
// 120 instructions, 6 temp regs, 0 temp arrays:
// ALU 98 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednghdnmchecjhbnejjobbdpiclhlabjfnabaaaaaaaibcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnabaaaaaeaaaaaaadeaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
agaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeabaaaaaahccaabaaa
adaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
fgafbaaaadaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaafaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaafaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
afaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaadaaaaaajgahbaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaa
adaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaadaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaa
adaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
acaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 128 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v4
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v4, c5.x
mul r3.xy, v4, c4.x
abs r0.zw, v4.xyxy
abs r0.x, v4.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mad r2.w, r3, r2, c13.z
mul r1.xy, v4.zxzw, c5.x
mul r2.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v4.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v4.x, r1, -r1
mad r2.x, r1.w, c14, c14.y
abs r1.w, v4.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r1.w, c10
mad r1.z, r1.w, c10, c10.w
mad r1.z, r1, r1.w, c11.x
mad r1.z, r1, r1.w, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v4.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v4.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c11.z, r1.z
mad r0.x, r1, c11.w, r0
mad r0.y, r1.w, c11.w, r0
mul r0.x, r0, c12
dsx r1.xy, v4
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c12.x
dsy r2.w, r0.x
dsy r0.xy, v4
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v4.zyzw, c9.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c14.x
mul r2.z, r0.x, c14.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v4, c9.x
add r3.w, v1, c14.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul r0.xy, v4.zxzw, c9.x
mad_pp r5, r0.z, r6, r5
texld r6, r0, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r3, r4, s4
texld r1, r1, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
dp4_pp r0.z, c1, c1
rsq_pp r0.x, r0.z
mul_pp r0.xyz, r0.x, c1
dp3_sat r0.x, v3, r0
add_pp r4, r4, -r3
mad_pp r3, r0.w, r4, r3
add_pp r0.w, r0.x, c14
mul_pp r0.x, r0, c2.w
mul_pp r0.w, r0, c2
mul_pp_sat r0.w, r0, c15.x
mul_pp r2, r2, r3
mov r0.y, c7.x
add_pp r0.w, -r0, c10.y
mul_pp r1.xyz, r5, c3
mul_pp_sat r0.x, r0, c16
add r3.xyz, c2, r0.y
mad_sat r0.xyz, r3, r0.x, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r2.xyz, -r1, r0, r2
mul_pp r0.xyz, r1, r0
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 96 // 88 used size, 10 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_DetailScale]
Float 68 [_DetailVertScale]
Float 72 [_DetailDist]
Float 76 [_MinLight]
Float 80 [_Albedo]
Float 84 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
// 116 instructions, 6 temp regs, 0 temp arrays:
// ALU 95 float, 0 int, 4 uint
// TEX 12 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedamnhmjefnfejkdkmmgcegepfccagdegeabaaaaaafabbaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaakeaaaaaa
afaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaagaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdabaaaaa
eaaaaaaaamaeaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaa
abaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
aeaaaaaaagiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaaeaaaaaaagifcaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaaeaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaaeaaaaaafgifcaaaaaaaaaaa
aeaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaaeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaa
aeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
aeaaaaaaakbabaiaibaaaaaaaeaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
aeaaaaaajgbfbaiaebaaaaaaaeaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaaeaaaaaaakbabaaa
aeaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaaeaaaaaaakbabaaaaeaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaaeaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaaeaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaaeaaaaaafgifcaaaaaaaaaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaaeaaaaaafgifcaaaaaaaaaaaafaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
afaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaaeaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaaeaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaadaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaadaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaabaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaabaaaaaadicaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeaaaaaaaaiicaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaa
agijcaaaaaaaaaaaabaaaaaapgipcaaaaaaaaaaaaeaaaaaadccaaaakhcaabaaa
adaaaaaajgahbaaaadaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
adaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaaeaaaaaaegaobaaa
adaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaa
aeaaaaaaegaobaaaadaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 136 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4 r2.w, c1, c1
texld r4, r0, s4
rsq r0.z, r2.w
mul r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
add_pp r2.w, r5.x, c14
rcp r0.x, v3.w
mad r3.xy, v3, r0.x, c14.y
dp3 r0.x, v3, v3
mul_pp r2.xyz, r2, c3
mul_pp r3.z, r2.w, c2.w
mul_pp r0.y, r5.x, c2.w
texld r0.w, r3, s6
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r2.w, r0.z, r0.x
mul_pp r0.x, r2.w, r0.y
mul_pp_sat r0.w, r0.x, c16.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.w, r3.z, r2
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 0
SetTexture 7 [_LightTextureB0] 2D 1
// 127 instructions, 6 temp regs, 0 temp arrays:
// ALU 103 float, 0 int, 5 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedadabjmdcgnekpchmankjkfoahebjlflkabaaaaaapmbcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmebbaaaaeaaaaaaahbaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fibiaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaad
ocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaafaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
afaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaafaaaaaa
jgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaaabaaaaaa
egbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaai
pcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
adaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaaaoaaaaahdcaabaaaadaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaadaaaaaaegaabaaaadaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaagaaaaaaaagabaaaaaaaaaaadbaaaaahicaabaaaacaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaa
acaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaagaabaaaadaaaaaaeghobaaaahaaaaaaaagabaaa
abaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaa
bbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaaihcaabaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaa
adaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaadiaaaaaiccaabaaaadaaaaaa
akaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaaibcaabaaaadaaaaaaakaabaaa
adaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaapnekibeadicaaaahbcaabaaaadaaaaaadkaabaaaacaaaaaa
akaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaabkaabaaa
adaaaaaadicaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiaea
aaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaaadaaaaaaabeaaaaaaaaaiadp
aaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakocaabaaaadaaaaaafgaobaaaadaaaaaapgapbaaaacaaaaaa
agijcaaaacaaaaaaaeaaaaaadiaaaaaiocaabaaaadaaaaaafgaobaaaadaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
jgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 132 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4 r2.w, c1, c1
texld r4, r0, s4
rsq r0.z, r2.w
mul r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
add_pp r2.w, r5.x, c14
dp3 r0.x, v3, v3
mul_pp r2.xyz, r2, c3
mul_pp r3.x, r2.w, c2.w
mul_pp r0.y, r5.x, c2.w
texld r0.w, v3, s7
texld r0.x, r0.x, s6
mul r2.w, r0.x, r0
mul_pp r0.x, r2.w, r0.y
mul_pp_sat r0.w, r0.x, c16.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.w, r3.x, r2
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTextureB0] 2D 1
SetTexture 7 [_LightTexture0] CUBE 0
// 122 instructions, 7 temp regs, 0 temp arrays:
// ALU 99 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgggipmccphjmkjknnbhnaigpcpagahnpabaaaaaagebcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccmbbaaaaeaaaaaaaelaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaad
ocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacahaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaafaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
afaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaafaaaaaa
jgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaaabaaaaaa
egbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaai
pcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
adaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaa
diaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaadiaaaaai
bcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaaiicaabaaa
acaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeabaaaaaahccaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaafgafbaaa
adaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaagaaaaaa
egbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaadiaaaaahccaabaaa
adaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaadiaaaaahbcaabaaaadaaaaaa
bkaabaaaadaaaaaaakaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaabkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaiaebaaaaaa
acaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaadaaaaaajgahbaaaadaaaaaa
agaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
aeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaa
abaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaadaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaadaaaaaa
egaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaacaaaaaa
dkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 130 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4_pp r2.w, c1, c1
texld r4, r0, s4
rsq_pp r0.z, r2.w
mul_pp r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
add_pp r2.w, r5.x, c14
mul_pp r2.xyz, r2, c3
mul_pp r3.x, r2.w, c2.w
texld r0.w, v3, s6
mul_pp r0.x, r5, c2.w
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r3.x, r0
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp_sat r2.w, r0.x, c16.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0, r2.w, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_LightTexture0] 2D 0
// 119 instructions, 6 temp regs, 0 temp arrays:
// ALU 97 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedacnlalidionccjkkckpncodoeddjiedpabaaaaaaombbaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefclebaaaaaeaaaaaaacnaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaaddcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
agaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeaefaaaaajpcaabaaa
afaaaaaaegbabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaadkaabaaaafaaaaaadicaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaafaaaaaaaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaadaaaaaa
jgahbaaaadaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaadaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaa
egaobaaaadaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 141 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c6.x
mul r0.xy, v6.zyzw, c5.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c16.y
mad_sat r1.w, r1, c16.z, c16
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c6.x
mul r3.xy, v6, c5.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c13.y, c13.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c13.w
mad r3.w, r3.x, r2, c14.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c14.y
mad r2.w, r3, r2, c14.z
mul r1.xy, v6.zxzw, c6.x
mul r2.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c14.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c12.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c7.x
add_pp r2.xyz, -r1, c11.y
mul_sat r0.y, r0, c12.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c15, c15.y
abs r1.w, v6.y
add r0.y, -r0.x, c11
mad r1.x, r0, c11.z, c11.w
mad r1.x, r0, r1, c12
mad r0.x, r0, r1, c12.y
add r1.y, -r1.w, c11
mad r1.z, r1.w, c11, c11.w
mad r1.z, r1, r1.w, c12.x
mad r1.z, r1, r1.w, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c11.x, c11.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c11, c11.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c12.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c12.z, r1.z
mad r0.x, r1, c12.w, r0
mad r0.y, r1.w, c12.w, r0
mul r0.x, r0, c13
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c13.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c10.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c15.x
mul r2.z, r0.x, c15.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c10.x
add r3.w, v1, c15.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul r0.xy, v6.zxzw, c10.x
mad_pp r5, r0.z, r6, r5
texld r6, r0, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
dp3_sat r0.x, v5, r0
add_pp r4, r4, -r3
mad_pp r3, r0.w, r4, r3
mul_pp r2, r2, r3
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c15.y
mul_pp r0.y, r0.x, c3.w
add_pp r3.z, r0.x, c15.w
mul_pp r1.xyz, r5, c4
texldp r0.x, v4, s8
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.x, c2
cmp r0.z, r0, c11.y, r0.x
dp3 r0.x, v3, v3
texld r0.w, r3, s6
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s7
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r0.z
mul_pp r0.z, r3, c3.w
mul_pp r0.w, r0.z, r0.x
mul_pp r0.x, r0, r0.y
mov r0.y, c8.x
mul_pp_sat r0.w, r0, c16.x
add_pp r0.w, -r0, c11.y
mul_pp_sat r0.x, r0, c17
add r3.xyz, c3, r0.y
mad_sat r0.xyz, r3, r0.x, c0
mul_pp r0.xyz, r0, c9.x
mad_pp r2.xyz, -r1, r0, r2
mul_pp r0.xyz, r1, r0
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 132 instructions, 6 temp regs, 0 temp arrays:
// ALU 106 float, 0 int, 5 uint
// TEX 15 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedioiahpadkfndnlgkjpfldifjcncmablnabaaaaaaombdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjmbcaaaaeaaaaaaakhaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaa
ffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaaoaaaaahdcaabaaa
adaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaadaaaaaa
egaabaaaadaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
dbaaaaahicaabaaaacaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaacaaaaaabaaaaaahbcaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaaaoaaaaahhcaabaaaadaaaaaaegbcbaaa
aeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaadaaaaaa
eghobaaaaiaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaadaaaaaaakaabaaa
afaaaaaackaabaaaadaaaaaadhaaaaakbcaabaaaadaaaaaaakaabaaaadaaaaaa
akiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaa
adaaaaaadiaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaa
afaaaaaaaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlm
diaaaaaibcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaah
bcaabaaaadaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaia
ebaaaaaaadaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaaadaaaaaa
fgaobaaaadaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaai
ocaabaaaadaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
akaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 140 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c6.x
mul r0.xy, v6.zyzw, c5.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c16.y
mad_sat r1.w, r1, c16.z, c16
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c6.x
mul r3.xy, v6, c5.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c13.y, c13.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c13.w
mad r3.w, r3.x, r2, c14.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c14.y
mad r2.w, r3, r2, c14.z
mul r1.xy, v6.zxzw, c6.x
mul r2.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c14.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c12.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c7.x
add_pp r2.xyz, -r1, c11.y
mul_sat r0.y, r0, c12.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c15, c15.y
abs r1.w, v6.y
add r0.y, -r0.x, c11
mad r1.x, r0, c11.z, c11.w
mad r1.x, r0, r1, c12
mad r0.x, r0, r1, c12.y
add r1.y, -r1.w, c11
mad r1.z, r1.w, c11, c11.w
mad r1.z, r1, r1.w, c12.x
mad r1.z, r1, r1.w, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c11.x, c11.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c11, c11.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c12.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c12.z, r1.z
mad r0.x, r1, c12.w, r0
mad r0.y, r1.w, c12.w, r0
mul r0.x, r0, c13
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c13.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c10.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c15.x
mul r2.z, r0.x, c15.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c10.x
add r3.w, v1, c15.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul r0.xy, v6.zxzw, c10.x
mad_pp r5, r0.z, r6, r5
texld r6, r0, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
dp3_sat r0.x, v5, r0
add_pp r4, r4, -r3
mad_pp r3, r0.w, r4, r3
mul_pp r2, r2, r3
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c15.y
mul_pp r0.y, r0.x, c3.w
add_pp r3.z, r0.x, c15.w
mov r0.x, c2
add r0.z, c11.y, -r0.x
texldp r0.x, v4, s8
mad r0.z, r0.x, r0, c2.x
dp3 r0.x, v3, v3
mul_pp r1.xyz, r5, c4
texld r0.w, r3, s6
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s7
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r0.z
mul_pp r0.z, r3, c3.w
mul_pp r0.w, r0.z, r0.x
mul_pp r0.x, r0, r0.y
mov r0.y, c8.x
mul_pp_sat r0.w, r0, c16.x
add_pp r0.w, -r0, c11.y
mul_pp_sat r0.x, r0, c17
add r3.xyz, c3, r0.y
mad_sat r0.xyz, r3, r0.x, c0
mul_pp r0.xyz, r0, c9.x
mad_pp r2.xyz, -r1, r0, r2
mul_pp r0.xyz, r1, r0
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 132 instructions, 6 temp regs, 0 temp arrays:
// ALU 107 float, 0 int, 5 uint
// TEX 14 (0 load, 1 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlgoalpbbokdnoababoagokdfmcdjkombabaaaaaapmbdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckmbcaaaaeaaaaaaaklaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaa
ffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaaoaaaaahdcaabaaa
adaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaadaaaaaa
egaabaaaadaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
dbaaaaahicaabaaaacaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaacaaaaaabaaaaaahbcaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaaaoaaaaahhcaabaaaadaaaaaaegbcbaaa
aeaaaaaapgbpbaaaaeaaaaaaehaaaaalbcaabaaaadaaaaaaegaabaaaadaaaaaa
aghabaaaaiaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaaaaaaaaajccaabaaa
adaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaadaaaaaaakaabaaaadaaaaaabkaabaaaadaaaaaaakiacaaaacaaaaaa
biaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaa
bbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaaihcaabaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaa
adaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaadiaaaaaiccaabaaaadaaaaaa
akaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaaibcaabaaaadaaaaaaakaabaaa
adaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaapnekibeadicaaaahbcaabaaaadaaaaaadkaabaaaacaaaaaa
akaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaabkaabaaa
adaaaaaadicaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiaea
aaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaaadaaaaaaabeaaaaaaaaaiadp
aaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakocaabaaaadaaaaaafgaobaaaadaaaaaapgapbaaaacaaaaaa
agijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaaadaaaaaafgaobaaaadaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
jgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 130 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4_pp r2.w, c1, c1
texld r4, r0, s4
rsq_pp r0.z, r2.w
mul_pp r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
mov r0.z, c7.x
add_pp r2.w, r5.x, c14
texldp r0.x, v3, s6
mul_pp r0.w, r2, c2
mul_pp r0.w, r0, r0.x
mul_pp r0.y, r5.x, c2.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r2.xyz, r2, c3
mul_pp_sat r0.y, r0, c16.x
add r3.xyz, c2, r0.z
mad_sat r3.xyz, r3, r0.y, c0
mul_pp r0.xyz, r3, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_ShadowMapTexture] 2D 0
// 120 instructions, 6 temp regs, 0 temp arrays:
// ALU 98 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedegbnmlfokmakemapnbkncobcmhkiififabaaaaaaaibcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnabaaaaaeaaaaaaadeaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadlcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
agaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeaaoaaaaahgcaabaaa
adaaaaaaagbbbaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
jgafbaaaadaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaafaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaafaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
afaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaadaaaaaajgahbaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaa
adaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaadaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaa
adaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
acaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 131 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c5.x
mul r0.xy, v6.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c5.x
mul r3.xy, v6, c4.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v6.zxzw, c5.x
mul r2.xy, v6.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v6
abs r2.w, v6.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v6.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v6.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v6, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4_pp r2.w, c1, c1
texld r4, r0, s4
rsq_pp r0.z, r2.w
mul_pp r0.xyz, r0.z, c1
dp3_sat r5.x, v5, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
add_pp r2.w, r5.x, c14
mul_pp r2.xyz, r2, c3
mul_pp r3.x, r2.w, c2.w
mul_pp r0.y, r5.x, c2.w
texldp r0.x, v4, s6
texld r0.w, v3, s7
mul r2.w, r0, r0.x
mul_pp r0.x, r2.w, r0.y
mul_pp_sat r0.w, r0.x, c16.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.w, r3.x, r2
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
Float 212 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] 2D 0
// 122 instructions, 7 temp regs, 0 temp arrays:
// ALU 99 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhaadhljmififfhnokmncnmdkpiddmmheabaaaaaaiibcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapalaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdibbaaaaeaaaaaaaeoaeaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaad
aagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaa
gcbaaaadpcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadlcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
agaaaaaaagiacaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaagaaaaaafgifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
agaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaagaaaaaaakbabaaa
agaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaagaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaagaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaanaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
ahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaajaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeaaoaaaaahgcaabaaa
adaaaaaaagbbbaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaa
jgafbaaaadaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaa
agaaaaaaegbabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaadiaaaaah
ccaabaaaadaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaadiaaaaahbcaabaaa
adaaaaaabkaabaaaadaaaaaaakaabaaaadaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaabkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
ajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaaadaaaaaajgahbaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaa
adaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaadaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaa
adaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
acaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 140 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 4.03944778, -0.94999999, 4.00000000
def c19, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c18.z
mad_sat r1.w, r1, c19.x, c19.y
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c7.x
mul r3.xy, v6, c6.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c14.y, c14.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c14.w
mad r3.w, r3.x, r2, c15.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c15.y
mad r2.w, r3, r2, c15.z
mul r1.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c15.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c13.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c8.x
add_pp r2.xyz, -r1, c12.y
mul_sat r0.y, r0, c13.z
mad_pp r3.xyz, r0.y, r2, r1
abs r2.x, v6.y
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c16.x, c16.y
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
add r1.y, -r2.x, c12
mad r1.w, r2.x, c12.z, c12
mad r1.w, r1, r2.x, c13.x
mad r1.w, r1, r2.x, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.x, v6.y, c12, c12.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mul r1.y, r2.x, r1.w
mad r0.y, -r1, c13.z, r1.w
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mad r0.y, r2.x, c13.w, r0
dsx r1.xy, v6
mul r1.xy, r1, r1
mul r1.w, r0.y, c14.x
dsx r2.w, r0.x
dsy r2.y, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c11.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.y, c16.x
mul r2.x, r0, c16
texldd r4.xyz, r1.zwzw, s0, r2.zwzw, r2
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c11.x
add r3.w, v1, c16.z
frc r4.z, r3.w
texldd r2, r1.zwzw, s3, r2.zwzw, r2
texld r6, r1, s5
texld r5, r4, s5
add_sat r3.w, r3, -r4.z
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c11.x
texld r6, r0, s5
add_pp r6, r6, -r5
texld r4, r4, s4
texld r1, r1, s4
add_pp r1, r1, -r4
mad_pp r1, r0.z, r1, r4
texld r4, r0, s4
add_pp r4, r4, -r1
mad_pp r1, r0.w, r4, r1
mad_pp r5, r0.w, r6, r5
mul_pp r2.w, r2, r3
mul_pp r5, r2, r5
mul_pp r2, r2, r1
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
dp3 r0.w, v4, v4
texld r1, v4, s6
mul_pp r0.xyz, r3, c5
rsq r0.w, r0.w
rcp r3.x, r0.w
dp4 r0.w, r1, c17
mul r1.x, r3, c2.w
mad r1.x, -r1, c18, r0.w
dp4 r1.y, c1, c1
rsq r1.y, r1.y
mul r3.xyz, r1.y, c1
dp3_sat r1.z, v5, r3
add_pp r1.y, r1.z, c16.w
mov r0.w, c3.x
cmp r0.w, r1.x, c12.y, r0
dp3 r1.x, v3, v3
texld r1.x, r1.x, s7
mul r1.x, r1, r0.w
mul_pp r0.w, r1.z, c4
mul_pp r1.y, r1, c4.w
mul_pp r0.w, r1.x, r0
mul_pp r1.w, r1.y, r1.x
mov r1.x, c9
mul_pp_sat r0.w, r0, c18
add r1.xyz, c4, r1.x
mad_sat r1.xyz, r1, r0.w, c0
mul_pp r1.xyz, r1, c10.x
mad_pp r2.xyz, -r0, r1, r2
mul_pp_sat r0.w, r1, c18.y
add_pp r0.w, -r0, c12.y
mul_pp r0.xyz, r0, r1
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] CUBE 0
// 129 instructions, 6 temp regs, 0 temp arrays:
// ALU 105 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfpidoidehmdbiceacfdenbgncgkedegiabaaaaaahabdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccabcaaaaeaaaaaaaiiaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaa
agaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaa
abaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaa
abaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaa
abaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaa
abaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaa
abaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlm
dagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdp
aaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaa
diaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaap
mcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaama
aaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaa
abaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaa
acaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaa
alaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaa
ckaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaacaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaa
aaaaaaaaajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaa
agaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaa
egaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaa
agbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaa
acaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaah
icaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaa
acaaaaaadkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaomfbhidpefaaaaajpcaabaaaadaaaaaaegbcbaaaaeaaaaaaeghobaaa
ahaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaadaaaaaaegaobaaaadaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahicaabaaaacaaaaaa
akaabaaaadaaaaaadkaabaaaacaaaaaadhaaaaakicaabaaaacaaaaaadkaabaaa
acaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaahbcaabaaa
adaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
agaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaa
egacbaaaadaaaaaadiaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaa
aaaaaaaaafaaaaaaaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaa
aknhcdlmdiaaaaaibcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibea
dicaaaahbcaabaaaadaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaa
akaabaiaebaaaaaaadaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaa
agijcaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaa
adaaaaaafgaobaaaadaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaa
diaaaaaiocaabaaaadaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
agaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaa
afaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaaakaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 141 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 4.03944778, -0.94999999, 4.00000000
def c19, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c18.z
add r4.w, v1, c16.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
frc r6.z, r4.w
abs r5.zw, v6.xyxy
abs r0.w, v6.z
max r1.w, r5.z, r0
rcp r2.x, r1.w
min r1.w, r5.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c14, c14.z
mad r3.y, r3, r2.w, c14.w
mad r3.y, r3, r2.w, c15.x
mad r3.y, r3, r2.w, c15
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c19, c19.y
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r5.z, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c15.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r5.w, r0, r2
add r1.x, r5.z, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2, c13.z
mad_pp r2.xyz, r2.x, r1, r0
add r0.y, -r0.w, c12
mad r0.x, r0.w, c12.z, c12.w
mad r0.x, r0.w, r0, c13
mad r0.x, r0.w, r0, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.x, r0, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c12.x, c12.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r3.z, r1.w, c16.x, c16.y
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r1.x, -r1.y, c13.z, r1
mad r0.z, r0.w, c13.w, r1.x
mul r0.y, r0.z, c14.x
dsy r1.xy, v6
mul r3.w, r0.x, c14.x
dsx r3.y, r0
dsy r0.w, r0.y
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.x, r0, c16
mul r0.z, r0.y, c16.x
texldd r1.xyz, r3.zwzw, s0, r3, r0.zwzw
mul_pp r1.xyz, r1, r2
mul r0.xy, v6.zyzw, c11.x
mul r4.xyz, v1, r1
mul r6.xy, v6, c11.x
texld r1, r6, s5
texld r2, r0, s5
add_pp r2, r2, -r1
mad_pp r2, r5.z, r2, r1
mul r5.xy, v6.zxzw, c11.x
texld r1, r5, s5
add_pp r1, r1, -r2
mad_pp r1, r5.w, r1, r2
texldd r2, r3.zwzw, s3, r3, r0.zwzw
add_sat r4.w, r4, -r6.z
mul_pp r2.w, r2, r4
mul_pp r3, r2, r1
add_pp r3.xyz, r3, -r4
texld r1, r6, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r5.z, r0, r1
texld r1, r5, s4
add_pp r1, r1, -r0
mad_pp r0, r5.w, r1, r0
mul_pp r2, r2, r0
texld r0, v4, s6
dp4 r0.z, r0, c17
mad_pp r3.xyz, r3.w, r3, r4
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r0.y, r1.w
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mul_pp r1.xyz, r3, c5
mad r0.w, -r0.y, c18.x, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_sat r0.y, v5, r0
mov r1.w, c3.x
cmp r1.w, r0, c12.y, r1
dp3 r0.x, v3, v3
texld r0.w, v3, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.z, r0.x, r1.w
add_pp r0.x, r0.y, c16.w
mul_pp r0.x, r0, c4.w
mul_pp r0.x, r0, r0.z
mul_pp r0.y, r0, c4.w
mul_pp r0.z, r0, r0.y
mov r0.y, c9.x
mul_pp_sat r0.w, r0.x, c18.y
mul_pp_sat r0.z, r0, c18.w
add r3.xyz, c4, r0.y
mad_sat r3.xyz, r3, r0.z, c0
mul_pp r0.xyz, r3, c10.x
mad_pp r2.xyz, -r1, r0, r2
mul_pp r1.xyz, r1, r0
add_pp r0.w, -r0, c12.y
mul_pp r0.x, r2.w, r0.w
mad_pp oC0.xyz, r0.x, r2, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTextureB0] 2D 2
SetTexture 7 [_LightTexture0] CUBE 1
SetTexture 8 [_ShadowMapTexture] CUBE 0
// 131 instructions, 6 temp regs, 0 temp arrays:
// ALU 106 float, 0 int, 4 uint
// TEX 15 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedecipcddgbncgiepdjjmpfbinajdgokfkabaaaaaammbdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefchmbcaaaaeaaaaaaajpaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaa
ffffaaaafidaaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaahicaabaaa
acaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaa
abaaaaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
omfbhidpefaaaaajpcaabaaaadaaaaaaegbcbaaaaeaaaaaaeghobaaaaiaaaaaa
aagabaaaaaaaaaaabbaaaaakbcaabaaaadaaaaaaegaobaaaadaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahicaabaaaacaaaaaaakaabaaa
adaaaaaadkaabaaaacaaaaaadhaaaaakicaabaaaacaaaaaadkaabaaaacaaaaaa
akiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaahbcaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaa
adaaaaaaeghobaaaagaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaafaaaaaa
egbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaa
adaaaaaadiaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaa
afaaaaaaaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlm
diaaaaaibcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaah
bcaabaaaadaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaia
ebaaaaaaadaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaaadaaaaaa
fgaobaaaadaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaai
ocaabaaaadaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
akaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Float 14 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 149 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c20, 0.25000000, 4.03944778, -0.94999999, 4.00000000
def c21, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c9.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c20.z
mad_sat r1.w, r1, c21.x, c21.y
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c10.x
mul r3.xy, v6, c9.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c17.y, c17.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c17.w
mad r3.w, r3.x, r2, c18.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c18.y
mad r2.w, r3, r2, c18.z
mul r1.xy, v6.zxzw, c10.x
mul r2.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c18.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c16.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c11.x
add_pp r2.xyz, -r1, c15.y
mul_sat r0.y, r0, c16.z
mad_pp r3.xyz, r0.y, r2, r1
abs r2.x, v6.y
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c19.x, c19.y
add r0.y, -r0.x, c15
mad r1.x, r0, c15.z, c15.w
mad r1.x, r0, r1, c16
mad r0.x, r0, r1, c16.y
add r1.y, -r2.x, c15
mad r1.w, r2.x, c15.z, c15
mad r1.w, r1, r2.x, c16.x
mad r1.w, r1, r2.x, c16.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.x, v6.y, c15, c15.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c15, c15.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c16.z, r0.y
mul r1.y, r2.x, r1.w
mad r0.y, -r1, c16.z, r1.w
mad r0.x, r1, c16.w, r0
mul r0.x, r0, c17
mad r0.y, r2.x, c16.w, r0
dsx r1.xy, v6
mul r1.xy, r1, r1
mul r1.w, r0.y, c17.x
dsx r2.w, r0.x
dsy r2.y, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c14.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.y, c19.x
mul r2.x, r0, c19
texldd r4.xyz, r1.zwzw, s0, r2.zwzw, r2
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c14.x
add r3.w, v1, c19.z
frc r4.z, r3.w
texldd r2, r1.zwzw, s3, r2.zwzw, r2
add_sat r3.w, r3, -r4.z
texld r5, r4, s5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c14.x
texld r6, r0, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r1, r1, s4
add_pp r1, r1, -r4
mad_pp r1, r0.z, r1, r4
texld r4, r0, s4
add_pp r4, r4, -r1
mad_pp r1, r0.w, r4, r1
rcp r0.w, v4.w
mul_pp r2, r2, r1
mul_pp r0.xyz, r3, c8
mad r1.xy, v4, r0.w, c6
mad r3.xy, v4, r0.w, c5
texld r1.x, r1, s8
texld r3.x, r3, s8
mov r3.z, r3.x
mad r3.xy, v4, r0.w, c3
mov r3.w, r1.x
mad r1.xy, v4, r0.w, c4
texld r3.x, r3, s8
texld r1.x, r1, s8
mov r3.y, r1.x
mad r1, -v4.z, r0.w, r3
mov r0.w, c2.x
cmp r1, r1, c15.y, r0.w
dp4_pp r1.y, r1, c20.x
dp4 r3.x, c1, c1
rsq r0.w, r3.x
mul r3.xyz, r0.w, c1
dp3 r1.x, v3, v3
dp3_sat r1.w, v5, r3
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c19.y
texld r1.x, r1.x, s7
cmp r1.z, -v3, c15.x, c15.y
texld r0.w, r3, s6
mul_pp r0.w, r1.z, r0
mul_pp r0.w, r0, r1.x
mul_pp r1.x, r0.w, r1.y
add_pp r1.y, r1.w, c19.w
mul_pp r0.w, r1, c7
mul_pp r1.y, r1, c7.w
mul_pp r0.w, r1.x, r0
mul_pp r1.w, r1.y, r1.x
mov r1.x, c12
mul_pp_sat r0.w, r0, c20
add r1.xyz, c7, r1.x
mad_sat r1.xyz, r1, r0.w, c0
mul_pp r1.xyz, r1, c13.x
mad_pp r2.xyz, -r0, r1, r2
mul_pp_sat r0.w, r1, c20.y
add_pp r0.w, -r0, c15.y
mul_pp r0.xyz, r0, r1
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
Float 212 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 143 instructions, 7 temp regs, 0 temp arrays:
// ALU 111 float, 0 int, 5 uint
// TEX 18 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedahlbnfnaoagfodoimlpgicbibebhhoioabaaaaaaeibfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpibdaaaaeaaaaaaapoaeaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaa
ffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
anaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaaaoaaaaahhcaabaaa
adaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaaidcaabaaaafaaaaaa
egaabaaaadaaaaaaegiacaaaaaaaaaaaabaaaaaaefaaaaajpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaaaaaaaaaidcaabaaa
agaaaaaaegaabaaaadaaaaaaegiacaaaaaaaaaaaacaaaaaaefaaaaajpcaabaaa
agaaaaaaegaabaaaagaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaadgaaaaaf
ccaabaaaafaaaaaaakaabaaaagaaaaaaaaaaaaaidcaabaaaagaaaaaaegaabaaa
adaaaaaaegiacaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaagaaaaaaegaabaaa
agaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaadgaaaaafecaabaaaafaaaaaa
akaabaaaagaaaaaaaaaaaaaidcaabaaaadaaaaaaegaabaaaadaaaaaaegiacaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaagaaaaaaegaabaaaadaaaaaaeghobaaa
aiaaaaaaaagabaaaaaaaaaaadgaaaaaficaabaaaafaaaaaaakaabaaaagaaaaaa
dbaaaaahpcaabaaaadaaaaaaegaobaaaafaaaaaakgakbaaaadaaaaaadhaaaaan
pcaabaaaadaaaaaaegaobaaaadaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaaacaaaaaaegaobaaa
adaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaahdcaabaaa
adaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaadaaaaaa
egaabaaaadaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
dbaaaaahbcaabaaaadaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaa
adaaaaaadkaabaaaadaaaaaaakaabaaaadaaaaaabaaaaaahccaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaafgafbaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaakaabaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaa
diaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaajaaaaaa
aaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaai
bcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaahbcaabaaa
adaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaa
adaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
ajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakocaabaaaadaaaaaafgaobaaa
adaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaa
adaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaa
aeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaa
adaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Float 14 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 149 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c20, 0.25000000, 4.03944778, -0.94999999, 4.00000000
def c21, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c9.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c20.z
mad_sat r1.w, r1, c21.x, c21.y
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c10.x
mul r3.xy, v6, c9.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c17.y, c17.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c17.w
mad r3.w, r3.x, r2, c18.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c18.y
mad r2.w, r3, r2, c18.z
mul r1.xy, v6.zxzw, c10.x
mul r2.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c18.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c16.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c11.x
add_pp r2.xyz, -r1, c15.y
mul_sat r0.y, r0, c16.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c19, c19.y
abs r1.w, v6.y
add r0.y, -r0.x, c15
mad r1.x, r0, c15.z, c15.w
mad r1.x, r0, r1, c16
mad r0.x, r0, r1, c16.y
add r1.y, -r1.w, c15
mad r1.z, r1.w, c15, c15.w
mad r1.z, r1, r1.w, c16.x
mad r1.z, r1, r1.w, c16.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c15.x, c15.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c15, c15.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c16.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c16.z, r1.z
mad r0.x, r1, c16.w, r0
mad r0.y, r1.w, c16.w, r0
mul r0.x, r0, c17
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c17.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c14.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c19.x
mul r2.z, r0.x, c19.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c14.x
add r3.w, v1, c19.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c14.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
rcp r1.w, v4.w
add_pp r4, r4, -r3
mad_pp r4, r0.w, r4, r3
mad r0.xyz, v4, r1.w, c6
texld r3.x, r0, s8
mul_pp r0, r2, r4
mad r2.xyz, v4, r1.w, c5
texld r2.x, r2, s8
mov_pp r2.w, r3.x
mad r3.xyz, v4, r1.w, c4
texld r3.x, r3, s8
mov_pp r2.y, r3.x
mad r3.xyz, v4, r1.w, c3
mov_pp r2.z, r2.x
texld r2.x, r3, s8
mov r1.w, c2.x
add r1.w, c15.y, -r1
mad r2, r2, r1.w, c2.x
dp4_pp r2.y, r2, c20.x
dp4 r3.x, c1, c1
rsq r1.w, r3.x
mul r3.xyz, r1.w, c1
dp3 r2.x, v3, v3
dp3_sat r2.w, v5, r3
rcp r1.w, v3.w
mad r3.xy, v3, r1.w, c19.y
mul_pp r1.xyz, r5, c8
texld r2.x, r2.x, s7
cmp r2.z, -v3, c15.x, c15.y
texld r1.w, r3, s6
mul_pp r1.w, r2.z, r1
mul_pp r1.w, r1, r2.x
mul_pp r2.x, r1.w, r2.y
add_pp r2.y, r2.w, c19.w
mul_pp r1.w, r2, c7
mul_pp r2.y, r2, c7.w
mul_pp r1.w, r2.x, r1
mul_pp r2.w, r2.y, r2.x
mov r2.x, c12
mul_pp_sat r1.w, r1, c20
add r2.xyz, c7, r2.x
mad_sat r2.xyz, r2, r1.w, c0
mul_pp r2.xyz, r2, c13.x
mad_pp r0.xyz, -r1, r2, r0
mul_pp_sat r1.w, r2, c20.y
add_pp r1.w, -r1, c15.y
mul_pp r1.xyz, r1, r2
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
Float 212 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 140 instructions, 7 temp regs, 0 temp arrays:
// ALU 112 float, 0 int, 5 uint
// TEX 14 (0 load, 4 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfngcacahngdioanjpejciabbcmdomoflabaaaaaacibfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnibdaaaaeaaaaaaapgaeaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaa
ffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
anaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaaaaaaaaajicaabaaa
acaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpaoaaaaah
hcaabaaaadaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaaihcaabaaa
afaaaaaaegacbaaaadaaaaaaegiccaaaaaaaaaaaabaaaaaaehaaaaalbcaabaaa
afaaaaaaegaabaaaafaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaackaabaaa
afaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaaegiccaaaaaaaaaaa
acaaaaaaehaaaaalccaabaaaafaaaaaaegaabaaaagaaaaaaaghabaaaaiaaaaaa
aagabaaaaaaaaaaackaabaaaagaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaa
adaaaaaaegiccaaaaaaaaaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegiccaaaaaaaaaaaaeaaaaaaehaaaaalicaabaaaafaaaaaaegaabaaa
adaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaaehaaaaal
ecaabaaaafaaaaaaegaabaaaagaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaa
ckaabaaaagaaaaaadcaaaaakpcaabaaaadaaaaaaegaobaaaafaaaaaapgapbaaa
acaaaaaaagiacaaaacaaaaaabiaaaaaabbaaaaakicaabaaaacaaaaaaegaobaaa
adaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaahdcaabaaa
adaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaadaaaaaa
egaabaaaadaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
dbaaaaahbcaabaaaadaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaa
adaaaaaadkaabaaaadaaaaaaakaabaaaadaaaaaabaaaaaahccaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaafgafbaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaakaabaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaa
diaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaajaaaaaa
aaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaai
bcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaahbcaabaaa
adaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaa
adaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
ajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakocaabaaaadaaaaaafgaobaaa
adaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaa
adaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaa
aeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaa
adaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 148 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c20, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c19.y
mad_sat r1.w, r1, c19.z, c19
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c7.x
mul r3.xy, v6, c6.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c14.y, c14.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c14.w
mad r3.w, r3.x, r2, c15.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c15.y
mad r2.w, r3, r2, c15.z
mul r1.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c15.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c13.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c8.x
add_pp r2.xyz, -r1, c12.y
mul_sat r0.y, r0, c13.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c16, c16.y
abs r1.w, v6.y
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
add r1.y, -r1.w, c12
mad r1.z, r1.w, c12, c12.w
mad r1.z, r1, r1.w, c13.x
mad r1.z, r1, r1.w, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c12.x, c12.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c13.z, r1.z
mad r0.x, r1, c13.w, r0
mad r0.y, r1.w, c13.w, r0
mul r0.x, r0, c14
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c14.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c11.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c16.x
mul r2.z, r0.x, c16.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c11.x
add r3.w, v1, c16.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c11.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
add_pp r4, r4, -r3
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r1.w, r1.w
mad_pp r4, r0.w, r4, r3
add r0.xyz, v4, c17.xyyw
texld r3, r0, s6
mul_pp r0, r2, r4
add r2.xyz, v4, c17.yyxw
texld r4, r2, s6
dp4 r2.w, r3, c18
add r3.xyz, v4, c17.yxyw
texld r3, r3, s6
dp4 r2.z, r3, c18
add r3.xyz, v4, c17.x
texld r3, r3, s6
dp4 r2.x, r3, c18
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul_pp r1.xyz, r5, c5
mul r1.w, r1, c2
dp4 r2.y, r4, c18
mad r2, -r1.w, c17.z, r2
mov r1.w, c3.x
cmp r2, r2, c12.y, r1.w
dp4_pp r1.w, r2, c17.w
mul r3.xyz, r3.x, c1
dp3_sat r2.z, v5, r3
add_pp r2.y, r2.z, c16.w
dp3 r2.x, v3, v3
texld r2.x, r2.x, s7
mul r2.x, r2, r1.w
mul_pp r1.w, r2.z, c4
mul_pp r2.y, r2, c4.w
mul_pp r1.w, r2.x, r1
mul_pp r2.w, r2.y, r2.x
mov r2.x, c9
mul_pp_sat r1.w, r1, c20.x
add r2.xyz, c4, r2.x
mad_sat r2.xyz, r2, r1.w, c0
mul_pp r2.xyz, r2, c10.x
mad_pp r0.xyz, -r1, r2, r0
mul_pp_sat r1.w, r2, c19.x
add_pp r1.w, -r1, c12.y
mul_pp r1.xyz, r1, r2
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] CUBE 0
// 140 instructions, 6 temp regs, 0 temp arrays:
// ALU 113 float, 0 int, 4 uint
// TEX 17 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddibobmhphlgebdnefbinalplofgfjenfabaaaaaacibfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnibdaaaaeaaaaaaapgaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaa
agaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaa
abaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaa
abaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaa
abaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaa
abaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaa
abaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlm
dagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdp
aaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaa
diaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaap
mcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaama
aaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaa
abaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaa
acaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaa
alaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaa
ckaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaacaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaa
aaaaaaaaajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaa
agaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaa
egaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaa
agbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaa
acaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaah
icaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaa
acaaaaaadkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaomfbhidpaaaaaaakhcaabaaaadaaaaaaegbcbaaaaeaaaaaaaceaaaaa
aaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaadaaaaaaegacbaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaadaaaaaa
egaobaaaadaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaak
hcaabaaaafaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaalmaaaaaadm
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegacbaaaafaaaaaaeghobaaaahaaaaaa
aagabaaaaaaaaaaabbaaaaakccaabaaaadaaaaaaegaobaaaafaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaafaaaaaaegbcbaaa
aeaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaajpcaabaaa
afaaaaaaegacbaaaafaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaak
ecaabaaaadaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbaaaaaaakhcaabaaaafaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadm
aaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaaafaaaaaaegacbaaaafaaaaaa
eghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaadaaaaaaegaobaaa
afaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahpcaabaaa
adaaaaaaegaobaaaadaaaaaapgapbaaaacaaaaaadhaaaaanpcaabaaaadaaaaaa
egaobaaaadaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpbbaaaaakicaabaaaacaaaaaaegaobaaaadaaaaaaaceaaaaa
aaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahbcaabaaaadaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaaadaaaaaa
eghobaaaagaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaa
diaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaai
bcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaahbcaabaaa
adaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaa
adaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
afaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaaadaaaaaafgaobaaa
adaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaa
adaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaa
aeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaa
adaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 149 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c20, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c19.y
mad_sat r1.w, r1, c19.z, c19
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c7.x
mul r3.xy, v6, c6.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c14.y, c14.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c14.w
mad r3.w, r3.x, r2, c15.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c15.y
mad r2.w, r3, r2, c15.z
mul r1.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c15.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c13.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c8.x
add_pp r2.xyz, -r1, c12.y
mul_sat r0.y, r0, c13.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c16, c16.y
abs r1.w, v6.y
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
add r1.y, -r1.w, c12
mad r1.z, r1.w, c12, c12.w
mad r1.z, r1, r1.w, c13.x
mad r1.z, r1, r1.w, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c12.x, c12.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c13.z, r1.z
mad r0.x, r1, c13.w, r0
mad r0.y, r1.w, c13.w, r0
mul r0.x, r0, c14
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c14.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c11.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c16.x
mul r2.z, r0.x, c16.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c11.x
add r3.w, v1, c16.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c11.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
add_pp r4, r4, -r3
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r1.w, r1.w
mad_pp r4, r0.w, r4, r3
add r0.xyz, v4, c17.xyyw
texld r3, r0, s6
mul_pp r0, r2, r4
add r2.xyz, v4, c17.yyxw
texld r4, r2, s6
dp4 r2.w, r3, c18
add r3.xyz, v4, c17.yxyw
texld r3, r3, s6
dp4 r2.z, r3, c18
add r3.xyz, v4, c17.x
texld r3, r3, s6
dp4 r2.x, r3, c18
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul_pp r1.xyz, r5, c5
mul r1.w, r1, c2
dp4 r2.y, r4, c18
mad r2, -r1.w, c17.z, r2
mov r1.w, c3.x
cmp r2, r2, c12.y, r1.w
dp4_pp r2.y, r2, c17.w
mul r3.xyz, r3.x, c1
dp3 r2.x, v3, v3
dp3_sat r2.z, v5, r3
texld r2.x, r2.x, s7
texld r1.w, v3, s8
mul r1.w, r2.x, r1
mul r2.x, r1.w, r2.y
add_pp r2.y, r2.z, c16.w
mul_pp r1.w, r2.z, c4
mul_pp r2.y, r2, c4.w
mul_pp r1.w, r2.x, r1
mul_pp r2.w, r2.y, r2.x
mov r2.x, c9
mul_pp_sat r1.w, r1, c20.x
add r2.xyz, c4, r2.x
mad_sat r2.xyz, r2, r1.w, c0
mul_pp r2.xyz, r2, c10.x
mad_pp r0.xyz, -r1, r2, r0
mul_pp_sat r1.w, r2, c19.x
add_pp r1.w, -r1, c12.y
mul_pp r1.xyz, r1, r2
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTextureB0] 2D 2
SetTexture 7 [_LightTexture0] CUBE 1
SetTexture 8 [_ShadowMapTexture] CUBE 0
// 142 instructions, 6 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 4 uint
// TEX 18 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpddpofdddgddkiojliobhmkkhjlpfhpmabaaaaaaiebfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdebeaaaaeaaaaaaaanafaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaa
ffffaaaafidaaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaahicaabaaa
acaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaa
abaaaaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
omfbhidpaaaaaaakhcaabaaaadaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadm
aaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaadaaaaaaegacbaaaadaaaaaa
eghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaadaaaaaaegaobaaa
adaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaa
afaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaalmaaaaaadmaaaaaaaa
efaaaaajpcaabaaaafaaaaaaegacbaaaafaaaaaaeghobaaaaiaaaaaaaagabaaa
aaaaaaaabbaaaaakccaabaaaadaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadp
ibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaafaaaaaaegbcbaaaaeaaaaaa
aceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaajpcaabaaaafaaaaaa
egacbaaaafaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakecaabaaa
adaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
aaaaaaakhcaabaaaafaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadmaaaaaalm
aaaaaalmaaaaaaaaefaaaaajpcaabaaaafaaaaaaegacbaaaafaaaaaaeghobaaa
aiaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaadaaaaaaegaobaaaafaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahpcaabaaaadaaaaaa
egaobaaaadaaaaaapgapbaaaacaaaaaadhaaaaanpcaabaaaadaaaaaaegaobaaa
adaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpbbaaaaakicaabaaaacaaaaaaegaobaaaadaaaaaaaceaaaaaaaaaiado
aaaaiadoaaaaiadoaaaaiadobaaaaaahbcaabaaaadaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaaadaaaaaaeghobaaa
agaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaafaaaaaaegbcbaaaadaaaaaa
eghobaaaahaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
akaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
diaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaadiaaaaai
ccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaaibcaabaaa
adaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaahbcaabaaaadaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaaadaaaaaa
abeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaaadaaaaaafgaobaaaadaaaaaa
pgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaaadaaaaaa
fgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaa
aeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
abaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaa
egaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 131 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4 r2.w, c1, c1
texld r4, r0, s4
rsq r0.z, r2.w
mul r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
mov r0.z, c7.x
add_pp r2.w, r5.x, c14
dp3 r0.x, v3, v3
texld r0.x, r0.x, s6
mul_pp r0.w, r2, c2
mul_pp r0.w, r0, r0.x
mul_pp r0.y, r5.x, c2.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r2.xyz, r2, c3
mul_pp_sat r0.y, r0, c16.x
add r3.xyz, c2, r0.z
mad_sat r3.xyz, r3, r0.y, c0
mul_pp r0.xyz, r3, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_LightTexture0] 2D 0
// 120 instructions, 6 temp regs, 0 temp arrays:
// ALU 98 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednghdnmchecjhbnejjobbdpiclhlabjfnabaaaaaaaibcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnabaaaaaeaaaaaaadeaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
agaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeabaaaaaahccaabaaa
adaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
fgafbaaaadaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaafaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaafaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
afaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaadaaaaaajgahbaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaa
adaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaadaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaa
adaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
acaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 128 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mul r1.xy, v4.zyzw, c5.x
mul r0.xy, v4.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v4
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v4, c5.x
mul r3.xy, v4, c4.x
abs r0.zw, v4.xyxy
abs r0.x, v4.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mad r2.w, r3, r2, c13.z
mul r1.xy, v4.zxzw, c5.x
mul r2.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v4.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v4.x, r1, -r1
mad r2.x, r1.w, c14, c14.y
abs r1.w, v4.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r1.w, c10
mad r1.z, r1.w, c10, c10.w
mad r1.z, r1, r1.w, c11.x
mad r1.z, r1, r1.w, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v4.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v4.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c11.z, r1.z
mad r0.x, r1, c11.w, r0
mad r0.y, r1.w, c11.w, r0
mul r0.x, r0, c12
dsx r1.xy, v4
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c12.x
dsy r2.w, r0.x
dsy r0.xy, v4
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v4.zyzw, c9.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c14.x
mul r2.z, r0.x, c14.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v4, c9.x
add r3.w, v1, c14.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul r0.xy, v4.zxzw, c9.x
mad_pp r5, r0.z, r6, r5
texld r6, r0, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r3, r4, s4
texld r1, r1, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
dp4_pp r0.z, c1, c1
rsq_pp r0.x, r0.z
mul_pp r0.xyz, r0.x, c1
dp3_sat r0.x, v3, r0
add_pp r4, r4, -r3
mad_pp r3, r0.w, r4, r3
add_pp r0.w, r0.x, c14
mul_pp r0.x, r0, c2.w
mul_pp r0.w, r0, c2
mul_pp_sat r0.w, r0, c15.x
mul_pp r2, r2, r3
mov r0.y, c7.x
add_pp r0.w, -r0, c10.y
mul_pp r1.xyz, r5, c3
mul_pp_sat r0.x, r0, c16
add r3.xyz, c2, r0.y
mad_sat r0.xyz, r3, r0.x, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r2.xyz, -r1, r0, r2
mul_pp r0.xyz, r1, r0
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 96 // 88 used size, 10 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_DetailScale]
Float 68 [_DetailVertScale]
Float 72 [_DetailDist]
Float 76 [_MinLight]
Float 80 [_Albedo]
Float 84 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
// 116 instructions, 6 temp regs, 0 temp arrays:
// ALU 95 float, 0 int, 4 uint
// TEX 12 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedamnhmjefnfejkdkmmgcegepfccagdegeabaaaaaafabbaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaakeaaaaaa
afaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaagaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdabaaaaa
eaaaaaaaamaeaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaa
abaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
aeaaaaaaagiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaaeaaaaaaagifcaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaaeaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaaeaaaaaafgifcaaaaaaaaaaa
aeaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaaeaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaaeaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaaaeaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaaeaaaaaaakbabaiaibaaaaaa
aeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
aeaaaaaaakbabaiaibaaaaaaaeaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
aeaaaaaajgbfbaiaebaaaaaaaeaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaaeaaaaaaakbabaaa
aeaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaaeaaaaaaakbabaaaaeaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaaeaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaaeaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaaeaaaaaafgifcaaaaaaaaaaaafaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaaeaaaaaafgifcaaaaaaaaaaaafaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
afaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaaeaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaafaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaaeaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaadaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaadaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaabaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaabaaaaaadicaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeaaaaaaaaiicaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaa
agijcaaaaaaaaaaaabaaaaaapgipcaaaaaaaaaaaaeaaaaaadccaaaakhcaabaaa
adaaaaaajgahbaaaadaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaafaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
adaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaaeaaaaaaegaobaaa
adaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaa
aeaaaaaaegaobaaaadaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 136 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4 r2.w, c1, c1
texld r4, r0, s4
rsq r0.z, r2.w
mul r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
add_pp r2.w, r5.x, c14
rcp r0.x, v3.w
mad r3.xy, v3, r0.x, c14.y
dp3 r0.x, v3, v3
mul_pp r2.xyz, r2, c3
mul_pp r3.z, r2.w, c2.w
mul_pp r0.y, r5.x, c2.w
texld r0.w, r3, s6
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r2.w, r0.z, r0.x
mul_pp r0.x, r2.w, r0.y
mul_pp_sat r0.w, r0.x, c16.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.w, r3.z, r2
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 0
SetTexture 7 [_LightTextureB0] 2D 1
// 127 instructions, 6 temp regs, 0 temp arrays:
// ALU 103 float, 0 int, 5 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedadabjmdcgnekpchmankjkfoahebjlflkabaaaaaapmbcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmebbaaaaeaaaaaaahbaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fibiaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaad
ocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaafaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
afaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaafaaaaaa
jgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaaabaaaaaa
egbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaai
pcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
adaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaaaoaaaaahdcaabaaaadaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaadaaaaaaegaabaaaadaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaagaaaaaaaagabaaaaaaaaaaadbaaaaahicaabaaaacaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaa
acaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaadaaaaaaagaabaaaadaaaaaaeghobaaaahaaaaaaaagabaaa
abaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaa
bbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaaihcaabaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaa
adaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaadiaaaaaiccaabaaaadaaaaaa
akaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaaibcaabaaaadaaaaaaakaabaaa
adaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaapnekibeadicaaaahbcaabaaaadaaaaaadkaabaaaacaaaaaa
akaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaabkaabaaa
adaaaaaadicaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiaea
aaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaaadaaaaaaabeaaaaaaaaaiadp
aaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakocaabaaaadaaaaaafgaobaaaadaaaaaapgapbaaaacaaaaaa
agijcaaaacaaaaaaaeaaaaaadiaaaaaiocaabaaaadaaaaaafgaobaaaadaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
jgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 132 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4 r2.w, c1, c1
texld r4, r0, s4
rsq r0.z, r2.w
mul r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
add_pp r2.w, r5.x, c14
dp3 r0.x, v3, v3
mul_pp r2.xyz, r2, c3
mul_pp r3.x, r2.w, c2.w
mul_pp r0.y, r5.x, c2.w
texld r0.w, v3, s7
texld r0.x, r0.x, s6
mul r2.w, r0.x, r0
mul_pp r0.x, r2.w, r0.y
mul_pp_sat r0.w, r0.x, c16.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.w, r3.x, r2
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTextureB0] 2D 1
SetTexture 7 [_LightTexture0] CUBE 0
// 122 instructions, 7 temp regs, 0 temp arrays:
// ALU 99 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgggipmccphjmkjknnbhnaigpcpagahnpabaaaaaagebcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccmbbaaaaeaaaaaaaelaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaa
fidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaad
ocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacahaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaafaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
afaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaa
akbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaafaaaaaa
jgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaaabaaaaaa
egbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaai
pcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaa
adaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaiaibaaaaaa
afaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaadaaaaaa
egacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaa
egacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaa
diaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaadiaaaaai
bcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaaiicaabaaa
acaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeabaaaaaahccaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaafgafbaaa
adaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaagaaaaaa
egbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaadiaaaaahccaabaaa
adaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaadiaaaaahbcaabaaaadaaaaaa
bkaabaaaadaaaaaaakaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaabkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaiaebaaaaaa
acaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaadaaaaaajgahbaaaadaaaaaa
agaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaaadaaaaaa
egacbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
aeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaa
abaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaadaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaaadaaaaaa
egaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaacaaaaaa
dkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 130 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4_pp r2.w, c1, c1
texld r4, r0, s4
rsq_pp r0.z, r2.w
mul_pp r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
add_pp r2.w, r5.x, c14
mul_pp r2.xyz, r2, c3
mul_pp r3.x, r2.w, c2.w
texld r0.w, v3, s6
mul_pp r0.x, r5, c2.w
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r3.x, r0
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp_sat r2.w, r0.x, c16.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0, r2.w, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_LightTexture0] 2D 0
// 119 instructions, 6 temp regs, 0 temp arrays:
// ALU 97 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedacnlalidionccjkkckpncodoeddjiedpabaaaaaaombbaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefclebaaaaaeaaaaaaacnaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaaddcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
agaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeaefaaaaajpcaabaaa
afaaaaaaegbabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaadkaabaaaafaaaaaadicaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaadkaabaaaafaaaaaaaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaadaaaaaa
jgahbaaaadaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaai
hcaabaaaadaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaadaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaa
egaobaaaadaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaacaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 141 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c6.x
mul r0.xy, v6.zyzw, c5.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c16.y
mad_sat r1.w, r1, c16.z, c16
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c6.x
mul r3.xy, v6, c5.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c13.y, c13.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c13.w
mad r3.w, r3.x, r2, c14.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c14.y
mad r2.w, r3, r2, c14.z
mul r1.xy, v6.zxzw, c6.x
mul r2.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c14.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c12.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c7.x
add_pp r2.xyz, -r1, c11.y
mul_sat r0.y, r0, c12.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c15, c15.y
abs r1.w, v6.y
add r0.y, -r0.x, c11
mad r1.x, r0, c11.z, c11.w
mad r1.x, r0, r1, c12
mad r0.x, r0, r1, c12.y
add r1.y, -r1.w, c11
mad r1.z, r1.w, c11, c11.w
mad r1.z, r1, r1.w, c12.x
mad r1.z, r1, r1.w, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c11.x, c11.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c11, c11.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c12.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c12.z, r1.z
mad r0.x, r1, c12.w, r0
mad r0.y, r1.w, c12.w, r0
mul r0.x, r0, c13
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c13.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c10.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c15.x
mul r2.z, r0.x, c15.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c10.x
add r3.w, v1, c15.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul r0.xy, v6.zxzw, c10.x
mad_pp r5, r0.z, r6, r5
texld r6, r0, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
dp3_sat r0.x, v5, r0
add_pp r4, r4, -r3
mad_pp r3, r0.w, r4, r3
mul_pp r2, r2, r3
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c15.y
mul_pp r0.y, r0.x, c3.w
add_pp r3.z, r0.x, c15.w
mul_pp r1.xyz, r5, c4
texldp r0.x, v4, s8
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.x, c2
cmp r0.z, r0, c11.y, r0.x
dp3 r0.x, v3, v3
texld r0.w, r3, s6
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s7
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r0.z
mul_pp r0.z, r3, c3.w
mul_pp r0.w, r0.z, r0.x
mul_pp r0.x, r0, r0.y
mov r0.y, c8.x
mul_pp_sat r0.w, r0, c16.x
add_pp r0.w, -r0, c11.y
mul_pp_sat r0.x, r0, c17
add r3.xyz, c3, r0.y
mad_sat r0.xyz, r3, r0.x, c0
mul_pp r0.xyz, r0, c9.x
mad_pp r2.xyz, -r1, r0, r2
mul_pp r0.xyz, r1, r0
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 132 instructions, 6 temp regs, 0 temp arrays:
// ALU 106 float, 0 int, 5 uint
// TEX 15 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedioiahpadkfndnlgkjpfldifjcncmablnabaaaaaaombdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjmbcaaaaeaaaaaaakhaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaa
ffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaaoaaaaahdcaabaaa
adaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaadaaaaaa
egaabaaaadaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
dbaaaaahicaabaaaacaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaacaaaaaabaaaaaahbcaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaaaoaaaaahhcaabaaaadaaaaaaegbcbaaa
aeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaadaaaaaa
eghobaaaaiaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaadaaaaaaakaabaaa
afaaaaaackaabaaaadaaaaaadhaaaaakbcaabaaaadaaaaaaakaabaaaadaaaaaa
akiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaa
adaaaaaadiaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaa
afaaaaaaaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlm
diaaaaaibcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaah
bcaabaaaadaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaia
ebaaaaaaadaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaaadaaaaaa
fgaobaaaadaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaai
ocaabaaaadaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
akaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 140 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c16, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c17, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c6.x
mul r0.xy, v6.zyzw, c5.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c16.y
mad_sat r1.w, r1, c16.z, c16
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c6.x
mul r3.xy, v6, c5.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c13.y, c13.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c13.w
mad r3.w, r3.x, r2, c14.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c14.y
mad r2.w, r3, r2, c14.z
mul r1.xy, v6.zxzw, c6.x
mul r2.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c14.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c12.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c7.x
add_pp r2.xyz, -r1, c11.y
mul_sat r0.y, r0, c12.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c15, c15.y
abs r1.w, v6.y
add r0.y, -r0.x, c11
mad r1.x, r0, c11.z, c11.w
mad r1.x, r0, r1, c12
mad r0.x, r0, r1, c12.y
add r1.y, -r1.w, c11
mad r1.z, r1.w, c11, c11.w
mad r1.z, r1, r1.w, c12.x
mad r1.z, r1, r1.w, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c11.x, c11.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c11, c11.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c12.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c12.z, r1.z
mad r0.x, r1, c12.w, r0
mad r0.y, r1.w, c12.w, r0
mul r0.x, r0, c13
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c13.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c10.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c15.x
mul r2.z, r0.x, c15.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c10.x
add r3.w, v1, c15.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul r0.xy, v6.zxzw, c10.x
mad_pp r5, r0.z, r6, r5
texld r6, r0, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r0.xyz, r0.x, c1
dp3_sat r0.x, v5, r0
add_pp r4, r4, -r3
mad_pp r3, r0.w, r4, r3
mul_pp r2, r2, r3
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c15.y
mul_pp r0.y, r0.x, c3.w
add_pp r3.z, r0.x, c15.w
mov r0.x, c2
add r0.z, c11.y, -r0.x
texldp r0.x, v4, s8
mad r0.z, r0.x, r0, c2.x
dp3 r0.x, v3, v3
mul_pp r1.xyz, r5, c4
texld r0.w, r3, s6
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s7
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r0.z
mul_pp r0.z, r3, c3.w
mul_pp r0.w, r0.z, r0.x
mul_pp r0.x, r0, r0.y
mov r0.y, c8.x
mul_pp_sat r0.w, r0, c16.x
add_pp r0.w, -r0, c11.y
mul_pp_sat r0.x, r0, c17
add r3.xyz, c3, r0.y
mad_sat r0.xyz, r3, r0.x, c0
mul_pp r0.xyz, r0, c9.x
mad_pp r2.xyz, -r1, r0, r2
mul_pp r0.xyz, r1, r0
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 132 instructions, 6 temp regs, 0 temp arrays:
// ALU 107 float, 0 int, 5 uint
// TEX 14 (0 load, 1 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlgoalpbbokdnoababoagokdfmcdjkombabaaaaaapmbdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckmbcaaaaeaaaaaaaklaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaa
ffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaaaoaaaaahdcaabaaa
adaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaadaaaaaa
egaabaaaadaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
dbaaaaahicaabaaaacaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaacaaaaaabaaaaaahbcaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaaaoaaaaahhcaabaaaadaaaaaaegbcbaaa
aeaaaaaapgbpbaaaaeaaaaaaehaaaaalbcaabaaaadaaaaaaegaabaaaadaaaaaa
aghabaaaaiaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaaaaaaaaajccaabaaa
adaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaadaaaaaaakaabaaaadaaaaaabkaabaaaadaaaaaaakiacaaaacaaaaaa
biaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaa
bbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaadiaaaaaihcaabaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaa
adaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaadiaaaaaiccaabaaaadaaaaaa
akaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaaibcaabaaaadaaaaaaakaabaaa
adaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaapnekibeadicaaaahbcaabaaaadaaaaaadkaabaaaacaaaaaa
akaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaabkaabaaa
adaaaaaadicaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiaea
aaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaaadaaaaaaabeaaaaaaaaaiadp
aaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaa
aiaaaaaadccaaaakocaabaaaadaaaaaafgaobaaaadaaaaaapgapbaaaacaaaaaa
agijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaaadaaaaaafgaobaaaadaaaaaa
agiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
jgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaa
eghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
aeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaadkaabaaaaaaaaaaa
dcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 130 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r1.xy, v5.zyzw, c5.x
mul r0.xy, v5.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v5
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v5, c5.x
mul r3.xy, v5, c4.x
abs r0.zw, v5.xyxy
abs r0.x, v5.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v5
abs r2.w, v5.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v5.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v5.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v5.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v5.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v5
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v5, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v5.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4_pp r2.w, c1, c1
texld r4, r0, s4
rsq_pp r0.z, r2.w
mul_pp r0.xyz, r0.z, c1
dp3_sat r5.x, v4, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
mov r0.z, c7.x
add_pp r2.w, r5.x, c14
texldp r0.x, v3, s6
mul_pp r0.w, r2, c2
mul_pp r0.w, r0, r0.x
mul_pp r0.y, r5.x, c2.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r2.xyz, r2, c3
mul_pp_sat r0.y, r0, c16.x
add r3.xyz, c2, r0.z
mad_sat r3.xyz, r3, r0.y, c0
mul_pp r0.xyz, r3, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_DetailVertTex] 2D 3
SetTexture 2 [_DetailTex] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 4
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 5 [_CityLightOverlayDetailTex] 2D 6
SetTexture 6 [_ShadowMapTexture] 2D 0
// 120 instructions, 6 temp regs, 0 temp arrays:
// ALU 98 float, 0 int, 4 uint
// TEX 13 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedegbnmlfokmakemapnbkncobcmhkiififabaaaaaaaibcaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnabaaaaaeaaaaaaadeaeaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaa
agaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadlcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
afaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaafaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaafaaaaaafgifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaafaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaafaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaaafaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaafaaaaaaakbabaiaibaaaaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
afaaaaaaakbabaiaibaaaaaaafaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
afaaaaaajgbfbaiaebaaaaaaafaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaafaaaaaaakbabaaa
afaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaafaaaaaaakbabaaaafaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaafaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaagaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaafaaaaaafgifcaaaaaaaaaaaajaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
agaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaagaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaafaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeaaoaaaaahgcaabaaa
adaaaaaaagbbbaaaadaaaaaapgbpbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
jgafbaaaadaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaafaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaafaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
afaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaadaaaaaajgahbaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaa
adaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaafaaaaaaegaobaaaadaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaafaaaaaaegaobaaa
adaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
acaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_Albedo]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 131 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c15, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c16, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c5.x
mul r0.xy, v6.zyzw, c4.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c15.y
mad_sat r1.w, r1, c15.z, c15
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c5.x
mul r3.xy, v6, c4.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c12.y, c12.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c13.y
mul r1.xy, v6.zxzw, c5.x
mul r2.xy, v6.zxzw, c4.x
mad r2.w, r3, r2, c13.z
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
dsx r3.xy, v6
abs r2.w, v6.y
add r2.x, r0.z, -r0
add r0.y, -r1.w, c13.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c11.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c6.x
add_pp r2.xyz, -r1, c10.y
mul_sat r0.y, r0, c11.z
mad_pp r2.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c14.x, c14.y
add r0.y, -r0.x, c10
mad r1.x, r0, c10.z, c10.w
mad r1.x, r0, r1, c11
mad r0.x, r0, r1, c11.y
add r1.y, -r2.w, c10
mad r1.w, r2, c10.z, c10
mad r1.w, r1, r2, c11.x
mad r1.w, r1, r2, c11.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.w, v6.y, c10.x, c10.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c10, c10.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c11.z, r0.y
mul r1.y, r2.w, r1.w
mad r0.y, -r1, c11.z, r1.w
mad r0.y, r2.w, c11.w, r0
mad r0.x, r1, c11.w, r0
mul r0.x, r0, c12
mul r3.xy, r3, r3
add r1.x, r3, r3.y
mul r3.xy, v6.zyzw, c9.x
dsy r3.w, r0.x
mul r1.w, r0.y, c12.x
dsx r1.y, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
rsq r0.y, r1.x
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
mul r1.x, r0.y, c14
texldd r4.xyz, r1.zwzw, s0, r1, r3.zwzw
mul_pp r2.xyz, r4, r2
mul r4.xy, v6, c9.x
add r2.w, v1, c14.z
frc r4.z, r2.w
texldd r1, r1.zwzw, s3, r1, r3.zwzw
add_sat r2.w, r2, -r4.z
mul_pp r1.w, r1, r2
texld r5, r4, s5
texld r6, r3, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c9.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r1, r5
mul r2.xyz, v1, r2
add_pp r5.xyz, r5, -r2
mad_pp r2.xyz, r5.w, r5, r2
texld r4, r4, s4
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r3, r0.z, r3, r4
dp4_pp r2.w, c1, c1
texld r4, r0, s4
rsq_pp r0.z, r2.w
mul_pp r0.xyz, r0.z, c1
dp3_sat r5.x, v5, r0
add_pp r4, r4, -r3
mad_pp r0, r0.w, r4, r3
mul_pp r1, r1, r0
add_pp r2.w, r5.x, c14
mul_pp r2.xyz, r2, c3
mul_pp r3.x, r2.w, c2.w
mul_pp r0.y, r5.x, c2.w
texldp r0.x, v4, s6
texld r0.w, v3, s7
mul r2.w, r0, r0.x
mul_pp r0.x, r2.w, r0.y
mul_pp_sat r0.w, r0.x, c16.x
mov r0.y, c7.x
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r0.xyz, r0, c8.x
mad_pp r1.xyz, -r2, r0, r1
mul_pp r0.w, r3.x, r2
mul_pp_sat r0.w, r0, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
Float 212 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] 2D 0
// 122 instructions, 7 temp regs, 0 temp arrays:
// ALU 99 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhaadhljmififfhnokmncnmdkpiddmmheabaaaaaaiibcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapalaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdibbaaaaeaaaaaaaeoaeaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafkaaaaad
aagabaaaahaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaa
ahaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaa
gcbaaaadpcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadlcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaa
agaaaaaaagiacaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaaefaaaaajpcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaaipcaabaaa
acaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
adaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaaj
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaadaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaa
bacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaagaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadp
dcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
adaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaagaaaaaafgifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaia
ibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaa
abaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaa
agaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaagaaaaaaakbabaaa
agaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaagaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaagaaaaaaapaaaaah
icaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaa
chbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaia
mbaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaa
abaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaa
aeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaa
egaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaa
acaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaa
abaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaadaaaaaaaagabaaaafaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaaidcaabaaa
abaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaa
diaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaafgifcaaaaaaaaaaaanaaaaaa
efaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaafaaaaaaaagabaaa
ahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaa
afaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaafgbfbaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaaabeaaaaakehahndpebcaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaacaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaaihcaabaaaadaaaaaapgapbaaaacaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaacaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaa
diaaaaaibcaabaaaadaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaajaaaaaa
aaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhcdlmdiaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaapnekibeaaoaaaaahgcaabaaa
adaaaaaaagbbbaaaaeaaaaaapgbpbaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaa
jgafbaaaadaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaa
agaaaaaaegbabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaadiaaaaah
ccaabaaaadaaaaaaakaabaaaafaaaaaadkaabaaaagaaaaaadiaaaaahbcaabaaa
adaaaaaabkaabaaaadaaaaaaakaabaaaadaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaabkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
ajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaaadaaaaaajgahbaaa
adaaaaaaagaabaaaadaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaaihcaabaaa
adaaaaaaegacbaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaadaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaadaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaa
adaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
acaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 140 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 4.03944778, -0.94999999, 4.00000000
def c19, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c18.z
mad_sat r1.w, r1, c19.x, c19.y
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c7.x
mul r3.xy, v6, c6.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c14.y, c14.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c14.w
mad r3.w, r3.x, r2, c15.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c15.y
mad r2.w, r3, r2, c15.z
mul r1.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c15.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c13.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c8.x
add_pp r2.xyz, -r1, c12.y
mul_sat r0.y, r0, c13.z
mad_pp r3.xyz, r0.y, r2, r1
abs r2.x, v6.y
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c16.x, c16.y
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
add r1.y, -r2.x, c12
mad r1.w, r2.x, c12.z, c12
mad r1.w, r1, r2.x, c13.x
mad r1.w, r1, r2.x, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.x, v6.y, c12, c12.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mul r1.y, r2.x, r1.w
mad r0.y, -r1, c13.z, r1.w
mad r0.x, r1, c13.w, r0
mul r0.x, r0, c14
mad r0.y, r2.x, c13.w, r0
dsx r1.xy, v6
mul r1.xy, r1, r1
mul r1.w, r0.y, c14.x
dsx r2.w, r0.x
dsy r2.y, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c11.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.y, c16.x
mul r2.x, r0, c16
texldd r4.xyz, r1.zwzw, s0, r2.zwzw, r2
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c11.x
add r3.w, v1, c16.z
frc r4.z, r3.w
texldd r2, r1.zwzw, s3, r2.zwzw, r2
texld r6, r1, s5
texld r5, r4, s5
add_sat r3.w, r3, -r4.z
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c11.x
texld r6, r0, s5
add_pp r6, r6, -r5
texld r4, r4, s4
texld r1, r1, s4
add_pp r1, r1, -r4
mad_pp r1, r0.z, r1, r4
texld r4, r0, s4
add_pp r4, r4, -r1
mad_pp r1, r0.w, r4, r1
mad_pp r5, r0.w, r6, r5
mul_pp r2.w, r2, r3
mul_pp r5, r2, r5
mul_pp r2, r2, r1
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
dp3 r0.w, v4, v4
texld r1, v4, s6
mul_pp r0.xyz, r3, c5
rsq r0.w, r0.w
rcp r3.x, r0.w
dp4 r0.w, r1, c17
mul r1.x, r3, c2.w
mad r1.x, -r1, c18, r0.w
dp4 r1.y, c1, c1
rsq r1.y, r1.y
mul r3.xyz, r1.y, c1
dp3_sat r1.z, v5, r3
add_pp r1.y, r1.z, c16.w
mov r0.w, c3.x
cmp r0.w, r1.x, c12.y, r0
dp3 r1.x, v3, v3
texld r1.x, r1.x, s7
mul r1.x, r1, r0.w
mul_pp r0.w, r1.z, c4
mul_pp r1.y, r1, c4.w
mul_pp r0.w, r1.x, r0
mul_pp r1.w, r1.y, r1.x
mov r1.x, c9
mul_pp_sat r0.w, r0, c18
add r1.xyz, c4, r1.x
mad_sat r1.xyz, r1, r0.w, c0
mul_pp r1.xyz, r1, c10.x
mad_pp r2.xyz, -r0, r1, r2
mul_pp_sat r0.w, r1, c18.y
add_pp r0.w, -r0, c12.y
mul_pp r0.xyz, r0, r1
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] CUBE 0
// 129 instructions, 6 temp regs, 0 temp arrays:
// ALU 105 float, 0 int, 4 uint
// TEX 14 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfpidoidehmdbiceacfdenbgncgkedegiabaaaaaahabdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccabcaaaaeaaaaaaaiiaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaa
agaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaa
abaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaa
abaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaa
abaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaa
abaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaa
abaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlm
dagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdp
aaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaa
diaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaap
mcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaama
aaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaa
abaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaa
acaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaa
alaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaa
ckaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaacaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaa
aaaaaaaaajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaa
agaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaa
egaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaa
agbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaa
acaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaah
icaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaa
acaaaaaadkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaomfbhidpefaaaaajpcaabaaaadaaaaaaegbcbaaaaeaaaaaaeghobaaa
ahaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaadaaaaaaegaobaaaadaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahicaabaaaacaaaaaa
akaabaaaadaaaaaadkaabaaaacaaaaaadhaaaaakicaabaaaacaaaaaadkaabaaa
acaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaahbcaabaaa
adaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaa
agaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaa
egacbaaaadaaaaaadiaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaa
aaaaaaaaafaaaaaaaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaa
aknhcdlmdiaaaaaibcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaa
afaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibea
dicaaaahbcaabaaaadaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaa
akaabaiaebaaaaaaadaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaa
agijcaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaa
adaaaaaafgaobaaaadaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaa
diaaaaaiocaabaaaadaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaa
agaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaa
afaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaa
agaaaaaaegaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaa
aaaaaaaaakaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 141 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 4.03944778, -0.94999999, 4.00000000
def c19, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c18.z
add r4.w, v1, c16.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
frc r6.z, r4.w
abs r5.zw, v6.xyxy
abs r0.w, v6.z
max r1.w, r5.z, r0
rcp r2.x, r1.w
min r1.w, r5.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c14, c14.z
mad r3.y, r3, r2.w, c14.w
mad r3.y, r3, r2.w, c15.x
mad r3.y, r3, r2.w, c15
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c19, c19.y
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r5.z, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c15.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r5.w, r0, r2
add r1.x, r5.z, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2, c13.z
mad_pp r2.xyz, r2.x, r1, r0
add r0.y, -r0.w, c12
mad r0.x, r0.w, c12.z, c12.w
mad r0.x, r0.w, r0, c13
mad r0.x, r0.w, r0, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.x, r0, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c12.x, c12.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r3.z, r1.w, c16.x, c16.y
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r1.x, -r1.y, c13.z, r1
mad r0.z, r0.w, c13.w, r1.x
mul r0.y, r0.z, c14.x
dsy r1.xy, v6
mul r3.w, r0.x, c14.x
dsx r3.y, r0
dsy r0.w, r0.y
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.x, r0, c16
mul r0.z, r0.y, c16.x
texldd r1.xyz, r3.zwzw, s0, r3, r0.zwzw
mul_pp r1.xyz, r1, r2
mul r0.xy, v6.zyzw, c11.x
mul r4.xyz, v1, r1
mul r6.xy, v6, c11.x
texld r1, r6, s5
texld r2, r0, s5
add_pp r2, r2, -r1
mad_pp r2, r5.z, r2, r1
mul r5.xy, v6.zxzw, c11.x
texld r1, r5, s5
add_pp r1, r1, -r2
mad_pp r1, r5.w, r1, r2
texldd r2, r3.zwzw, s3, r3, r0.zwzw
add_sat r4.w, r4, -r6.z
mul_pp r2.w, r2, r4
mul_pp r3, r2, r1
add_pp r3.xyz, r3, -r4
texld r1, r6, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r0, r5.z, r0, r1
texld r1, r5, s4
add_pp r1, r1, -r0
mad_pp r0, r5.w, r1, r0
mul_pp r2, r2, r0
texld r0, v4, s6
dp4 r0.z, r0, c17
mad_pp r3.xyz, r3.w, r3, r4
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r0.y, r1.w
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mul_pp r1.xyz, r3, c5
mad r0.w, -r0.y, c18.x, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_sat r0.y, v5, r0
mov r1.w, c3.x
cmp r1.w, r0, c12.y, r1
dp3 r0.x, v3, v3
texld r0.w, v3, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.z, r0.x, r1.w
add_pp r0.x, r0.y, c16.w
mul_pp r0.x, r0, c4.w
mul_pp r0.x, r0, r0.z
mul_pp r0.y, r0, c4.w
mul_pp r0.z, r0, r0.y
mov r0.y, c9.x
mul_pp_sat r0.w, r0.x, c18.y
mul_pp_sat r0.z, r0, c18.w
add r3.xyz, c4, r0.y
mad_sat r3.xyz, r3, r0.z, c0
mul_pp r0.xyz, r3, c10.x
mad_pp r2.xyz, -r1, r0, r2
mul_pp r1.xyz, r1, r0
add_pp r0.w, -r0, c12.y
mul_pp r0.x, r2.w, r0.w
mad_pp oC0.xyz, r0.x, r2, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTextureB0] 2D 2
SetTexture 7 [_LightTexture0] CUBE 1
SetTexture 8 [_ShadowMapTexture] CUBE 0
// 131 instructions, 6 temp regs, 0 temp arrays:
// ALU 106 float, 0 int, 4 uint
// TEX 15 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedecipcddgbncgiepdjjmpfbinajdgokfkabaaaaaammbdaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefchmbcaaaaeaaaaaaajpaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaa
ffffaaaafidaaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaahicaabaaa
acaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaa
abaaaaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
omfbhidpefaaaaajpcaabaaaadaaaaaaegbcbaaaaeaaaaaaeghobaaaaiaaaaaa
aagabaaaaaaaaaaabbaaaaakbcaabaaaadaaaaaaegaobaaaadaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahicaabaaaacaaaaaaakaabaaa
adaaaaaadkaabaaaacaaaaaadhaaaaakicaabaaaacaaaaaadkaabaaaacaaaaaa
akiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaahbcaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaa
adaaaaaaeghobaaaagaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaafaaaaaa
egbcbaaaadaaaaaaeghobaaaahaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaa
akaabaaaadaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaa
adaaaaaadiaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaa
afaaaaaaaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlm
diaaaaaibcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaah
bcaabaaaadaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaia
ebaaaaaaadaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaaadaaaaaa
fgaobaaaadaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaai
ocaabaaaadaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaabaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaa
egaobaaaaeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
akaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Float 14 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 149 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c20, 0.25000000, 4.03944778, -0.94999999, 4.00000000
def c21, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c9.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c20.z
mad_sat r1.w, r1, c21.x, c21.y
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c10.x
mul r3.xy, v6, c9.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c17.y, c17.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c17.w
mad r3.w, r3.x, r2, c18.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c18.y
mad r2.w, r3, r2, c18.z
mul r1.xy, v6.zxzw, c10.x
mul r2.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c18.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c16.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c11.x
add_pp r2.xyz, -r1, c15.y
mul_sat r0.y, r0, c16.z
mad_pp r3.xyz, r0.y, r2, r1
abs r2.x, v6.y
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c19.x, c19.y
add r0.y, -r0.x, c15
mad r1.x, r0, c15.z, c15.w
mad r1.x, r0, r1, c16
mad r0.x, r0, r1, c16.y
add r1.y, -r2.x, c15
mad r1.w, r2.x, c15.z, c15
mad r1.w, r1, r2.x, c16.x
mad r1.w, r1, r2.x, c16.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.w, r1, r1.y
cmp r2.x, v6.y, c15, c15.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c15, c15.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c16.z, r0.y
mul r1.y, r2.x, r1.w
mad r0.y, -r1, c16.z, r1.w
mad r0.x, r1, c16.w, r0
mul r0.x, r0, c17
mad r0.y, r2.x, c16.w, r0
dsx r1.xy, v6
mul r1.xy, r1, r1
mul r1.w, r0.y, c17.x
dsx r2.w, r0.x
dsy r2.y, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c14.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r2.z, r0.y, c19.x
mul r2.x, r0, c19
texldd r4.xyz, r1.zwzw, s0, r2.zwzw, r2
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c14.x
add r3.w, v1, c19.z
frc r4.z, r3.w
texldd r2, r1.zwzw, s3, r2.zwzw, r2
add_sat r3.w, r3, -r4.z
texld r5, r4, s5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c14.x
texld r6, r0, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r1, r1, s4
add_pp r1, r1, -r4
mad_pp r1, r0.z, r1, r4
texld r4, r0, s4
add_pp r4, r4, -r1
mad_pp r1, r0.w, r4, r1
rcp r0.w, v4.w
mul_pp r2, r2, r1
mul_pp r0.xyz, r3, c8
mad r1.xy, v4, r0.w, c6
mad r3.xy, v4, r0.w, c5
texld r1.x, r1, s8
texld r3.x, r3, s8
mov r3.z, r3.x
mad r3.xy, v4, r0.w, c3
mov r3.w, r1.x
mad r1.xy, v4, r0.w, c4
texld r3.x, r3, s8
texld r1.x, r1, s8
mov r3.y, r1.x
mad r1, -v4.z, r0.w, r3
mov r0.w, c2.x
cmp r1, r1, c15.y, r0.w
dp4_pp r1.y, r1, c20.x
dp4 r3.x, c1, c1
rsq r0.w, r3.x
mul r3.xyz, r0.w, c1
dp3 r1.x, v3, v3
dp3_sat r1.w, v5, r3
rcp r0.w, v3.w
mad r3.xy, v3, r0.w, c19.y
texld r1.x, r1.x, s7
cmp r1.z, -v3, c15.x, c15.y
texld r0.w, r3, s6
mul_pp r0.w, r1.z, r0
mul_pp r0.w, r0, r1.x
mul_pp r1.x, r0.w, r1.y
add_pp r1.y, r1.w, c19.w
mul_pp r0.w, r1, c7
mul_pp r1.y, r1, c7.w
mul_pp r0.w, r1.x, r0
mul_pp r1.w, r1.y, r1.x
mov r1.x, c12
mul_pp_sat r0.w, r0, c20
add r1.xyz, c7, r1.x
mad_sat r1.xyz, r1, r0.w, c0
mul_pp r1.xyz, r1, c13.x
mad_pp r2.xyz, -r0, r1, r2
mul_pp_sat r0.w, r1, c20.y
add_pp r0.w, -r0, c15.y
mul_pp r0.xyz, r0, r1
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
Float 212 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 143 instructions, 7 temp regs, 0 temp arrays:
// ALU 111 float, 0 int, 5 uint
// TEX 18 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedahlbnfnaoagfodoimlpgicbibebhhoioabaaaaaaeibfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpibdaaaaeaaaaaaapoaeaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaa
ffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
anaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaaaoaaaaahhcaabaaa
adaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaaidcaabaaaafaaaaaa
egaabaaaadaaaaaaegiacaaaaaaaaaaaabaaaaaaefaaaaajpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaaaaaaaaaidcaabaaa
agaaaaaaegaabaaaadaaaaaaegiacaaaaaaaaaaaacaaaaaaefaaaaajpcaabaaa
agaaaaaaegaabaaaagaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaadgaaaaaf
ccaabaaaafaaaaaaakaabaaaagaaaaaaaaaaaaaidcaabaaaagaaaaaaegaabaaa
adaaaaaaegiacaaaaaaaaaaaadaaaaaaefaaaaajpcaabaaaagaaaaaaegaabaaa
agaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaadgaaaaafecaabaaaafaaaaaa
akaabaaaagaaaaaaaaaaaaaidcaabaaaadaaaaaaegaabaaaadaaaaaaegiacaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaagaaaaaaegaabaaaadaaaaaaeghobaaa
aiaaaaaaaagabaaaaaaaaaaadgaaaaaficaabaaaafaaaaaaakaabaaaagaaaaaa
dbaaaaahpcaabaaaadaaaaaaegaobaaaafaaaaaakgakbaaaadaaaaaadhaaaaan
pcaabaaaadaaaaaaegaobaaaadaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpbbaaaaakicaabaaaacaaaaaaegaobaaa
adaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaahdcaabaaa
adaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaadaaaaaa
egaabaaaadaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
dbaaaaahbcaabaaaadaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaa
adaaaaaadkaabaaaadaaaaaaakaabaaaadaaaaaabaaaaaahccaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaafgafbaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaakaabaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaa
diaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaajaaaaaa
aaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaai
bcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaahbcaabaaa
adaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaa
adaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
ajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakocaabaaaadaaaaaafgaobaaa
adaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaa
adaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaa
aeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaa
adaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_Albedo]
Float 14 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 149 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c20, 0.25000000, 4.03944778, -0.94999999, 4.00000000
def c21, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c9.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c20.z
mad_sat r1.w, r1, c21.x, c21.y
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c10.x
mul r3.xy, v6, c9.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c17.y, c17.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c17.w
mad r3.w, r3.x, r2, c18.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c18.y
mad r2.w, r3, r2, c18.z
mul r1.xy, v6.zxzw, c10.x
mul r2.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c18.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c16.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c11.x
add_pp r2.xyz, -r1, c15.y
mul_sat r0.y, r0, c16.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c19, c19.y
abs r1.w, v6.y
add r0.y, -r0.x, c15
mad r1.x, r0, c15.z, c15.w
mad r1.x, r0, r1, c16
mad r0.x, r0, r1, c16.y
add r1.y, -r1.w, c15
mad r1.z, r1.w, c15, c15.w
mad r1.z, r1, r1.w, c16.x
mad r1.z, r1, r1.w, c16.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c15.x, c15.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c15, c15.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c16.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c16.z, r1.z
mad r0.x, r1, c16.w, r0
mad r0.y, r1.w, c16.w, r0
mul r0.x, r0, c17
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c17.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c14.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c19.x
mul r2.z, r0.x, c19.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c14.x
add r3.w, v1, c19.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c14.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
rcp r1.w, v4.w
add_pp r4, r4, -r3
mad_pp r4, r0.w, r4, r3
mad r0.xyz, v4, r1.w, c6
texld r3.x, r0, s8
mul_pp r0, r2, r4
mad r2.xyz, v4, r1.w, c5
texld r2.x, r2, s8
mov_pp r2.w, r3.x
mad r3.xyz, v4, r1.w, c4
texld r3.x, r3, s8
mov_pp r2.y, r3.x
mad r3.xyz, v4, r1.w, c3
mov_pp r2.z, r2.x
texld r2.x, r3, s8
mov r1.w, c2.x
add r1.w, c15.y, -r1
mad r2, r2, r1.w, c2.x
dp4_pp r2.y, r2, c20.x
dp4 r3.x, c1, c1
rsq r1.w, r3.x
mul r3.xyz, r1.w, c1
dp3 r2.x, v3, v3
dp3_sat r2.w, v5, r3
rcp r1.w, v3.w
mad r3.xy, v3, r1.w, c19.y
mul_pp r1.xyz, r5, c8
texld r2.x, r2.x, s7
cmp r2.z, -v3, c15.x, c15.y
texld r1.w, r3, s6
mul_pp r1.w, r2.z, r1
mul_pp r1.w, r1, r2.x
mul_pp r2.x, r1.w, r2.y
add_pp r2.y, r2.w, c19.w
mul_pp r1.w, r2, c7
mul_pp r2.y, r2, c7.w
mul_pp r1.w, r2.x, r1
mul_pp r2.w, r2.y, r2.x
mov r2.x, c12
mul_pp_sat r1.w, r1, c20
add r2.xyz, c7, r2.x
mad_sat r2.xyz, r2, r1.w, c0
mul_pp r2.xyz, r2, c13.x
mad_pp r0.xyz, -r1, r2, r0
mul_pp_sat r1.w, r2, c20.y
add_pp r1.w, -r1, c15.y
mul_pp r1.xyz, r1, r2
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c15.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 224 // 216 used size, 12 vars
Vector 16 [_ShadowOffsets0] 4
Vector 32 [_ShadowOffsets1] 4
Vector 48 [_ShadowOffsets2] 4
Vector 64 [_ShadowOffsets3] 4
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_Albedo]
Float 212 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_LightTextureB0] 2D 2
SetTexture 8 [_ShadowMapTexture] 2D 0
// 140 instructions, 7 temp regs, 0 temp arrays:
// ALU 112 float, 0 int, 5 uint
// TEX 14 (0 load, 4 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfngcacahngdioanjpejciabbcmdomoflabaaaaaacibfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnibdaaaaeaaaaaaapgaeaaaafjaaaaaeegiocaaa
aaaaaaaaaoaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaiaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafibiaaaeaahabaaaahaaaaaa
ffffaaaafibiaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadpcbabaaa
adaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaamaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
anaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaanaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaaaaaaaaajicaabaaa
acaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpaoaaaaah
hcaabaaaadaaaaaaegbcbaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaaihcaabaaa
afaaaaaaegacbaaaadaaaaaaegiccaaaaaaaaaaaabaaaaaaehaaaaalbcaabaaa
afaaaaaaegaabaaaafaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaackaabaaa
afaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaaegiccaaaaaaaaaaa
acaaaaaaehaaaaalccaabaaaafaaaaaaegaabaaaagaaaaaaaghabaaaaiaaaaaa
aagabaaaaaaaaaaackaabaaaagaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaa
adaaaaaaegiccaaaaaaaaaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegiccaaaaaaaaaaaaeaaaaaaehaaaaalicaabaaaafaaaaaaegaabaaa
adaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaaehaaaaal
ecaabaaaafaaaaaaegaabaaaagaaaaaaaghabaaaaiaaaaaaaagabaaaaaaaaaaa
ckaabaaaagaaaaaadcaaaaakpcaabaaaadaaaaaaegaobaaaafaaaaaapgapbaaa
acaaaaaaagiacaaaacaaaaaabiaaaaaabbaaaaakicaabaaaacaaaaaaegaobaaa
adaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaahdcaabaaa
adaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaadaaaaaa
egaabaaaadaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaagaaaaaaaagabaaaabaaaaaa
dbaaaaahbcaabaaaadaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaa
adaaaaaadkaabaaaadaaaaaaakaabaaaadaaaaaabaaaaaahccaabaaaadaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaafgafbaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaacaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaadaaaaaaakaabaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaa
diaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaajaaaaaa
aaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaai
bcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaajaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaahbcaabaaa
adaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaa
adaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
ajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakocaabaaaadaaaaaafgaobaaa
adaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaa
adaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaa
aeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaa
adaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 148 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c20, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c19.y
mad_sat r1.w, r1, c19.z, c19
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c7.x
mul r3.xy, v6, c6.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c14.y, c14.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c14.w
mad r3.w, r3.x, r2, c15.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c15.y
mad r2.w, r3, r2, c15.z
mul r1.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c15.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c13.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c8.x
add_pp r2.xyz, -r1, c12.y
mul_sat r0.y, r0, c13.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c16, c16.y
abs r1.w, v6.y
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
add r1.y, -r1.w, c12
mad r1.z, r1.w, c12, c12.w
mad r1.z, r1, r1.w, c13.x
mad r1.z, r1, r1.w, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c12.x, c12.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c13.z, r1.z
mad r0.x, r1, c13.w, r0
mad r0.y, r1.w, c13.w, r0
mul r0.x, r0, c14
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c14.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c11.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c16.x
mul r2.z, r0.x, c16.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c11.x
add r3.w, v1, c16.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c11.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
add_pp r4, r4, -r3
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r1.w, r1.w
mad_pp r4, r0.w, r4, r3
add r0.xyz, v4, c17.xyyw
texld r3, r0, s6
mul_pp r0, r2, r4
add r2.xyz, v4, c17.yyxw
texld r4, r2, s6
dp4 r2.w, r3, c18
add r3.xyz, v4, c17.yxyw
texld r3, r3, s6
dp4 r2.z, r3, c18
add r3.xyz, v4, c17.x
texld r3, r3, s6
dp4 r2.x, r3, c18
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul_pp r1.xyz, r5, c5
mul r1.w, r1, c2
dp4 r2.y, r4, c18
mad r2, -r1.w, c17.z, r2
mov r1.w, c3.x
cmp r2, r2, c12.y, r1.w
dp4_pp r1.w, r2, c17.w
mul r3.xyz, r3.x, c1
dp3_sat r2.z, v5, r3
add_pp r2.y, r2.z, c16.w
dp3 r2.x, v3, v3
texld r2.x, r2.x, s7
mul r2.x, r2, r1.w
mul_pp r1.w, r2.z, c4
mul_pp r2.y, r2, c4.w
mul_pp r1.w, r2.x, r1
mul_pp r2.w, r2.y, r2.x
mov r2.x, c9
mul_pp_sat r1.w, r1, c20.x
add r2.xyz, c4, r2.x
mad_sat r2.xyz, r2, r1.w, c0
mul_pp r2.xyz, r2, c10.x
mad_pp r0.xyz, -r1, r2, r0
mul_pp_sat r1.w, r2, c19.x
add_pp r1.w, -r1, c12.y
mul_pp r1.xyz, r1, r2
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_DetailVertTex] 2D 4
SetTexture 2 [_DetailTex] 2D 3
SetTexture 3 [_CityOverlayTex] 2D 5
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 6
SetTexture 5 [_CityLightOverlayDetailTex] 2D 7
SetTexture 6 [_LightTexture0] 2D 1
SetTexture 7 [_ShadowMapTexture] CUBE 0
// 140 instructions, 6 temp regs, 0 temp arrays:
// ALU 113 float, 0 int, 4 uint
// TEX 17 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddibobmhphlgebdnefbinalplofgfjenfabaaaaaacibfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnibdaaaaeaaaaaaapgaeaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaa
aeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaaeaahabaaa
agaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaaffffaaaagcbaaaadbcbabaaa
abaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaa
diaaaaaipcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaa
aaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaa
abaaaaaaegbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaa
cgbebaaaagaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaa
agaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
apcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaa
dcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
aaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaia
ibaaaaaaagaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaia
ibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaa
abaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaa
abaaaaaackbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaa
abaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaa
abaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaa
abaaaaaaagbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
bcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaa
abaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlm
dagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdp
aaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaa
diaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaap
mcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaama
aaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaa
abaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaa
acaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaa
alaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaa
ckaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaan
pcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaacaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaa
aaaaaaaaajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaagaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaa
agaaaaaafgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaaafaaaaaa
egaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaa
agbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaaj
pcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaahaaaaaa
aaaaaaaipcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaa
acaaaaaaabeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaa
aaaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaah
icaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaa
acaaaaaadkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaomfbhidpaaaaaaakhcaabaaaadaaaaaaegbcbaaaaeaaaaaaaceaaaaa
aaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaadaaaaaaegacbaaa
adaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaadaaaaaa
egaobaaaadaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaak
hcaabaaaafaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaalmaaaaaadm
aaaaaaaaefaaaaajpcaabaaaafaaaaaaegacbaaaafaaaaaaeghobaaaahaaaaaa
aagabaaaaaaaaaaabbaaaaakccaabaaaadaaaaaaegaobaaaafaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaafaaaaaaegbcbaaa
aeaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaajpcaabaaa
afaaaaaaegacbaaaafaaaaaaeghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaak
ecaabaaaadaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
impinfdbaaaaaaakhcaabaaaafaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadm
aaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaaafaaaaaaegacbaaaafaaaaaa
eghobaaaahaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaadaaaaaaegaobaaa
afaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahpcaabaaa
adaaaaaaegaobaaaadaaaaaapgapbaaaacaaaaaadhaaaaanpcaabaaaadaaaaaa
egaobaaaadaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpbbaaaaakicaabaaaacaaaaaaegaobaaaadaaaaaaaceaaaaa
aaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahbcaabaaaadaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaaadaaaaaa
eghobaaaagaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaakaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaadiaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaa
diaaaaaiccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaa
aaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaai
bcaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaahbcaabaaa
adaaaaaadkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaaabeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaa
adaaaaaaabeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaa
afaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaaadaaaaaafgaobaaa
adaaaaaapgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaa
adaaaaaafgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaagaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaa
aeaaaaaaegaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaa
adaaaaaadkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 149 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 0.99000001, -0.01000214
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.03944778, -0.94999999, 32.00000000, 0.50000000
def c20, 4.00000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r1.xy, v6.zyzw, c7.x
mul r0.xy, v6.zyzw, c6.x
texld r0.xyz, r0, s2
texld r1.xyz, r1, s1
add r2.xyz, r0, -r1
mov r3.xyz, v6
dp3_sat r0.y, v2, -r3
add r1.w, r0.y, c19.y
mad_sat r1.w, r1, c19.z, c19
mad r2.xyz, r1.w, r2, r1
mul r1.xy, v6, c7.x
mul r3.xy, v6, c6.x
abs r0.zw, v6.xyxy
abs r0.x, v6.z
max r2.w, r0.z, r0.x
rcp r0.y, r2.w
min r2.w, r0.z, r0.x
mul r0.y, r2.w, r0
mul r2.w, r0.y, r0.y
mad r3.w, r2, c14.y, c14.z
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r1.w, r3, r1
mad r3.x, r3.w, r2.w, c14.w
mad r3.w, r3.x, r2, c15.x
add_pp r2.xyz, r2, -r1
mad_pp r3.xyz, r0.z, r2, r1
mad r3.w, r3, r2, c15.y
mad r2.w, r3, r2, c15.z
mul r1.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r1
mad r1.xyz, r1.w, r2, r1
mul r1.w, r2, r0.y
add_pp r1.xyz, r1, -r3
mad_pp r1.xyz, r0.w, r1, r3
add r2.x, r0.z, -r0
add r0.y, -r1.w, c15.w
cmp r1.w, -r2.x, r1, r0.y
add r0.y, -r1.w, c13.w
cmp r1.w, v6.z, r1, r0.y
mul r0.y, v0.x, c8.x
add_pp r2.xyz, -r1, c12.y
mul_sat r0.y, r0, c13.z
mad_pp r3.xyz, r0.y, r2, r1
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c16, c16.y
abs r1.w, v6.y
add r0.y, -r0.x, c12
mad r1.x, r0, c12.z, c12.w
mad r1.x, r0, r1, c13
mad r0.x, r0, r1, c13.y
add r1.y, -r1.w, c12
mad r1.z, r1.w, c12, c12.w
mad r1.z, r1, r1.w, c13.x
mad r1.z, r1, r1.w, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r1.z, r1, r1.y
cmp r1.w, v6.y, c12.x, c12.y
mul r0.y, r0.x, r0
cmp r1.x, v6.z, c12, c12.y
mul r0.x, r1, r0.y
mad r0.x, -r0, c13.z, r0.y
mul r1.y, r1.w, r1.z
mad r0.y, -r1, c13.z, r1.z
mad r0.x, r1, c13.w, r0
mad r0.y, r1.w, c13.w, r0
mul r0.x, r0, c14
dsx r1.xy, v6
mul r1.xy, r1, r1
dsx r1.w, r0.x
mul r2.y, r0, c14.x
dsy r2.w, r0.x
dsy r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r1.x, r1, r1.y
rsq r0.y, r1.x
rcp r0.y, r0.y
mul r1.xy, v6.zyzw, c11.x
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r1.z, r0.y, c16.x
mul r2.z, r0.x, c16.x
texldd r4.xyz, r2, s0, r1.zwzw, r2.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c11.x
add r3.w, v1, c16.z
frc r4.z, r3.w
texldd r2, r2, s3, r1.zwzw, r2.zwzw
add_sat r3.w, r3, -r4.z
texld r6, r1, s5
texld r5, r4, s5
add_pp r6, r6, -r5
mul_pp r2.w, r2, r3
mad_pp r5, r0.z, r6, r5
mul r0.xy, v6.zxzw, c11.x
texld r6, r0, s5
add_pp r6, r6, -r5
mad_pp r5, r0.w, r6, r5
mul_pp r5, r2, r5
mul r3.xyz, v1, r3
add_pp r5.xyz, r5, -r3
mad_pp r5.xyz, r5.w, r5, r3
texld r1, r1, s4
texld r3, r4, s4
add_pp r4, r1, -r3
mad_pp r3, r0.z, r4, r3
texld r4, r0, s4
add_pp r4, r4, -r3
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r1.w, r1.w
mad_pp r4, r0.w, r4, r3
add r0.xyz, v4, c17.xyyw
texld r3, r0, s6
mul_pp r0, r2, r4
add r2.xyz, v4, c17.yyxw
texld r4, r2, s6
dp4 r2.w, r3, c18
add r3.xyz, v4, c17.yxyw
texld r3, r3, s6
dp4 r2.z, r3, c18
add r3.xyz, v4, c17.x
texld r3, r3, s6
dp4 r2.x, r3, c18
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul_pp r1.xyz, r5, c5
mul r1.w, r1, c2
dp4 r2.y, r4, c18
mad r2, -r1.w, c17.z, r2
mov r1.w, c3.x
cmp r2, r2, c12.y, r1.w
dp4_pp r2.y, r2, c17.w
mul r3.xyz, r3.x, c1
dp3 r2.x, v3, v3
dp3_sat r2.z, v5, r3
texld r2.x, r2.x, s7
texld r1.w, v3, s8
mul r1.w, r2.x, r1
mul r2.x, r1.w, r2.y
add_pp r2.y, r2.z, c16.w
mul_pp r1.w, r2.z, c4
mul_pp r2.y, r2, c4.w
mul_pp r1.w, r2.x, r1
mul_pp r2.w, r2.y, r2.x
mov r2.x, c9
mul_pp_sat r1.w, r1, c20.x
add r2.xyz, c4, r2.x
mad_sat r2.xyz, r2, r1.w, c0
mul_pp r2.xyz, r2, c10.x
mad_pp r0.xyz, -r1, r2, r0
mul_pp_sat r1.w, r2, c19.x
add_pp r1.w, -r1, c12.y
mul_pp r1.xyz, r1, r2
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 160 // 152 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_Albedo]
Float 148 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 384 [_LightShadowData] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityShadows" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 3
SetTexture 1 [_DetailVertTex] 2D 5
SetTexture 2 [_DetailTex] 2D 4
SetTexture 3 [_CityOverlayTex] 2D 6
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 7
SetTexture 5 [_CityLightOverlayDetailTex] 2D 8
SetTexture 6 [_LightTextureB0] 2D 2
SetTexture 7 [_LightTexture0] CUBE 1
SetTexture 8 [_ShadowMapTexture] CUBE 0
// 142 instructions, 6 temp regs, 0 temp arrays:
// ALU 114 float, 0 int, 4 uint
// TEX 18 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpddpofdddgddkiojliobhmkkhjlpfhpmabaaaaaaiebfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaapapaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdebeaaaaeaaaaaaaanafaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fkaaaaadaagabaaaagaaaaaafkaaaaadaagabaaaahaaaaaafkaaaaadaagabaaa
aiaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaafibiaaaeaahabaaaagaaaaaaffffaaaafidaaaaeaahabaaaahaaaaaa
ffffaaaafidaaaaeaahabaaaaiaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadpcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadiaaaaai
pcaabaaaaaaaaaaaggbcbaaaagaaaaaaagiacaaaaaaaaaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
efaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaagaaaaaaagifcaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaa
aagabaaaafaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaa
egbcbaiaebaaaaaaagaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaa
agaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaefaaaaajpcaabaaaadaaaaaa
egaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaafaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaak
hcaabaaaabaaaaaaagbabaiaibaaaaaaagaaaaaaegacbaaaabaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaagaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaai
icaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaaaiaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaa
deaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaa
agaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaa
agaaaaaaakbabaiaibaaaaaaagaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaackbabaiaibaaaaaaagaaaaaaakbabaiaibaaaaaaagaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgbfbaaaagaaaaaajgbfbaiaebaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaa
ckbabaaaagaaaaaaakbabaaaagaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaa
agaaaaaaakbabaaaagaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaa
agbebaaaagaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
aeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaa
fgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlm
aceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaa
kgaobaaaabaaaaaafgbjbaiaibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
iedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaia
ibaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaal
mcaabaaaadaaaaaafgbjbaiambaaaaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaah
mcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaa
aeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaama
aceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaa
egaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaa
agabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaaf
ccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
acaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
acaaaaaadiaaaaaidcaabaaaabaaaaaaegbabaaaagaaaaaafgifcaaaaaaaaaaa
ajaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaafaaaaaa
aagabaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaahaaaaaadiaaaaaipcaabaaaaeaaaaaaggbcbaaaagaaaaaa
fgifcaaaaaaaaaaaajaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaaaeaaaaaa
eghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaaipcaabaaaafaaaaaaegaobaia
ebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaia
ibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaadaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaafaaaaaaaagabaaaaiaaaaaaaaaaaaai
pcaabaaaafaaaaaaegaobaiaebaaaaaaadaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaa
adaaaaaadcaaaaakhcaabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkbabaaaacaaaaaa
abeaaaaakehahndpebcaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabaaaaaahicaabaaa
acaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkiacaaa
abaaaaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
omfbhidpaaaaaaakhcaabaaaadaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadm
aaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaadaaaaaaegacbaaaadaaaaaa
eghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaadaaaaaaegaobaaa
adaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaa
afaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaalmaaaaaalmaaaaaadmaaaaaaaa
efaaaaajpcaabaaaafaaaaaaegacbaaaafaaaaaaeghobaaaaiaaaaaaaagabaaa
aaaaaaaabbaaaaakccaabaaaadaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadp
ibiaiadlicabibdhimpinfdbaaaaaaakhcaabaaaafaaaaaaegbcbaaaaeaaaaaa
aceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaajpcaabaaaafaaaaaa
egacbaaaafaaaaaaeghobaaaaiaaaaaaaagabaaaaaaaaaaabbaaaaakecaabaaa
adaaaaaaegaobaaaafaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhimpinfdb
aaaaaaakhcaabaaaafaaaaaaegbcbaaaaeaaaaaaaceaaaaaaaaaaadmaaaaaalm
aaaaaalmaaaaaaaaefaaaaajpcaabaaaafaaaaaaegacbaaaafaaaaaaeghobaaa
aiaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaadaaaaaaegaobaaaafaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhimpinfdbdbaaaaahpcaabaaaadaaaaaa
egaobaaaadaaaaaapgapbaaaacaaaaaadhaaaaanpcaabaaaadaaaaaaegaobaaa
adaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpbbaaaaakicaabaaaacaaaaaaegaobaaaadaaaaaaaceaaaaaaaaaiado
aaaaiadoaaaaiadoaaaaiadobaaaaaahbcaabaaaadaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaefaaaaajpcaabaaaadaaaaaaagaabaaaadaaaaaaeghobaaa
agaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaafaaaaaaegbcbaaaadaaaaaa
eghobaaaahaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
adaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
akaabaaaadaaaaaabbaaaaajbcaabaaaadaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaa
diaaaaaihcaabaaaadaaaaaaagaabaaaadaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahbcaabaaaadaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaadiaaaaai
ccaabaaaadaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaaaaaaaaah
bcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhcdlmdiaaaaaibcaabaaa
adaaaaaaakaabaaaadaaaaaadkiacaaaaaaaaaaaafaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaadaaaaaaabeaaaaapnekibeadicaaaahbcaabaaaadaaaaaa
dkaabaaaacaaaaaaakaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaabkaabaaaadaaaaaadicaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaiaeaaaaaaaaibcaabaaaadaaaaaaakaabaiaebaaaaaaadaaaaaa
abeaaaaaaaaaiadpaaaaaaajocaabaaaadaaaaaaagijcaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakocaabaaaadaaaaaafgaobaaaadaaaaaa
pgapbaaaacaaaaaaagijcaaaadaaaaaaaeaaaaaadiaaaaaiocaabaaaadaaaaaa
fgaobaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaajgahbaaaadaaaaaaefaaaaajpcaabaaaafaaaaaaegaabaaa
aeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaahaaaaaaaaaaaaaipcaabaaa
afaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
abaaaaaaagbabaiaibaaaaaaagaaaaaaegaobaaaafaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaagaaaaaaegaobaaaaeaaaaaa
egaobaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaa
dkaabaaaaaaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 184

	
		}
		
		Pass {
            Tags {"LightMode" = "ForwardAdd"} 
            Blend One One                                      
            Program "vp" {
// Vertex combos: 5
//   opengl - ALU: 10 to 19
//   d3d9 - ALU: 12 to 21
//   d3d11 - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
//   d3d11_9x - ALU: 8 to 17, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = texture2D (_LightTexture0, vec2(tmpvar_4)).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 9 [_WorldSpaceLightPos0]
Matrix 5 [_World2Object]
"!!ARBvp1.0
# 10 ALU
PARAM c[10] = { program.local[0],
		state.matrix.mvp,
		program.local[5..9] };
TEMP R0;
MOV R0, c[9];
DP4 result.texcoord[2].z, R0, c[7];
DP4 result.texcoord[2].y, R0, c[6];
DP4 result.texcoord[2].x, R0, c[5];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 10 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"vs_2_0
; 12 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c6
dp4 oT2.z, c8, r0
mov r0, c5
mov r1, c4
dp4 oT2.y, c8, r0
dp4 oT2.x, c8, r1
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhlffamgibkghgdhcndobnoaidcnlmladabaaaaaafiadaaaaadaaaaaa
cmaaaaaalmaaaaaafmabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
jiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
peabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaaaaaaaaaaabaaaaaafjaaaaae
egiocaaaabaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaa
aeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaaaaaaaaaaaaaaaaaegiccaaa
abaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabaaaaaaa
agiacaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaabaaaaaabcaaaaaakgikcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegiccaaaabaaaaaabdaaaaaapgipcaaaaaaaaaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_4;
  tmpvar_4 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_4;
  highp vec3 tmpvar_5;
  tmpvar_5 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * 2.0);
  c_1.xyz = tmpvar_5;
  highp float tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_6;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceLightPos0]
Matrix 4 [_World2Object]
"agal_vs
[bc]
aaaaaaaaaaaaapacagaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c6
bdaaaaaaacaaaeaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c8, r0
aaaaaaaaaaaaapacafaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c5
aaaaaaaaabaaapacaeaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c4
bdaaaaaaacaaacaeaiaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c8, r0
bdaaaaaaacaaabaeaiaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c8, r1
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 256 [_World2Object] 4
BindCB "UnityLighting" 0
BindCB "UnityPerDraw" 1
// 11 instructions, 1 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedjnmaggkionlfmiffnkeilonkceebjlmlabaaaaaaliaeaaaaaeaaaaaa
daaaaaaaimabaaaaiiadaaaabiaeaaaaebgpgodjfeabaaaafeabaaaaaaacpopp
aiabaaaaemaaaaaaadaaceaaaaaaeiaaaaaaeiaaaaaaceaaabaaeiaaaaaaaaaa
abaaabaaaaaaaaaaabaaaaaaaeaaacaaaaaaaaaaabaabaaaaeaaagaaaaaaaaaa
aaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapjabpaaaaacafaaabiaabaaapja
bpaaaaacafaaaciaacaaapjaabaaaaacaaaaapiaabaaoekaafaaaaadabaaahia
aaaaffiaahaaoekaaeaaaaaeabaaahiaagaaoekaaaaaaaiaabaaoeiaaeaaaaae
aaaaahiaaiaaoekaaaaakkiaabaaoeiaaeaaaaaeabaaahoaajaaoekaaaaappia
aaaaoeiaafaaaaadaaaaapiaaaaaffjaadaaoekaaeaaaaaeaaaaapiaacaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaeaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaafaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoeka
aaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaac
adaaapoaabaaoejappppaaaafdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaae
egiocaaaaaaaaaaaabaaaaaafjaaaaaeegiocaaaabaaaaaabeaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaaaaaaaaaaaaaaaaaegiccaaaabaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaabaaaaaabaaaaaaaagiacaaaaaaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaabaaaaaabcaaaaaakgikcaaa
aaaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
abaaaaaabdaaaaaapgipcaaaaaaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaa
abaaaaaadoaaaaabejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
hoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdejfeejepeo
aaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheojiaaaaaa
afaaaaaaaiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
imaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaaimaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahaiaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaiaaaaimaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaa
fdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 332
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 336
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    #line 340
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 color;
};
#line 315
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 332
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 344
#line 344
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = 1.0;
    #line 348
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 352
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 19 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].w, R0, c[16];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 19 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 21 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.w, r0, c15
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddiemkimndippbbnjeipihbehkfmhcbkpabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadpccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegaobaaaabaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float atten_4;
  lowp vec4 tmpvar_5;
  highp vec2 P_6;
  P_6 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_5 = texture2D (_LightTexture0, P_6);
  highp float tmpvar_7;
  tmpvar_7 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_LightTextureB0, vec2(tmpvar_7));
  highp float tmpvar_9;
  tmpvar_9 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_5.w) * tmpvar_8.w);
  atten_4 = tmpvar_9;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_10;
  tmpvar_10 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (atten_4 * 2.0));
  c_1.xyz = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_12;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaiaeaaaaaaoeacaaaaaaapaaaaoeabaaaaaa dp4 v3.w, r0, c15
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedeikidmidnabnlgbjbikkomfoibegjdckabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaapiaaaaaffiaacaaoeka
aeaaaaaeabaaapiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeabaaapiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaapoaaeaaoekaaaaappiaabaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
aeaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapaaaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 344
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 348
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    #line 353
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 334
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 color;
};
#line 326
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 344
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 357
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 357
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 361
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 365
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Vector 18 [unity_Scale]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 18 ALU
PARAM c[19] = { program.local[0],
		state.matrix.mvp,
		program.local[5..18] };
TEMP R0;
TEMP R1;
MOV R1, c[17];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, R1, c[11];
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
MAD result.texcoord[2].xyz, R0, c[18].w, -vertex.position;
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].z, R0, c[15];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 18 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 20 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 r2.z, c16, r0
mov r0, c9
dp4 r2.y, c16, r0
mov r1, c8
dp4 r2.x, c16, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mad oT2.xyz, r2, c17.w, -v0
dp4 oT3.z, r0, c14
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmjjpegplcgemohadockdciemelndpjpbabaaaaaaoiaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmadaaaaeaaaabaa
nlaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaalhccabaaaacaaaaaaegacbaaaaaaaaaaapgipcaaaacaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaadgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafpccabaaaafaaaaaaegbobaaa
abaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz);
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  highp float tmpvar_4;
  tmpvar_4 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_5;
  tmpvar_5 = (texture2D (_LightTextureB0, vec2(tmpvar_4)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_6;
  tmpvar_6 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_5 * 2.0));
  c_1.xyz = tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_8;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 17 [unity_Scale]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacacbaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 r2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaacaaabacbaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 r2.x, c16, r1
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
adaaaaaaabaaahacacaaaakeacaaaaaabbaaaappabaaaaaa mul r1.xyz, r2.xyzz, c17.w
acaaaaaaacaaahaeabaaaakeacaaaaaaaaaaaaoeaaaaaaaa sub v2.xyz, r1.xyzz, a0
bdaaaaaaadaaaeaeaaaaaaoeacaaaaaaaoaaaaoeabaaaaaa dp4 v3.z, r0, c14
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.w, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 20 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedakhailhlejdgcnafjjmlpemddlfdopddabaaaaaaaaahaaaaaeaaaaaa
daaaaaaaeeacaaaaliafaaaaeiagaaaaebgpgodjamacaaaaamacaaaaaaacpopp
leabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaajaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
aaaaahiabbaaoekaaaaappiaaaaaoeiaaeaaaaaeabaaahoaaaaaoeiabcaappka
aaaaoejbafaaaaadaaaaapiaaaaaffjaalaaoekaaeaaaaaeaaaaapiaakaaoeka
aaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoekaaaaakkjaaaaaoeiaaeaaaaae
aaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaadabaaahiaaaaaffiaacaaoeka
aeaaaaaeabaaahiaabaaoekaaaaaaaiaabaaoeiaaeaaaaaeaaaaahiaadaaoeka
aaaakkiaabaaoeiaaeaaaaaeadaaahoaaeaaoekaaaaappiaaaaaoeiaafaaaaad
aaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapiaagaaoekaaaaaaajaaaaaoeia
aeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeiaaeaaaaaeaaaaapiaajaaoeka
aaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappiaaaaaoekaaaaaoeiaabaaaaac
aaaaammaaaaaoeiaabaaaaacacaaahoaacaaoejaabaaaaacaeaaapoaabaaoeja
ppppaaaafdeieefcgmadaaaaeaaaabaanlaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabdaaaaaapgipcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegacbaaa
aaaaaaaapgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafpccabaaaafaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaa
keaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
afaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 336
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 340
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    #line 345
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec4 color;
};
#line 318
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 349
#line 349
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 353
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 357
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Vector 17 [_WorldSpaceLightPos0]
Matrix 5 [_Object2World]
Matrix 9 [_World2Object]
Matrix 13 [_LightMatrix0]
"!!ARBvp1.0
# 16 ALU
PARAM c[18] = { program.local[0],
		state.matrix.mvp,
		program.local[5..17] };
TEMP R0;
MOV R0, c[17];
DP4 result.texcoord[2].z, R0, c[11];
DP4 result.texcoord[2].y, R0, c[10];
DP4 result.texcoord[2].x, R0, c[9];
DP4 R0.w, vertex.position, c[8];
DP4 R0.z, vertex.position, c[7];
DP4 R0.x, vertex.position, c[5];
DP4 R0.y, vertex.position, c[6];
DP4 result.texcoord[3].y, R0, c[14];
DP4 result.texcoord[3].x, R0, c[13];
MOV result.texcoord[5], vertex.color;
MOV result.texcoord[1].xyz, vertex.normal;
DP4 result.position.w, vertex.position, c[4];
DP4 result.position.z, vertex.position, c[3];
DP4 result.position.y, vertex.position, c[2];
DP4 result.position.x, vertex.position, c[1];
END
# 16 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_2_0
; 18 ALU
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
mov r0, c10
dp4 oT2.z, c16, r0
mov r0, c9
dp4 oT2.y, c16, r0
mov r1, c8
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 oT2.x, c16, r1
dp4 oT3.y, r0, c13
dp4 oT3.x, r0, c12
mov oT5, v1
mov oT1.xyz, v2
dp4 oPos.w, v0, c3
dp4 oPos.z, v0, c2
dp4 oPos.y, v0, c1
dp4 oPos.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddmhacdconjpjameeinopjabeejblfbnhabaaaaaalmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaaaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadapaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefceaadaaaaeaaaabaa
naaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaa
abaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaak
mccabaaaabaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = (_World2Object * _WorldSpaceLightPos0).xyz;
  xlv_TEXCOORD1 = normalize(_glesNormal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
void main ()
{
  lowp vec4 c_1;
  lowp float diff_2;
  lowp vec3 normal_3;
  lowp float tmpvar_4;
  tmpvar_4 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  normal_3 = xlv_TEXCOORD1;
  highp float tmpvar_5;
  tmpvar_5 = clamp (dot (normal_3, normalize(xlv_TEXCOORD2)), 0.0, 1.0);
  diff_2 = tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = (((xlv_TEXCOORD5.xyz * _LightColor0.xyz) * diff_2) * (tmpvar_4 * 2.0));
  c_1.xyz = tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD5.w;
  c_1.w = tmpvar_7;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"agal_vs
[bc]
aaaaaaaaaaaaapacakaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c10
bdaaaaaaacaaaeaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.z, c16, r0
aaaaaaaaaaaaapacajaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r0, c9
bdaaaaaaacaaacaebaaaaaoeabaaaaaaaaaaaaoeacaaaaaa dp4 v2.y, c16, r0
aaaaaaaaabaaapacaiaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov r1, c8
bdaaaaaaaaaaaiacaaaaaaoeaaaaaaaaahaaaaoeabaaaaaa dp4 r0.w, a0, c7
bdaaaaaaaaaaaeacaaaaaaoeaaaaaaaaagaaaaoeabaaaaaa dp4 r0.z, a0, c6
bdaaaaaaaaaaabacaaaaaaoeaaaaaaaaaeaaaaoeabaaaaaa dp4 r0.x, a0, c4
bdaaaaaaaaaaacacaaaaaaoeaaaaaaaaafaaaaoeabaaaaaa dp4 r0.y, a0, c5
bdaaaaaaacaaabaebaaaaaoeabaaaaaaabaaaaoeacaaaaaa dp4 v2.x, c16, r1
bdaaaaaaadaaacaeaaaaaaoeacaaaaaaanaaaaoeabaaaaaa dp4 v3.y, r0, c13
bdaaaaaaadaaabaeaaaaaaoeacaaaaaaamaaaaoeabaaaaaa dp4 v3.x, r0, c12
aaaaaaaaafaaapaeacaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v5, a2
aaaaaaaaabaaahaeabaaaaoeaaaaaaaaaaaaaaaaaaaaaaaa mov v1.xyz, a1
bdaaaaaaaaaaaiadaaaaaaoeaaaaaaaaadaaaaoeabaaaaaa dp4 o0.w, a0, c3
bdaaaaaaaaaaaeadaaaaaaoeaaaaaaaaacaaaaoeabaaaaaa dp4 o0.z, a0, c2
bdaaaaaaaaaaacadaaaaaaoeaaaaaaaaabaaaaoeabaaaaaa dp4 o0.y, a0, c1
bdaaaaaaaaaaabadaaaaaaoeaaaaaaaaaaaaaaoeabaaaaaa dp4 o0.x, a0, c0
aaaaaaaaabaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v1.w, c0
aaaaaaaaacaaaiaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v2.w, c0
aaaaaaaaadaaamaeaaaaaaoeabaaaaaaaaaaaaaaaaaaaaaa mov v3.zw, c0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
ConstBuffer "$Globals" 112 // 80 used size, 4 vars
Matrix 16 [_LightMatrix0] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 320 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerDraw" 2
// 19 instructions, 2 temp regs, 0 temp arrays:
// ALU 16 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0_level_9_1
eefiecedfdghapkdldpokkagfeafamaifeehnmmfabaaaaaamaagaaaaaeaaaaaa
daaaaaaadaacaaaahiafaaaaaiagaaaaebgpgodjpiabaaaapiabaaaaaaacpopp
kaabaaaafiaaaaaaaeaaceaaaaaafeaaaaaafeaaaaaaceaaabaafeaaaaaaabaa
aeaaabaaaaaaaaaaabaaaaaaabaaafaaaaaaaaaaacaaaaaaaeaaagaaaaaaaaaa
acaaamaaaiaaakaaaaaaaaaaaaaaaaaaaaacpoppbpaaaaacafaaaaiaaaaaapja
bpaaaaacafaaabiaabaaapjabpaaaaacafaaaciaacaaapjaabaaaaacaaaaapia
afaaoekaafaaaaadabaaahiaaaaaffiaapaaoekaaeaaaaaeabaaahiaaoaaoeka
aaaaaaiaabaaoeiaaeaaaaaeaaaaahiabaaaoekaaaaakkiaabaaoeiaaeaaaaae
abaaahoabbaaoekaaaaappiaaaaaoeiaafaaaaadaaaaapiaaaaaffjaalaaoeka
aeaaaaaeaaaaapiaakaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaamaaoeka
aaaakkjaaaaaoeiaaeaaaaaeaaaaapiaanaaoekaaaaappjaaaaaoeiaafaaaaad
abaaadiaaaaaffiaacaaobkaaeaaaaaeaaaaadiaabaaobkaaaaaaaiaabaaoeia
aeaaaaaeaaaaadiaadaaobkaaaaakkiaaaaaoeiaaeaaaaaeaaaaamoaaeaabeka
aaaappiaaaaaeeiaafaaaaadaaaaapiaaaaaffjaahaaoekaaeaaaaaeaaaaapia
agaaoekaaaaaaajaaaaaoeiaaeaaaaaeaaaaapiaaiaaoekaaaaakkjaaaaaoeia
aeaaaaaeaaaaapiaajaaoekaaaaappjaaaaaoeiaaeaaaaaeaaaaadmaaaaappia
aaaaoekaaaaaoeiaabaaaaacaaaaammaaaaaoeiaabaaaaacacaaahoaacaaoeja
abaaaaacadaaapoaabaaoejappppaaaafdeieefceaadaaaaeaaaabaanaaaaaaa
fjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaabeaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadmccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacacaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaajhcaabaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaa
abaaaaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaalhccabaaaacaaaaaaegiccaaa
acaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaadaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaa
aaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakmccabaaa
abaaaaaaagiecaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaagaebaaaaaaaaaaa
dgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaabejfdeheoiiaaaaaa
aeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaa
hbaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaafeeb
eoehefeofeaaklklepfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadapaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaaamadaaaa
keaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaakeaaaaaaabaaaaaa
aaaaaaaaadaaaaaaadaaaaaaahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaa
aeaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklkl
"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 335
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 339
    o.lightDir = ObjSpaceLightDir( v.vertex);
    o.color = v.color;
    o.normal = v.normal;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    #line 344
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.uv);
    xlv_TEXCOORD2 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD1 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct v2f {
    highp vec4 pos;
    highp vec2 uv;
    highp vec3 lightDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 color;
};
#line 317
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
#line 348
#line 348
lowp vec4 frag( in v2f IN ) {
    IN.lightDir = normalize(IN.lightDir);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 352
    lowp vec3 normal = IN.normal;
    lowp float diff = xll_saturate_f(dot( normal, IN.lightDir));
    lowp vec4 c;
    c.xyz = (((IN.color.xyz * _LightColor0.xyz) * diff) * (atten * 2.0));
    #line 356
    c.w = IN.color.w;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.uv = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD2);
    xlt_IN.normal = vec3(xlv_TEXCOORD1);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 5
//   opengl - ALU: 8 to 17, TEX: 0 to 2
//   d3d9 - ALU: 9 to 17, TEX: 1 to 2
//   d3d11 - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
//   d3d11_9x - ALU: 7 to 14, TEX: 0 to 2, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 11 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
END
# 11 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 12 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
texld r0, r0, s0
mul_pp r0.x, r0, c1
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbioionpndiclbpbkjhaodjppefcaogpfabaaaaaammacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefckmabaaaa
eaaaaaaaglaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaa
abaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaah
icaabaaaaaaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaaaaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r0, r0.xyyy, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 12 instructions, 2 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedalemgnichmemlepajpfbeadidmiehekdabaaaaaapaadaaaaaeaaaaaa
daaaaaaafaabaaaaaeadaaaalmadaaaaebgpgodjbiabaaaabiabaaaaaaacpppp
oeaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaac
aaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaiaaeaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaaeaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaaiaaaaadaaaaaiiaadaaoelaadaaoelaabaaaaacabaaadia
aaaappiaecaaaaadabaacpiaabaaoeiaaaaioekaacaaaaadaaaaaiiaabaaaaia
abaaaaiaafaaaaadaaaachiaaaaappiaaaaaoeiaabaaaaacaaaaciiaaeaappla
abaaaaacaaaicpiaaaaaoeiappppaaaafdeieefckmabaaaaeaaaaaaaglaaaaaa
fjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaa
aaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaabejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaa
adaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaa
adaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"!!ARBfp1.0
# 8 ALU, 0 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R0.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.w, fragment.texcoord[1], R0;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, c[1].x;
MOV result.color.w, fragment.texcoord[5];
END
# 8 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"ps_2_0
; 9 ALU
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t5
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r0.xyz, r0.x, t2
dp3_pp_sat r0.x, t1, r0
mul r1.xyz, t5, c0
mul r0.xyz, r1, r0.x
mul r0.xyz, r0, c1.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedloieipnbkbffnjnmagdbeekmebefinkdabaaaaaadaacaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcciabaaaaeaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL" }
Vector 0 [_LightColor0]
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaaaaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r0.xyz, r0.x, v2
bcaaaaaaaaaaabacabaaaaoeaeaaaaaaaaaaaakeacaaaaaa dp3 r0.x, v1, r0.xyzz
bgaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r0.x, r0.x
adaaaaaaabaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r1.xyz, v5, c0
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
adaaaaaaaaaaahacaaaaaakeacaaaaaaabaaaaaaabaaaaaa mul r0.xyz, r0.xyzz, c1.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL" }
ConstBuffer "$Globals" 48 // 48 used size, 3 vars
Vector 32 [_LightColor0] 4
BindCB "$Globals" 0
// 9 instructions, 1 temp regs, 0 temp arrays:
// ALU 7 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedhmbgndkhekjafmbnlllfoeplpaliaonaabaaaaaapmacaaaaaeaaaaaa
daaaaaaapiaaaaaaciacaaaamiacaaaaebgpgodjmaaaaaaamaaaaaaaaaacpppp
jaaaaaaadaaaaaaaabaaceaaaaaadaaaaaaadaaaaaaaceaaaaaadaaaaaaaacaa
abaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaacplaceaaaaacaaaaahiaabaaoelaaiaaaaad
aaaadbiaacaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaad
aaaaahiaaaaaaaiaaaaabliaacaaaaadaaaachiaaaaaoeiaaaaaoeiaabaaaaac
aaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaafdeieefcciabaaaa
eaaaaaaaekaaaaaafjaaaaaeegiocaaaaaaaaaaaadaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacabaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaabacaaaah
bcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaacaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaaaaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaa
aeaaaaaadoaaaaabejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaaaaaaaaaa
abaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
abaaaaaaadaaaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaa
imaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaaafaaaaaa
aaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"!!ARBfp1.0
# 17 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 0, 0.5, 2 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.z, fragment.texcoord[3], fragment.texcoord[3];
RCP R0.x, fragment.texcoord[3].w;
MAD R0.xy, fragment.texcoord[3], R0.x, c[1].y;
SLT R2.x, c[1], fragment.texcoord[3].z;
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0, texture[0], 2D;
TEX R1.w, R0.z, texture[1], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1].z;
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 17 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"ps_2_0
; 17 ALU, 2 TEX
dcl_2d s0
dcl_2d s1
def c1, 0.50000000, 0.00000000, 1.00000000, 2.00000000
dcl t2.xyz
dcl t1.xyz
dcl t3
dcl t5
rcp r1.x, t3.w
mad r2.xy, t3, r1.x, c1.x
dp3 r0.x, t3, t3
mov r1.xy, r0.x
texld r0, r2, s0
texld r2, r1, s1
cmp r0.x, -t3.z, c1.y, c1.z
mul_pp r0.x, r0, r0.w
mul_pp r0.x, r0, r2
dp3 r1.x, t2, t2
rsq r1.x, r1.x
mul r1.xyz, r1.x, t2
mul_pp r0.x, r0, c1.w
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednbeijpebpeecdfmohlgldkeeefgcibieabaaaaaakeadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcieacaaaa
eaaaaaaakbaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaa
egbabaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaah
bcaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaa
aaaaaaaaagaabaaaabaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaah
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaa
aaaaaaaaegbcbaaaadaaaaaajgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaaaaaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaa
fgafbaaaaaaaaaaaagajbaaaabaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaa
aaaaaaaajgahbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "SPOT" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
SetTexture 1 [_LightTextureB0] 2D
"agal_ps
c1 0.5 0.0 1.0 2.0
[bc]
afaaaaaaabaaabacadaaaappaeaaaaaaaaaaaaaaaaaaaaaa rcp r1.x, v3.w
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
adaaaaaaabaaadacadaaaaoeaeaaaaaaabaaaaaaacaaaaaa mul r1.xy, v3, r1.x
abaaaaaaabaaadacabaaaafeacaaaaaaabaaaaaaabaaaaaa add r1.xy, r1.xyyy, c1.x
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacabaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r1.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacaaaaaafeacaaaaaaabaaaaaaafaababb tex r0, r0.xyyy, s1 <2d wrap linear point>
bfaaaaaaacaaaiacadaaaakkaeaaaaaaaaaaaaaaaaaaaaaa neg r2.w, v3.z
ckaaaaaaaaaaabacacaaaappacaaaaaaabaaaaffabaaaaaa slt r0.x, r2.w, c1.y
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappacaaaaaa mul r0.x, r0.x, r1.w
adaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaappacaaaaaa mul r0.x, r0.x, r0.w
bcaaaaaaabaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r1.x, v2, v2
akaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r1.x
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaappabaaaaaa mul r0.x, r0.x, c1.w
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "SPOT" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
// 18 instructions, 2 temp regs, 0 temp arrays:
// ALU 13 float, 0 int, 1 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecediebbibeaffknnoffjkdbkppjakhalgobabaaaaaaeeafaaaaaeaaaaaa
daaaaaaammabaaaafiaeaaaabaafaaaaebgpgodjjeabaaaajeabaaaaaaacpppp
fmabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaaaaaaaaa
abababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppfbaaaaafabaaapkaaaaaaadp
aaaaaaaaaaaaaaaaaaaaaaaabpaaaaacaaaaaaiaabaaahlabpaaaaacaaaaaaia
acaachlabpaaaaacaaaaaaiaadaaaplabpaaaaacaaaaaaiaaeaacplabpaaaaac
aaaaaajaaaaiapkabpaaaaacaaaaaajaabaiapkaagaaaaacaaaaaiiaadaappla
aeaaaaaeaaaaadiaadaaoelaaaaappiaabaaaakaaiaaaaadabaaaiiaadaaoela
adaaoelaabaaaaacabaaadiaabaappiaecaaaaadaaaacpiaaaaaoeiaaaaioeka
ecaaaaadabaacpiaabaaoeiaabaioekaafaaaaadaaaacbiaaaaappiaabaaaaia
fiaaaaaeaaaacbiaadaakklbabaaffkaaaaaaaiaacaaaaadaaaaabiaaaaaaaia
aaaaaaiaceaaaaacabaaahiaabaaoelaaiaaaaadaaaadciaacaaoelaabaaoeia
afaaaaadabaaahiaaeaaoelaaaaaoekaafaaaaadaaaaaoiaaaaaffiaabaablia
afaaaaadaaaachiaaaaaaaiaaaaabliaabaaaaacaaaaciiaaeaapplaabaaaaac
aaaicpiaaaaaoeiappppaaaafdeieefcieacaaaaeaaaaaaakbaaaaaafjaaaaae
egiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
pcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacacaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaaeaaaaaapgbpbaaa
aeaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaaeaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
efaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaapaaaaahbcaabaaaaaaaaaaaagaabaaaaaaaaaaaagaabaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagbjbaaaacaaaaaabacaaaahccaabaaaaaaaaaaaegbcbaaaadaaaaaa
jgahbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegbcbaaaafaaaaaaegiccaaa
aaaaaaaaagaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaaagajbaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaa
aaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaa
adaaaaaaahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"!!ARBfp1.0
# 13 ALU, 2 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R1.w, fragment.texcoord[3], texture[1], CUBE;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MOV result.color.w, fragment.texcoord[5];
TEX R0.w, R0.x, texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R1.x, R0.x;
MUL R1.xyz, R1.x, fragment.texcoord[2];
MUL R1.w, R0, R1;
DP3_SAT R0.w, fragment.texcoord[1], R1;
MUL R0.xyz, fragment.texcoord[5], c[0];
MUL R1.x, R1.w, c[1];
MUL R0.xyz, R0, R0.w;
MUL result.color.xyz, R0, R1.x;
END
# 13 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"ps_2_0
; 13 ALU, 2 TEX
dcl_2d s0
dcl_cube s1
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xyz
dcl t5
dp3 r0.x, t3, t3
mov r0.xy, r0.x
texld r2, r0, s0
texld r0, t3, s1
dp3 r0.x, t2, t2
rsq r1.x, r0.x
mul r1.xyz, r1.x, t2
mul r0.x, r2, r0.w
mul_pp r0.x, r0, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmibmaanhegfhgebjgfckekinpiclngbeabaaaaaaamadaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcomabaaaa
eaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaa
bacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaaagaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
pgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
acaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaapaaaaah
icaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
dkbabaaaafaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "POINT_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTextureB0] 2D
SetTexture 1 [_LightTexture0] CUBE
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
bcaaaaaaaaaaabacadaaaaoeaeaaaaaaadaaaaoeaeaaaaaa dp3 r0.x, v3, v3
aaaaaaaaaaaaadacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa mov r0.xy, r0.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
ciaaaaaaabaaapacaaaaaafeacaaaaaaaaaaaaaaafaababb tex r1, r0.xyyy, s0 <2d wrap linear point>
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaabaaaaaaafbababb tex r0, v3, s1 <cube wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaabaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r1.x, r0.x
adaaaaaaaaaaabacabaaaappacaaaaaaaaaaaappacaaaaaa mul r0.x, r1.w, r0.w
adaaaaaaabaaahacabaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r1.x, v2
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaaaaaabacaaaaaaaaacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.x, c1
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "POINT_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTextureB0] 2D 1
SetTexture 1 [_LightTexture0] CUBE 0
// 13 instructions, 3 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 2 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefiecedllanjeideokngnjhhgonjfkkfphknfmoabaaaaaagaaeaaaaaeaaaaaa
daaaaaaaiaabaaaaheadaaaacmaeaaaaebgpgodjeiabaaaaeiabaaaaaaacpppp
baabaaaadiaaaaaaabaacmaaaaaadiaaaaaadiaaacaaceaaaaaadiaaabaaaaaa
aaababaaaaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaabaaahla
bpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaaahlabpaaaaacaaaaaaia
aeaacplabpaaaaacaaaaaajiaaaiapkabpaaaaacaaaaaajaabaiapkaaiaaaaad
aaaaaiiaadaaoelaadaaoelaabaaaaacaaaaadiaaaaappiaecaaaaadaaaaapia
aaaaoeiaabaioekaecaaaaadabaaapiaadaaoelaaaaioekaafaaaaadaaaacbia
aaaaaaiaabaappiaacaaaaadaaaaabiaaaaaaaiaaaaaaaiaceaaaaacabaaahia
abaaoelaaiaaaaadaaaadciaacaaoelaabaaoeiaafaaaaadabaaahiaaeaaoela
aaaaoekaafaaaaadaaaaaoiaaaaaffiaabaabliaafaaaaadaaaachiaaaaaaaia
aaaabliaabaaaaacaaaaciiaaeaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcomabaaaaeaaaaaaahlaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafidaaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
pcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
egbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaaaaaaaaaaa
agaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbcbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aaaaaaaaapaaaaahicaabaaaaaaaaaaaagaabaaaabaaaaaapgapbaaaacaaaaaa
diaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaadkbabaaaafaaaaaadoaaaaabejfdeheolaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahahaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaa
afaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"!!ARBfp1.0
# 10 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 2 } };
TEMP R0;
TEMP R1;
TEX R0.w, fragment.texcoord[3], texture[0], 2D;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
MUL R0.xyz, fragment.texcoord[5], c[0];
DP3_SAT R1.x, fragment.texcoord[1], R1;
MUL R0.w, R0, c[1].x;
MUL R0.xyz, R0, R1.x;
MUL result.color.xyz, R0, R0.w;
MOV result.color.w, fragment.texcoord[5];
END
# 10 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"ps_2_0
; 10 ALU, 1 TEX
dcl_2d s0
def c1, 2.00000000, 0, 0, 0
dcl t2.xyz
dcl t1.xyz
dcl t3.xy
dcl t5
texld r0, t3, s0
dp3 r0.x, t2, t2
rsq r0.x, r0.x
mul r1.xyz, r0.x, t2
mul_pp r0.x, r0.w, c1
dp3_pp_sat r1.x, t1, r1
mul r2.xyz, t5, c0
mul r1.xyz, r2, r1.x
mul r0.xyz, r1, r0.x
mov_pp r0.w, t5
mov_pp oC0, r0
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddlagaeffgggjojnblaiknbdlaooljhknabaaaaaalaacaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaa
amamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaabaaaa
eaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaadmcbabaaaabaaaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaa
aeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
acaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaaaaaaaaaaagaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaaaaaaaaaaefaaaaaj
pcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaadkbabaaaaeaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "flash " {
Keywords { "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
SetTexture 0 [_LightTexture0] 2D
"agal_ps
c1 2.0 0.0 0.0 0.0
[bc]
ciaaaaaaaaaaapacadaaaaoeaeaaaaaaaaaaaaaaafaababb tex r0, v3, s0 <2d wrap linear point>
bcaaaaaaaaaaabacacaaaaoeaeaaaaaaacaaaaoeaeaaaaaa dp3 r0.x, v2, v2
akaaaaaaaaaaabacaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaa rsq r0.x, r0.x
adaaaaaaabaaahacaaaaaaaaacaaaaaaacaaaaoeaeaaaaaa mul r1.xyz, r0.x, v2
adaaaaaaaaaaabacaaaaaappacaaaaaaabaaaaoeabaaaaaa mul r0.x, r0.w, c1
bcaaaaaaabaaabacabaaaaoeaeaaaaaaabaaaakeacaaaaaa dp3 r1.x, v1, r1.xyzz
bgaaaaaaabaaabacabaaaaaaacaaaaaaaaaaaaaaaaaaaaaa sat r1.x, r1.x
adaaaaaaacaaahacafaaaaoeaeaaaaaaaaaaaaoeabaaaaaa mul r2.xyz, v5, c0
adaaaaaaabaaahacacaaaakeacaaaaaaabaaaaaaacaaaaaa mul r1.xyz, r2.xyzz, r1.x
adaaaaaaaaaaahacabaaaakeacaaaaaaaaaaaaaaacaaaaaa mul r0.xyz, r1.xyzz, r0.x
aaaaaaaaaaaaaiacafaaaaoeaeaaaaaaaaaaaaaaaaaaaaaa mov r0.w, v5
aaaaaaaaaaaaapadaaaaaaoeacaaaaaaaaaaaaaaaaaaaaaa mov o0, r0
"
}

SubProgram "d3d11_9x " {
Keywords { "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 112 // 112 used size, 4 vars
Vector 96 [_LightColor0] 4
BindCB "$Globals" 0
SetTexture 0 [_LightTexture0] 2D 0
// 11 instructions, 2 temp regs, 0 temp arrays:
// ALU 8 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0_level_9_1
eefieceddjfbacnndndbchhbkadbfkdckhdefnbcabaaaaaameadaaaaaeaaaaaa
daaaaaaaeaabaaaaniacaaaajaadaaaaebgpgodjaiabaaaaaiabaaaaaaacpppp
neaaaaaadeaaaaaaabaaciaaaaaadeaaaaaadeaaabaaceaaaaaadeaaaaaaaaaa
aaaaagaaabaaaaaaaaaaaaaaaaacppppbpaaaaacaaaaaaiaaaaaaplabpaaaaac
aaaaaaiaabaaahlabpaaaaacaaaaaaiaacaachlabpaaaaacaaaaaaiaadaacpla
bpaaaaacaaaaaajaaaaiapkaceaaaaacaaaaahiaabaaoelaaiaaaaadaaaadbia
acaaoelaaaaaoeiaafaaaaadaaaaaoiaadaabllaaaaablkaafaaaaadaaaaahia
aaaaaaiaaaaabliaabaaaaacabaaadiaaaaabllaecaaaaadabaacpiaabaaoeia
aaaioekaacaaaaadaaaaaiiaabaappiaabaappiaafaaaaadaaaachiaaaaappia
aaaaoeiaabaaaaacaaaaciiaadaapplaabaaaaacaaaicpiaaaaaoeiappppaaaa
fdeieefcjaabaaaaeaaaaaaageaaaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaa
fkaaaaadaagabaaaaaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaad
mcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadpcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacacaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaacaaaaaabacaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaa
egacbaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaaagbjbaaaaeaaaaaaagijcaaa
aaaaaaaaagaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaajgahbaaa
aaaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaaficcabaaaaaaaaaaadkbabaaaaeaaaaaadoaaaaabejfdeheolaaaaaaa
agaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaa
keaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadaaaaaakeaaaaaaadaaaaaa
aaaaaaaaadaaaaaaabaaaaaaamamaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaa
acaaaaaaahahaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaa
keaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfe
ejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklkl"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

}

#LINE 245

        }
	} 
	
	FallBack "VertexLit"
}

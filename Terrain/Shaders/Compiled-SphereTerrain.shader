Shader "Sphere/Terrain" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_DetailVertTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_DarkOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_DarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_DarkOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_DarkOverlayDetailOffset ("Overlay Detail Offset", Color) = (0,0,0,0)
	}

Category {
	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 24 to 24
//   d3d11 - ALU: 21 to 21, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkocndfdmjkkmpgclkgjphibehcibjnchabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 401
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 432
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 428
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 401
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 432
#line 432
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 436
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 440
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 443
lowp vec4 frag( in v2f IN ) {
    #line 445
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 449
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 453
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 457
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 461
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 465
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 469
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 473
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_2).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedklmbldkjakodjhbphpionfodncfcjmcmabaaaaaaoeaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaa
nkaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
giaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaaagaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhccabaaaacaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 407
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
};
#line 399
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
#line 429
#line 417
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 421
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 425
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 407
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
};
#line 399
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
#line 429
#line 429
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 433
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 437
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 440
lowp vec4 frag( in v2f IN ) {
    #line 442
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 446
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 450
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 454
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 458
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 462
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 466
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 470
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbkikhdlgcdeiekckkacgedkedcbfnpoabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 429
#line 441
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 437
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 429
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 474
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 478
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 482
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkocndfdmjkkmpgclkgjphibehcibjnchabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 433
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 429
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 433
#line 433
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 437
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 441
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 444
lowp vec4 frag( in v2f IN ) {
    #line 446
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 450
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 454
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 458
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 462
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 466
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 470
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 474
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedoodjaighelohffmkdihoigcdifkhkiaiabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
};
#line 401
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 432
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 428
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
};
#line 401
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 432
#line 432
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 436
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 440
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 443
lowp vec4 frag( in v2f IN ) {
    #line 445
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 449
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 453
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 457
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 461
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 465
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 469
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 473
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 448
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 444
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 448
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 452
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 456
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 459
lowp vec4 frag( in v2f IN ) {
    #line 461
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 465
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 469
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 473
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 477
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 481
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 485
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 489
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
#line 449
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 445
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
#line 449
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 453
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 457
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    #line 462
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 466
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 470
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 474
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 478
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 482
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 486
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 490
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbkikhdlgcdeiekckkacgedkedcbfnpoabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _ShadowCoord;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
#line 438
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 434
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _ShadowCoord;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
#line 438
#line 438
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 442
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 446
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 449
lowp vec4 frag( in v2f IN ) {
    #line 451
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 455
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 459
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 463
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 467
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 471
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 475
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 479
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedljohlijkndfnoogdhbjakaifogmbnjocabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 429
#line 441
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 437
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 429
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 474
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 478
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 482
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 434
#line 446
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 442
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 434
#line 446
#line 446
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 450
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 454
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 457
lowp vec4 frag( in v2f IN ) {
    #line 459
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 463
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 467
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 471
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 475
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 479
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 483
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 487
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 447
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 443
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 468
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 472
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 476
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 480
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 484
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 488
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 444
#line 456
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 452
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 444
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 493
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 497
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 444
#line 456
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 452
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 444
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 493
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 497
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 440
#line 452
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 448
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 440
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 473
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 477
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 481
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 485
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 489
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 493
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 441
#line 453
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 449
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 441
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 486
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 490
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 494
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkocndfdmjkkmpgclkgjphibehcibjnchabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 401
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 432
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 428
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 401
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 432
#line 432
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 436
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 440
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 443
lowp vec4 frag( in v2f IN ) {
    #line 445
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 449
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 453
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 457
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 461
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 465
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 469
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 473
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_2).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedklmbldkjakodjhbphpionfodncfcjmcmabaaaaaaoeaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaa
nkaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
giaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaaagaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhccabaaaacaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 407
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
};
#line 399
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
#line 429
#line 417
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 421
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 425
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 407
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
};
#line 399
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 417
#line 429
#line 429
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 433
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 437
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 440
lowp vec4 frag( in v2f IN ) {
    #line 442
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 446
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 450
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 454
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 458
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 462
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 466
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 470
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbkikhdlgcdeiekckkacgedkedcbfnpoabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 429
#line 441
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 437
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 429
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 474
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 478
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 482
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkocndfdmjkkmpgclkgjphibehcibjnchabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 433
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 429
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 433
#line 433
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 437
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 441
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 444
lowp vec4 frag( in v2f IN ) {
    #line 446
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 450
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 454
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 458
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 462
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 466
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 470
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 474
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedoodjaighelohffmkdihoigcdifkhkiaiabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
};
#line 401
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 432
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 428
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
};
#line 401
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 432
#line 432
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 436
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 440
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 443
lowp vec4 frag( in v2f IN ) {
    #line 445
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 449
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 453
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 457
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 461
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 465
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 469
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 473
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 448
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 444
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 448
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 452
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 456
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 459
lowp vec4 frag( in v2f IN ) {
    #line 461
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 465
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 469
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 473
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 477
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 481
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 485
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 489
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
#line 449
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 445
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
#line 449
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 453
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 457
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    #line 462
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 466
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 470
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 474
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 478
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 482
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 486
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 490
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbkikhdlgcdeiekckkacgedkedcbfnpoabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _ShadowCoord;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
#line 438
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 434
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _ShadowCoord;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 426
#line 438
#line 438
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 442
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 446
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 449
lowp vec4 frag( in v2f IN ) {
    #line 451
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 455
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 459
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 463
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 467
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 471
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 475
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 479
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedljohlijkndfnoogdhbjakaifogmbnjocabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 429
#line 441
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 437
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 429
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 474
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 478
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 482
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 434
#line 446
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 442
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 434
#line 446
#line 446
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 450
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 454
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 457
lowp vec4 frag( in v2f IN ) {
    #line 459
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 463
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 467
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 471
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 475
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 479
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 483
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 487
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 447
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 443
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 468
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 472
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 476
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 480
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 484
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 488
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 444
#line 456
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 452
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 444
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 493
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 497
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 444
#line 456
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 452
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 444
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 493
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 497
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 440
#line 452
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 448
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 440
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 473
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 477
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 481
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 485
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 489
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 493
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD4);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float vertLerp_8;
  mediump vec2 detailvertnrmxy_9;
  mediump vec2 detailvertnrmzx_10;
  mediump vec2 detailvertnrmzy_11;
  mediump vec2 detailnrmxy_12;
  mediump vec2 detailnrmzx_13;
  mediump vec2 detailnrmzy_14;
  mediump vec4 main_15;
  highp vec2 uv_16;
  mediump vec4 color_17;
  highp float r_18;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_19;
    y_over_x_19 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_20;
    highp float x_21;
    x_21 = (y_over_x_19 * inversesqrt(((y_over_x_19 * y_over_x_19) + 1.0)));
    s_20 = (sign(x_21) * (1.5708 - (sqrt((1.0 - abs(x_21))) * (1.5708 + (abs(x_21) * (-0.214602 + (abs(x_21) * (0.0865667 + (abs(x_21) * -0.0310296)))))))));
    r_18 = s_20;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_18 = (s_20 + 3.14159);
      } else {
        r_18 = (r_18 - 3.14159);
      };
    };
  } else {
    r_18 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_16.x = (0.5 + (0.159155 * r_18));
  uv_16.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_26;
  tmpvar_26 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_27;
  tmpvar_27 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_29;
  tmpvar_29.x = (0.159155 * sqrt(dot (tmpvar_27, tmpvar_27)));
  tmpvar_29.y = dFdx(tmpvar_26);
  tmpvar_29.z = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_29.w = dFdy(tmpvar_26);
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2DGradEXT (_MainTex, uv_16, tmpvar_29.xy, tmpvar_29.zw);
  main_15 = tmpvar_30;
  highp vec2 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_14 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_13 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_12 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_11 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_10 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_9 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_8 = tmpvar_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_DetailVertTex, detailvertnrmzy_11);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailTex, detailnrmzy_14);
  mediump vec4 tmpvar_40;
  tmpvar_40 = mix (tmpvar_38, tmpvar_39, vec4(vertLerp_8));
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailVertTex, detailvertnrmzx_10);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailTex, detailnrmzx_13);
  mediump vec4 tmpvar_43;
  tmpvar_43 = mix (tmpvar_41, tmpvar_42, vec4(vertLerp_8));
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailVertTex, detailvertnrmxy_9);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailTex, detailnrmxy_12);
  mediump vec4 tmpvar_46;
  tmpvar_46 = mix (tmpvar_44, tmpvar_45, vec4(vertLerp_8));
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_40, tmpvar_47.xxxx);
  detail_7 = tmpvar_48;
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (detail_7, tmpvar_43, tmpvar_47.yyyy);
  detail_7 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_52;
  tmpvar_52 = (((main_15 * tmpvar_51) * xlv_TEXCOORD5) * _Color);
  color_17 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_55;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_2 = tmpvar_57;
  color_17.xyz = (color_17.xyz * light_2);
  color_17.w = 1.0;
  tmpvar_1 = color_17;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 441
#line 453
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 449
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 441
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 486
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 490
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 494
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkocndfdmjkkmpgclkgjphibehcibjnchabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 403
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 424
#line 436
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 432
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 403
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 424
#line 436
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 440
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 444
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    #line 449
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 453
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 457
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 461
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 465
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 469
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 473
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 477
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 481
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 485
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_2).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedklmbldkjakodjhbphpionfodncfcjmcmabaaaaaaoeaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaa
nkaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
giaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaaagaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhccabaaaacaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 401
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 421
#line 433
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 429
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 401
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 421
#line 433
#line 433
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 437
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 441
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 444
lowp vec4 frag( in v2f IN ) {
    #line 446
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 450
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 454
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 458
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 462
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 466
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 470
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 474
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 478
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 482
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbkikhdlgcdeiekckkacgedkedcbfnpoabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 412
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 433
#line 445
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 441
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 412
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 433
#line 445
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 449
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 453
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    #line 458
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 462
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 466
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 470
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 474
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 478
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 482
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 486
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 490
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 494
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkocndfdmjkkmpgclkgjphibehcibjnchabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 404
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 425
#line 437
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 433
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 404
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 425
#line 437
#line 437
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 441
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 445
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 448
lowp vec4 frag( in v2f IN ) {
    #line 450
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 454
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 458
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 462
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 466
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 470
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 474
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 478
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 482
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 486
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedoodjaighelohffmkdihoigcdifkhkiaiabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 403
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 424
#line 436
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 432
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 403
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 424
#line 436
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 440
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 444
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    #line 449
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 453
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 457
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 461
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 465
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 469
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 473
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 477
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 481
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 485
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 418
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 440
#line 452
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 448
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 418
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 440
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 473
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 477
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 481
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 485
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 493
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 497
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 501
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 419
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 441
#line 453
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 449
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 419
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 441
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 486
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 490
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 494
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 498
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 502
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbkikhdlgcdeiekckkacgedkedcbfnpoabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _ShadowCoord;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 409
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 430
#line 442
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 438
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _ShadowCoord;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 409
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 430
#line 442
#line 442
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 446
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 450
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 453
lowp vec4 frag( in v2f IN ) {
    #line 455
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 459
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 463
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 467
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 471
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 475
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 479
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 483
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 487
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 491
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedljohlijkndfnoogdhbjakaifogmbnjocabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 411
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 433
#line 445
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 441
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 411
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 433
#line 445
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 449
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 453
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    #line 458
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 462
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 466
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 470
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 474
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 478
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 482
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 486
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 490
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 494
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 416
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 438
#line 450
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 446
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 416
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 438
#line 450
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 454
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 458
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 461
lowp vec4 frag( in v2f IN ) {
    #line 463
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 467
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 471
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 475
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 479
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 483
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 487
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 491
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 495
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 499
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 417
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 439
#line 451
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 447
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 417
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 439
#line 451
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 455
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 459
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 462
lowp vec4 frag( in v2f IN ) {
    #line 464
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 468
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 472
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 476
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 480
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 484
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 488
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 492
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 496
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 500
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 426
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 448
#line 460
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 456
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 426
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 448
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 493
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 501
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 505
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 509
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 426
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 448
#line 460
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 456
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 426
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 448
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 493
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 501
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 505
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 509
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 422
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 444
#line 456
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 452
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 422
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 444
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 489
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 493
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 497
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 501
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 505
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 423
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 445
#line 457
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 453
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 423
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 445
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 490
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 494
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 498
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 502
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 506
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkocndfdmjkkmpgclkgjphibehcibjnchabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 403
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 424
#line 436
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 432
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 403
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 424
#line 436
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 440
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 444
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    #line 449
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 453
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 457
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 461
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 465
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 469
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 473
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 477
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 481
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 485
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_2).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedklmbldkjakodjhbphpionfodncfcjmcmabaaaaaaoeaeaaaaadaaaaaa
cmaaaaaalmaaaaaaheabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaa
nkaaaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
giaaaaacabaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
abaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
abaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaabaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaa
abaaaaaaakaabaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaaagaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaacaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaa
dcaaaaakhccabaaaacaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaa
egacbaiaebaaaaaaaaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 401
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 421
#line 433
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 429
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 393
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 397
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 401
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 421
#line 433
#line 433
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 437
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 441
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 444
lowp vec4 frag( in v2f IN ) {
    #line 446
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 450
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 454
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 458
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 462
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 466
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 470
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 474
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 478
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 482
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbkikhdlgcdeiekckkacgedkedcbfnpoabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 412
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 433
#line 445
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 441
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 404
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 408
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 412
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 433
#line 445
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 449
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 453
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    #line 458
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 462
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 466
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 470
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 474
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 478
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 482
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 486
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 490
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 494
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkocndfdmjkkmpgclkgjphibehcibjnchabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 404
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 425
#line 437
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 433
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 396
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 400
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 404
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 425
#line 437
#line 437
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 441
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 445
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 448
lowp vec4 frag( in v2f IN ) {
    #line 450
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 454
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 458
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 462
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 466
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 470
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 474
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 478
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 482
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 486
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedoodjaighelohffmkdihoigcdifkhkiaiabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 403
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 424
#line 436
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 432
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 395
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 399
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 403
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 424
#line 436
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 440
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 444
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    #line 449
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 453
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 457
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 461
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 465
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 469
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 473
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 477
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 481
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 485
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 418
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 440
#line 452
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 448
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 410
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 414
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 418
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 440
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 473
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 477
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 481
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 485
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 493
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 497
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 501
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 419
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 441
#line 453
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 449
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 411
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 415
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 419
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 441
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 486
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 490
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 494
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 498
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 502
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcbkikhdlgcdeiekckkacgedkedcbfnpoabaaaaaapmaeaaaaadaaaaaa
cmaaaaaalmaaaaaaimabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaadhcbabaaaadaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
bccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaa
agaabaaaaaaaaaaaagbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaa
acaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegbcbaaaadaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaa
aaaaaaaadgaaaaafpccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _ShadowCoord;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 409
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 430
#line 442
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 438
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _ShadowCoord;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 401
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 405
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 409
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 430
#line 442
#line 442
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 446
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 450
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 453
lowp vec4 frag( in v2f IN ) {
    #line 455
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 459
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 463
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 467
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 471
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 475
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 479
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 483
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 487
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 491
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedljohlijkndfnoogdhbjakaifogmbnjocabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 411
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 433
#line 445
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 441
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 403
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 407
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 411
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 433
#line 445
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 449
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 453
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    #line 458
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 462
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 466
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 470
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 474
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 478
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 482
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 486
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 490
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 494
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 416
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 438
#line 450
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 446
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 408
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 412
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 416
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 438
#line 450
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 454
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 458
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 461
lowp vec4 frag( in v2f IN ) {
    #line 463
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 467
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 471
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 475
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 479
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 483
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 487
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 491
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 495
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 499
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 417
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 439
#line 451
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 447
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 409
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 413
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 417
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 439
#line 451
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 455
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 459
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 462
lowp vec4 frag( in v2f IN ) {
    #line 464
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 468
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 472
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 476
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 480
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 484
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 488
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 492
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 496
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 500
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 426
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 448
#line 460
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 456
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 426
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 448
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 493
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 501
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 505
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 509
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedejjgenfcohgpkfeemcoimfahgdgnbpcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 426
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 448
#line 460
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 456
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 418
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 422
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 426
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 448
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 493
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 497
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 501
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 505
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 509
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 422
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 444
#line 456
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 452
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 414
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 418
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 422
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 444
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 489
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 493
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 497
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 501
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 505
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
attribute vec3 TANGENT;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec3 p_3;
  p_3 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD1 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD4 = -(normalize(TANGENT));
  xlv_TEXCOORD5 = gl_Color;
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying float xlv_TEXCOORD1;
uniform vec4 _DarkOverlayDetailOffset;
uniform float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 darkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD4.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD4.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD4);
  vec4 tmpvar_18;
  tmpvar_18 = (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD4.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD4.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0)))) * xlv_TEXCOORD5) * _Color);
  color_3.w = tmpvar_18.w;
  vec4 tmpvar_19;
  tmpvar_19 = (texture2DGradARB (_DarkOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.xxxx), texture2D (_DarkOverlayDetailTex, ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy)), tmpvar_17.yyyy));
  darkoverlay_1.xyz = tmpvar_19.xyz;
  float tmpvar_20;
  tmpvar_20 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_18.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_20)), 0.0, 1.0));
  darkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_20 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, darkoverlay_1, darkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 24 ALU
dcl_position o0
dcl_texcoord1 o1
dcl_texcoord2 o2
dcl_texcoord3 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_tangent0 v3
mov r0.xyz, v2
mov r0.w, c9.x
dp4 o3.z, r0, c6
dp4 o3.y, r0, c5
dp4 o3.x, r0, c4
dp3 r0.y, v3, v3
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.x, r1, r1
rsq r0.x, r1.x
rcp o1.x, r0.x
dp3 r0.x, v2, v2
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r1.xyz, r0.y, v3
mov o5, v1
mul o2.xyz, r0.x, v2
mov o4.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 23 instructions, 1 temp regs, 0 temp arrays:
// ALU 21 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkjkkboghaanjaikoffngoinofjpoicjfabaaaaaabeafaaaaadaaaaaa
cmaaaaaalmaaaaaakeabaaaaejfdeheoiiaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaahbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaahhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaahoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafaepfdej
feejepeoaaedepemepfcaaeoepfcenebemaafeebeoehefeofeaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
acaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaadaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahapaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcgiadaaaaeaaaabaankaaaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaadhcbabaaa
adaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaa
gfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaacabaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaabaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
abaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaia
ebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaaagaabaaaaaaaaaaa
agbjbaaaacaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
abaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaa
abaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaegbcbaaa
adaaaaaadgaaaaaghccabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaadgaaaaaf
pccabaaaaeaaaaaaegbobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec3 tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD1 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD2 = normalize(tmpvar_1);
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = -(normalize(tmpvar_2.xyz));
  xlv_TEXCOORD5 = _glesColor;
  xlv_TEXCOORD6 = tmpvar_3;
  xlv_TEXCOORD7 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp float xlv_TEXCOORD1;
uniform lowp vec4 _DarkOverlayDetailOffset;
uniform highp float _DarkOverlayDetailScale;
uniform sampler2D _DarkOverlayDetailTex;
uniform sampler2D _DarkOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec3 light_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump vec4 darkoverlaydetailZ_8;
  mediump vec4 darkoverlaydetailY_9;
  mediump vec4 darkoverlaydetailX_10;
  mediump vec4 darkoverlay_11;
  mediump float vertLerp_12;
  mediump vec2 detailvertnrmxy_13;
  mediump vec2 detailvertnrmzx_14;
  mediump vec2 detailvertnrmzy_15;
  mediump vec2 detailnrmxy_16;
  mediump vec2 detailnrmzx_17;
  mediump vec2 detailnrmzy_18;
  mediump vec4 main_19;
  highp vec2 uv_20;
  mediump vec4 color_21;
  highp float r_22;
  if ((abs(xlv_TEXCOORD4.z) > (1e-08 * abs(xlv_TEXCOORD4.x)))) {
    highp float y_over_x_23;
    y_over_x_23 = (xlv_TEXCOORD4.x / xlv_TEXCOORD4.z);
    float s_24;
    highp float x_25;
    x_25 = (y_over_x_23 * inversesqrt(((y_over_x_23 * y_over_x_23) + 1.0)));
    s_24 = (sign(x_25) * (1.5708 - (sqrt((1.0 - abs(x_25))) * (1.5708 + (abs(x_25) * (-0.214602 + (abs(x_25) * (0.0865667 + (abs(x_25) * -0.0310296)))))))));
    r_22 = s_24;
    if ((xlv_TEXCOORD4.z < 0.0)) {
      if ((xlv_TEXCOORD4.x >= 0.0)) {
        r_22 = (s_24 + 3.14159);
      } else {
        r_22 = (r_22 - 3.14159);
      };
    };
  } else {
    r_22 = (sign(xlv_TEXCOORD4.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * r_22));
  uv_20.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.y))) * (1.5708 + (abs(xlv_TEXCOORD4.y) * (-0.214602 + (abs(xlv_TEXCOORD4.y) * (0.0865667 + (abs(xlv_TEXCOORD4.y) * -0.0310296)))))))))));
  highp float r_26;
  if ((abs(xlv_TEXCOORD4.x) > (1e-08 * abs(xlv_TEXCOORD4.y)))) {
    highp float y_over_x_27;
    y_over_x_27 = (xlv_TEXCOORD4.y / xlv_TEXCOORD4.x);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((xlv_TEXCOORD4.x < 0.0)) {
      if ((xlv_TEXCOORD4.y >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(xlv_TEXCOORD4.y) * 1.5708);
  };
  highp float tmpvar_30;
  tmpvar_30 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD4.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD4.z))) * (1.5708 + (abs(xlv_TEXCOORD4.z) * (-0.214602 + (abs(xlv_TEXCOORD4.z) * (0.0865667 + (abs(xlv_TEXCOORD4.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(xlv_TEXCOORD4.xy);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(xlv_TEXCOORD4.xy);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_MainTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  main_19 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD4.zy * _DetailScale);
  detailnrmzy_18 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD4.zx * _DetailScale);
  detailnrmzx_17 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD4.xy * _DetailScale);
  detailnrmxy_16 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD4.zy * _DetailVertScale);
  detailvertnrmzy_15 = tmpvar_38;
  highp vec2 tmpvar_39;
  tmpvar_39 = (xlv_TEXCOORD4.zx * _DetailVertScale);
  detailvertnrmzx_14 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD4.xy * _DetailVertScale);
  detailvertnrmxy_13 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD4)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_12 = tmpvar_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzy_15);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzy_18);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_12));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmzx_14);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmzx_17);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_12));
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmxy_13);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmxy_16);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_12));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2DGradEXT (_DarkOverlayTex, uv_20, tmpvar_33.xy, tmpvar_33.zw);
  darkoverlay_11 = tmpvar_51;
  lowp vec4 tmpvar_52;
  highp vec2 P_53;
  P_53 = ((xlv_TEXCOORD4.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_52 = texture2D (_DarkOverlayDetailTex, P_53);
  darkoverlaydetailX_10 = tmpvar_52;
  lowp vec4 tmpvar_54;
  highp vec2 P_55;
  P_55 = ((xlv_TEXCOORD4.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_54 = texture2D (_DarkOverlayDetailTex, P_55);
  darkoverlaydetailY_9 = tmpvar_54;
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD4.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy);
  tmpvar_56 = texture2D (_DarkOverlayDetailTex, P_57);
  darkoverlaydetailZ_8 = tmpvar_56;
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(xlv_TEXCOORD4);
  highp vec4 tmpvar_59;
  tmpvar_59 = mix (tmpvar_50, tmpvar_44, tmpvar_58.xxxx);
  detail_7 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = mix (detail_7, tmpvar_47, tmpvar_58.yyyy);
  detail_7 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD1), 0.0, 1.0);
  detailLevel_6 = tmpvar_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6));
  highp vec4 tmpvar_63;
  tmpvar_63 = (((main_19 * tmpvar_62) * xlv_TEXCOORD5) * _Color);
  color_21 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = mix (darkoverlaydetailZ_8, darkoverlaydetailX_10, tmpvar_58.xxxx);
  detail_7 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = mix (detail_7, darkoverlaydetailY_9, tmpvar_58.yyyy);
  detail_7 = tmpvar_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (darkoverlay_11 * detail_7);
  darkoverlay_11.xyz = tmpvar_66.xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (dot (xlv_TEXCOORD3, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_2 = tmpvar_71;
  color_21.xyz = (color_21.xyz * light_2);
  darkoverlay_11.w = (tmpvar_66.w * (1.0 - clamp ((tmpvar_70 * 1.5), 0.0, 1.0)));
  color_21.xyz = mix (color_21, darkoverlay_11, darkoverlay_11.wwww).xyz;
  color_21.w = 1.0;
  tmpvar_1 = color_21;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 423
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 445
#line 457
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    o.objNormal = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( v.normal, 0.0)).xyz;
    #line 453
    o.sphereNormal = (-normalize(v.tangent));
    o.color = v.color;
    return o;
}

out highp float xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec4 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec3(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = float(xl_retval.viewDist);
    xlv_TEXCOORD2 = vec3(xl_retval.objNormal);
    xlv_TEXCOORD3 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD4 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec4(xl_retval.color);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 objNormal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec4 color;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec3 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform sampler2D _MainTex;
#line 415
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
uniform highp float _DetailVertScale;
#line 419
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _DarkOverlayTex;
uniform sampler2D _DarkOverlayDetailTex;
#line 423
uniform highp float _DarkOverlayDetailScale;
uniform lowp vec4 _DarkOverlayDetailOffset;
#line 445
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.objNormal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 darkoverlay = xll_tex2Dgrad( _DarkOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 darkoverlaydetailX = texture( _DarkOverlayDetailTex, ((sphereNrm.zy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    mediump vec4 darkoverlaydetailY = texture( _DarkOverlayDetailTex, ((sphereNrm.zx * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    #line 490
    mediump vec4 darkoverlaydetailZ = texture( _DarkOverlayDetailTex, ((sphereNrm.xy * _DarkOverlayDetailScale) + _DarkOverlayDetailOffset.xy));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 494
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color) * _Color);
    detail = mix( darkoverlaydetailZ, darkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, darkoverlaydetailY, vec4( sphereNrm.y));
    #line 498
    darkoverlay = (darkoverlay * detail);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 502
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    color.xyz *= light;
    #line 506
    darkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, darkoverlay, vec4( darkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec4 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD1);
    xlt_IN.objNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD3);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.color = vec4(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 102 to 118, TEX: 9 to 15
//   d3d11 - ALU: 76 to 89, TEX: 6 to 9, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmifgocnkjhchkjnloghabbgnljggphohabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 80 // 80 used size, 8 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_DetailScale]
Float 68 [_DetailVertScale]
Float 72 [_DetailDist]
Float 76 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjlfemndmlfecddllljljjllbpinflokhabaaaaaapiamaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaa
eaaaaaaapgacaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaa
abaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaadaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
adaaaaaaakbabaaaadaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaa
akbabaaaadaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
adaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
adaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaadaaaaaaagifcaaaaaaaaaaaaeaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
adaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaabaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaapgipcaaaaaaaaaaaaeaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedobmenjbnnngelneibjoemefkfiejcillabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmifgocnkjhchkjnloghabbgnljggphohabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlnhfpdoaabgilpapcaalljnlgkfkhonnabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddehfkfbohkikmoapeofngdglckhfigkbabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddehfkfbohkikmoapeofngdglckhfigkbabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedobmenjbnnngelneibjoemefkfiejcillabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 208 // 208 used size, 10 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedigebpadnfioglanmaogcppcicnliccbbabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
pgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedphkhennppiollinjhlnioejdablamcocabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedphkhennppiollinjhlnioejdablamcocabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 208 // 208 used size, 10 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedafaepdimjcabneonhleoeaplldlkdjgnabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
pgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 208 // 208 used size, 10 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedafaepdimjcabneonhleoeaplldlkdjgnabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
pgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedphkhennppiollinjhlnioejdablamcocabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedphkhennppiollinjhlnioejdablamcocabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmifgocnkjhchkjnloghabbgnljggphohabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 80 // 80 used size, 8 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_DetailScale]
Float 68 [_DetailVertScale]
Float 72 [_DetailDist]
Float 76 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjlfemndmlfecddllljljjllbpinflokhabaaaaaapiamaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaa
eaaaaaaapgacaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaa
abaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaaj
bcaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
aoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
akaabaaaaaaaaaaaddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaa
aaaaaaaafgbgbaaaadaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaa
adaaaaaaakbabaaaadaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaa
akbabaaaadaaaaaabnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadhaaaaakbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaa
adaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaa
adaaaaaaapaaaaahbcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaa
chbgjidnaaaaaaaaaaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaa
aaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaa
iedefjlodcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaakeanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaa
acaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadp
aaaaiadpelaaaaafmcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaa
adaaaaaaagambaaaaaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaa
kgaobaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaa
aaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaa
aaaaaaaakgalbaaaadaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaa
ogakbaaaacaaaaaajgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaa
aaaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaa
acaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
ejaaaaanpcaabaaaaaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaacaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
abaaaaaaogakbaaaabaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaai
pcaabaaaadaaaaaaegbgbaaaadaaaaaaagifcaaaaaaaaaaaaeaaaaaaefaaaaaj
pcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
aeaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
adaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaiaebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaa
agbabaiaibaaaaaaadaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaaaaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaabaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaapgipcaaaaaaaaaaaaeaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedobmenjbnnngelneibjoemefkfiejcillabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmifgocnkjhchkjnloghabbgnljggphohabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlnhfpdoaabgilpapcaalljnlgkfkhonnabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddehfkfbohkikmoapeofngdglckhfigkbabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddehfkfbohkikmoapeofngdglckhfigkbabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedobmenjbnnngelneibjoemefkfiejcillabaaaaaabaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaa
fjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
ddaaaaajccaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaa
adaaaaaafgbgbaiaebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaadbaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaadeaaaaahbcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
bnaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
abaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaak
bcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpalaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoamaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaah
bcaabaaaaaaaaaaamgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdodcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaadagojjlmaaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaa
aaaaaaaachbgjidndcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaia
ibaaaaaaadaaaaaaaceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaan
jcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
keanmjdpaaaaaaaaaaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaia
mbaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaaf
mcaabaaaacaaaaaakgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaa
aaaaaaaakgaobaaaacaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaa
nlapejeanlapejeaabaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaa
adaaaaaadcaaaaajdcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaa
jgafbaaaaaaaaaaadiaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaa
aaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
acaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaa
abaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
adaaaaaaegaabaaaadaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaa
diaaaaaipcaabaaaaeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaafaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaia
ebaaaaaaafaaaaaadcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaacaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
aaaaaaalhcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 208 // 208 used size, 10 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedigebpadnfioglanmaogcppcicnliccbbabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
pgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedphkhennppiollinjhlnioejdablamcocabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedphkhennppiollinjhlnioejdablamcocabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 208 // 208 used size, 10 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedafaepdimjcabneonhleoeaplldlkdjgnabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
pgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 208 // 208 used size, 10 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedafaepdimjcabneonhleoeaplldlkdjgnabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
pgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedphkhennppiollinjhlnioejdablamcocabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r0.xyz, v3
dp3_sat r0.x, v1, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v3, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
abs r0.w, v3.z
abs r2.xy, v3
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v3, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v3.zxzw, c5.x
mul r3.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v3.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v3.z, r1.w, r2
cmp r0.x, v3, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4 r0.y, c1, c1
rsq r0.y, r0.y
mul r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v3.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v3.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v3.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v3.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v4
dp3_sat r0.w, v2, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 144 // 144 used size, 9 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
// 86 instructions, 6 temp regs, 0 temp arrays:
// ALU 72 float, 0 int, 4 uint
// TEX 6 (0 load, 0 comp, 0 bias, 1 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedphkhennppiollinjhlnioejdablamcocabaaaaaacianaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcnialaaaaeaaaaaaapgacaaaafjaaaaaeegiocaaa
aaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaadeaaaaajbcaabaaaaaaaaaaackbabaiaibaaaaaa
adaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaddaaaaajccaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
aaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaaabaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaaaaaaaaadbaaaaaigcaabaaaaaaaaaaafgbgbaaaadaaaaaafgbgbaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaa
ddaaaaahicaabaaaaaaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaah
bcaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadhaaaaakbcaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
alaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
amaaaaafjcaabaaaaaaaaaaaagbebaaaadaaaaaaapaaaaahbcaabaaaaaaaaaaa
mgaabaaaaaaaaaaamgaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
dcaaaabajcaabaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaadagojjlm
aaaaaaaaaaaaaaaadagojjlmaceaaaaachbgjidnaaaaaaaaaaaaaaaachbgjidn
dcaaaaanjcaabaaaaaaaaaaaagambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaiedefjloaaaaaaaaaaaaaaaaiedefjlodcaaaaanjcaabaaaaaaaaaaa
agambaaaaaaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaakeanmjdpaaaaaaaa
aaaaaaaakeanmjdpaaaaaaalmcaabaaaacaaaaaafgbjbaiambaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaacaaaaaa
kgaobaaaacaaaaaadiaaaaahmcaabaaaadaaaaaaagambaaaaaaaaaaakgaobaaa
acaaaaaadcaaaaapmcaabaaaadaaaaaakgaobaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejea
abaaaaahgcaabaaaaaaaaaaafgagbaaaaaaaaaaakgalbaaaadaaaaaadcaaaaaj
dcaabaaaaaaaaaaamgaabaaaaaaaaaaaogakbaaaacaaaaaajgafbaaaaaaaaaaa
diaaaaakgcaabaaaabaaaaaaagabbaaaaaaaaaaaaceaaaaaaaaaaaaaidpjkcdo
idpjkcdoaaaaaaaaalaaaaafccaabaaaacaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaadaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
adaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaa
aeaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
afaaaaaaogakbaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaiaebaaaaaaafaaaaaa
dcaaaaajhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaa
adaaaaaadcaaaaakhcaabaaaacaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaalhcaabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
pgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaa
aaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpmgoojldliblplepehinnihdlbhilmbgabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4_pp r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq_pp r2.w, r2.w
mul_pp r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 112 // 112 used size, 10 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_DetailScale]
Float 68 [_DetailVertScale]
Float 72 [_DetailDist]
Float 76 [_MinLight]
Float 80 [_DarkOverlayDetailScale]
Vector 96 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgceilpjeehppjpajjlgcamocbipackcjabaaaaaajeapaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaa
eaaaaaaajnadaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafjaaaaaeegiocaaa
abaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaadaaaaaaagifcaaaaaaaaaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
adaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgbfbaaaadaaaaaajgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaa
akbabaaaadaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaa
apaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaa
apaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaa
aaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaa
fgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlo
dcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaa
fgbjbaiambaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadp
elaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaa
kgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaa
aaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaa
ogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
adaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaa
aceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaa
ckaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaapgipcaaa
aaaaaaaaaeaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaalpcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
afaaaaaaegiecaaaaaaaaaaaagaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
abaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
ogakbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaa
aeaaaaaaegbabaaaadaaaaaaagiacaaaaaaaaaaaafaaaaaaegiacaaaaaaaaaaa
agaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaia
ebaaaaaaaeaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaa
egaobaaaadaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaa
abaaaaaaegaobaiaebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhhpmcjehhhnilnpdgdololeondcgfdanabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpmgoojldliblplepehinnihdlbhilmbgabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4_pp r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq_pp r2.w, r2.w
mul_pp r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednljjhdnhgnkejppdmlpaniobcpnjidifabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfhhcccolhkjgggadicpnjolgegonpgklabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfhhcccolhkjgggadicpnjolgegonpgklabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4_pp r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq_pp r2.w, r2.w
mul_pp r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhhpmcjehhhnilnpdgdololeondcgfdanabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4_pp r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq_pp r2.w, r2.w
mul_pp r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 240 // 240 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_DarkOverlayDetailScale]
Vector 224 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmkbcgioiljfdiadgcnjloodnfcmkniggabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaaegiecaaaaaaaaaaaaoaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaanaaaaaaegiacaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgpajcelmhedaemljbfkiapeaagpfjanabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgpajcelmhedaemljbfkiapeaagpfjanabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 240 // 240 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_DarkOverlayDetailScale]
Vector 224 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgmaakgcfdaaloeeokenggebcdihiicelabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaaegiecaaaaaaaaaaaaoaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaanaaaaaaegiacaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 240 // 240 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_DarkOverlayDetailScale]
Vector 224 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgmaakgcfdaaloeeokenggebcdihiicelabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaaegiecaaaaaaaaaaaaoaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaanaaaaaaegiacaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgpajcelmhedaemljbfkiapeaagpfjanabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgpajcelmhedaemljbfkiapeaagpfjanabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpmgoojldliblplepehinnihdlbhilmbgabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4_pp r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq_pp r2.w, r2.w
mul_pp r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 112 // 112 used size, 10 vars
Vector 16 [_LightColor0] 4
Vector 48 [_Color] 4
Float 64 [_DetailScale]
Float 68 [_DetailVertScale]
Float 72 [_DetailDist]
Float 76 [_MinLight]
Float 80 [_DarkOverlayDetailScale]
Vector 96 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgceilpjeehppjpajjlgcamocbipackcjabaaaaaajeapaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaa
eaaaaaaajnadaaaafjaaaaaeegiocaaaaaaaaaaaahaaaaaafjaaaaaeegiocaaa
abaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadbcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaa
aaaaaaaaogakbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaai
pcaabaaaacaaaaaaegbgbaaaadaaaaaaagifcaaaaaaaaaaaaeaaaaaaefaaaaaj
pcaabaaaadaaaaaaogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaa
abaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
adaaaaaabacaaaaiicaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaa
adaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlp
dccaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaa
aaaaaadpdcaaaaajhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadiaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaa
aaaaaaaaaeaaaaaaefaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaa
abaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaegacbaiaebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaa
agbabaiaibaaaaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaaj
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaa
aaaaaaaihcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaa
agbabaaaabaaaaaakgikcaaaaaaaaaaaaeaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaa
aaaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaia
ibaaaaaaadaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgbfbaaaadaaaaaajgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaabaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaa
akbabaaaadaaaaaadbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaa
adaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaa
apaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaa
apaaaaahicaabaaaaaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaa
aaaaaaaachbgjidnchbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaa
fgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlo
dcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaa
aceaaaaaaaaaaaaaaaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaa
fgbjbaiambaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadp
elaaaaafmcaabaaaadaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaa
kgaobaaaabaaaaaakgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaa
aaaaaaaanlapejeanlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaa
ogakbaaaaeaaaaaadcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
adaaaaaaegaabaaaabaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaa
aceaaaaaaaaaaaaaidpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaa
ckaabaaaacaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaan
pcaabaaaabaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaa
aaaaaaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaapgipcaaa
aaaaaaaaaeaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaalpcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
afaaaaaaegiecaaaaaaaaaaaagaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaa
abaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaa
ogakbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaa
aeaaaaaaegbabaaaadaaaaaaagiacaaaaaaaaaaaafaaaaaaegiacaaaaaaaaaaa
agaaaaaaefaaaaajpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaia
ebaaaaaaaeaaaaaadcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaa
egaobaaaadaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaa
abaaaaaaegaobaiaebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaia
ibaaaaaaadaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaf
iccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhhpmcjehhhnilnpdgdololeondcgfdanabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpmgoojldliblplepehinnihdlbhilmbgabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4_pp r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq_pp r2.w, r2.w
mul_pp r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednljjhdnhgnkejppdmlpaniobcpnjidifabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfhhcccolhkjgggadicpnjolgegonpgklabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfhhcccolhkjgggadicpnjolgegonpgklabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4_pp r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq_pp r2.w, r2.w
mul_pp r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhhpmcjehhhnilnpdgdololeondcgfdanabaaaaaakmapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaa
fjaaaaaeegiocaaaaaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fjaaaaaeegiocaaaacaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
bcbabaaaabaaaaaagcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaa
agiacaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbgbaaaadaaaaaaagifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaa
ogakbaaaacaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaa
acaaaaaaegaabaaaacaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaai
icaabaaaaaaaaaaajgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaaj
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaa
diaaaaaipcaabaaaadaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaa
efaaaaajpcaabaaaaeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaa
aagabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaia
ebaaaaaaaeaaaaaadcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaafgbfbaiaibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
aaaaaaalhcaabaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaa
kgikcaaaaaaaaaaaaiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaia
ibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaa
jgbfbaiaebaaaaaaadaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
abaaaaaaddaaaaahecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaa
dbaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaackaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpalaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoamaaaaafmcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaa
aaaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdodcaaaabamcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaadagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidn
chbgjidndcaaaaanmcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaa
abaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaakeanmjdpkeanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaa
adaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaa
adaaaaaakgaobaaaadaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaa
kgaobaaaadaaaaaadcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejea
nlapejeaabaaaaahdcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaa
dcaaaaajdcaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaa
abaaaaaadiaaaaakgcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaa
idpjkcdoidpjkcdoaaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdp
diaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaa
dicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaaj
hcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaa
dccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaeaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
aaaamadpddaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
pcaabaaaabaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaa
aaaaaaaaakaaaaaaefaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaa
adaaaaaaagiacaaaaaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaaj
pcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaa
aaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaa
dcaaaaakpcaabaaaadaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaa
egaobaaaaeaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaadaaaaaadcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaa
abeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4_pp r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq_pp r2.w, r2.w
mul_pp r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 240 // 240 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_DarkOverlayDetailScale]
Vector 224 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmkbcgioiljfdiadgcnjloodnfcmkniggabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaaegiecaaaaaaaaaaaaoaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaanaaaaaaegiacaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgpajcelmhedaemljbfkiapeaagpfjanabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgpajcelmhedaemljbfkiapeaagpfjanabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 240 // 240 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_DarkOverlayDetailScale]
Vector 224 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgmaakgcfdaaloeeokenggebcdihiicelabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaaegiecaaaaaaaaaaaaoaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaanaaaaaaegiacaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 240 // 240 used size, 12 vars
Vector 144 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_DetailScale]
Float 196 [_DetailVertScale]
Float 200 [_DetailDist]
Float 204 [_MinLight]
Float 208 [_DarkOverlayDetailScale]
Vector 224 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgmaakgcfdaaloeeokenggebcdihiicelabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaapaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
amaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaamaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaalaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaapgipcaaaaaaaaaaaamaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaanaaaaaaegiecaaaaaaaaaaaaoaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaanaaaaaaegiacaaaaaaaaaaaaoaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgpajcelmhedaemljbfkiapeaagpfjanabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_DarkOverlayDetailScale]
Vector 9 [_DarkOverlayDetailOffset]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_DarkOverlayTex] 2D
SetTexture 4 [_DarkOverlayDetailTex] 2D
"ps_3_0
; 118 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord1 v0.x
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
mov r2.xyz, v3
dp3_sat r2.x, v1, -r2
add r2.y, r2.x, c15
mul r0.xy, v3.zyzw, c5.x
mul r1.xy, v3.zyzw, c4.x
mul r5.xy, v3.zxzw, c8.x
abs r0.w, v3.z
abs r4.zw, v3.xyxy
max r1.w, r4.z, r0
rcp r2.x, r1.w
min r1.w, r4.z, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c12, c12.z
mad r3.y, r3, r2.w, c12.w
mad r3.y, r3, r2.w, c13.x
mad r3.y, r3, r2.w, c13
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c15.z, c15.w
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v3, c5.x
mul r0.xy, v3, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r4.z, r1, r0
mul r1.xy, v3.zxzw, c5.x
mul r0.xy, v3.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3.y, r2, c13.z
mul r1.y, r2.w, r1.w
dp4 r2.w, c1, c1
mad_pp r0.xyz, r4.w, r0, r2
add r1.x, r4.z, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v3.z, r1, r2.x
cmp r1.w, v3.x, r1, -r1
mul r2.x, v0, c6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c10
mad r0.x, r0.w, c10.z, c10.w
mad r0.x, r0.w, r0, c11
mad r0.x, r0.w, r0, c11.y
rsq r0.y, r0.y
mad r4.x, r1.w, c14, c14.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v3.y
cmp r0.w, v3.z, c10.x, c10.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0, r0.x, c11.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v3.y, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c11.z, r0
mad r0.x, r0, c11.w, r0.y
mad r1.w, -r2.x, c11.z, r1
mad r0.z, r0.w, c11.w, r1.w
mul r0.y, r0.z, c12.x
dsy r0.zw, v3.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v3
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.xyz, r4, s0, r3.zwzw, r3
mul_pp r0.xyz, r0, r1
mul r0.xyz, r0, v4
mul r2.xyz, r0, c3
mul r0.zw, v3.xyxy, c8.x
add r1.xy, r0.zwzw, c9
mul r0.xy, v3.zyzw, c8.x
add r0.xy, r0, c9
texld r1, r1, s4
texld r0, r0, s4
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r5.xy, r5, c9
texld r0, r5, s4
add_pp r0, r0, -r1
mad_pp r0, r4.w, r0, r1
rsq r2.w, r2.w
mul r1.xyz, r2.w, c1
dp3_sat r1.x, v2, r1
add_pp r1.x, r1, c14.z
mul_pp r1.w, r1.x, c2
texldd r3, r4, s3, r3.zwzw, r3
mov r1.y, c7.x
mul_pp r0, r3, r0
mul_pp_sat r1.w, r1, c14
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c15.x
add_pp r1.w, -r1, c10.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c10.y
"
}

SubProgram "d3d11 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 176 // 176 used size, 11 vars
Vector 80 [_LightColor0] 4
Vector 112 [_Color] 4
Float 128 [_DetailScale]
Float 132 [_DetailVertScale]
Float 136 [_DetailDist]
Float 140 [_MinLight]
Float 144 [_DarkOverlayDetailScale]
Vector 160 [_DarkOverlayDetailOffset] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
BindCB "UnityPerFrame" 2
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailVertTex] 2D 2
SetTexture 2 [_DetailTex] 2D 1
SetTexture 3 [_DarkOverlayTex] 2D 3
SetTexture 4 [_DarkOverlayDetailTex] 2D 4
// 103 instructions, 5 temp regs, 0 temp arrays:
// ALU 85 float, 0 int, 4 uint
// TEX 9 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfgpajcelmhedaemljbfkiapeaagpfjanabaaaaaameapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaababaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaoaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcheaoaaaaeaaaaaaajnadaaaafjaaaaaeegiocaaa
aaaaaaaaalaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaadbcbabaaaabaaaaaa
gcbaaaadocbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaadiaaaaaipcaabaaaaaaaaaaaggbcbaaaadaaaaaaagiacaaaaaaaaaaa
aiaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaaaaaaaaaogakbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbgbaaaadaaaaaa
agifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaaadaaaaaaogakbaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaacaaaaaaaagabaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaabacaaaaiicaabaaaaaaaaaaa
jgbhbaaaabaaaaaaegbcbaiaebaaaaaaadaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaddddhdlpdccaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaaaecabeaaaaaaaaaaadpdcaaaaajhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadiaaaaaipcaabaaa
adaaaaaacgbebaaaadaaaaaafgifcaaaaaaaaaaaaiaaaaaaefaaaaajpcaabaaa
aeaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaefaaaaaj
pcaabaaaadaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaa
aaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaa
dcaaaaajhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaiaebaaaaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaaagbabaiaibaaaaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaadaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaadaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaafgbfbaia
ibaaaaaaadaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaalhcaabaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaapcaaaaiicaabaaaaaaaaaaaagbabaaaabaaaaaakgikcaaaaaaaaaaa
aiaaaaaadcaaaaajhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaadeaaaaajicaabaaaaaaaaaaackbabaiaibaaaaaaadaaaaaa
akbabaiaibaaaaaaadaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaaadaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackbabaiaibaaaaaaadaaaaaaakbabaiaibaaaaaa
adaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgbfbaaaadaaaaaajgbfbaiaebaaaaaa
adaaaaaaabaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaabaaaaaaddaaaaah
ecaabaaaabaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaadbaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaackbabaaaadaaaaaaakbabaaaadaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahecaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaackaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpalaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaabaaaaaaagbebaaaadaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahbcaabaaaaeaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdodcaaaaba
mcaabaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
dagojjlmdagojjlmaceaaaaaaaaaaaaaaaaaaaaachbgjidnchbgjidndcaaaaan
mcaabaaaabaaaaaakgaobaaaabaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaiedefjloiedefjlodcaaaaanmcaabaaaabaaaaaakgaobaaa
abaaaaaafgbjbaiaibaaaaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaakeanmjdp
keanmjdpaaaaaaalmcaabaaaadaaaaaafgbjbaiambaaaaaaadaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaiadpaaaaiadpelaaaaafmcaabaaaadaaaaaakgaobaaa
adaaaaaadiaaaaahmcaabaaaaeaaaaaakgaobaaaabaaaaaakgaobaaaadaaaaaa
dcaaaaapmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaamaaaaaaamaaceaaaaaaaaaaaaaaaaaaaaanlapejeanlapejeaabaaaaah
dcaabaaaabaaaaaaegaabaaaabaaaaaaogakbaaaaeaaaaaadcaaaaajdcaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaadaaaaaaegaabaaaabaaaaaadiaaaaak
gcaabaaaacaaaaaaagabbaaaabaaaaaaaceaaaaaaaaaaaaaidpjkcdoidpjkcdo
aaaaaaaaalaaaaafccaabaaaadaaaaaackaabaaaacaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaacaaaaaaejaaaaanpcaabaaaabaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaaaaaaaaaaaahaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaa
egiccaaaaaaaaaaaafaaaaaapgipcaaaaaaaaaaaaiaaaaaadccaaaakhcaabaaa
abaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaeaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaamadpddaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalpcaabaaaabaaaaaa
ggbcbaaaadaaaaaaagiacaaaaaaaaaaaajaaaaaaegiecaaaaaaaaaaaakaaaaaa
efaaaaajpcaabaaaadaaaaaaegaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aeaaaaaaefaaaaajpcaabaaaabaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaeaaaaaadcaaaaaldcaabaaaaeaaaaaaegbabaaaadaaaaaaagiacaaa
aaaaaaaaajaaaaaaegiacaaaaaaaaaaaakaaaaaaefaaaaajpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegaobaiaebaaaaaaaeaaaaaadcaaaaakpcaabaaa
adaaaaaaagbabaiaibaaaaaaadaaaaaaegaobaaaadaaaaaaegaobaaaaeaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaadaaaaaa
dcaaaaakpcaabaaaabaaaaaafgbfbaiaibaaaaaaadaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadcaaaaakhcaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
abaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadcaaaaajhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 167

	
		}
		
	} 
	
}
}
